scalar AccountNumber
scalar AccountName
scalar HexaString
scalar Currency
scalar OperationHash
scalar PublicKey

type Query {
    getAccount(account: AccountNumber!): Account
    getOperation(opHash: OperationHash!): Operation
    getBlock(block: Int!): Block
}

enum OpType {
    ALL
    BLOCKCHAIN_REWARD
    TRANSACTION
    CHANGE_KEY
    RECOVER_FUNDS
    LIST_FOR_SALE
    DELIST
    BUY
    CHANGE_KEY_ACCOUNT
    CHANGE_ACCOUNT_INFO
    MULTI_OPERATION
    DATA
}

enum AccountState {
    normal
    listed
}

type Account {
    account: AccountNumber!
    name: AccountName
    type: Int!
    balance: Currency!
    nOperation: Int!
    updatedB: Int!
    state: AccountState!
    lockedUntilBlock: Int!
    price: Currency
    sellerAccount: Account
    privateSale: Boolean
    publicKey: PublicKey
    getOperations(page: Int = 1, amount: Int = 100, opType: OpType = IGNORE) : [Operation]
}

type Block {
    block: AccountNumber
    publicKey: PublicKey
    reward: Currency
    fee: Currency
    ver: Int
    verA: Int
    timestamp: Int
    target: Int
    nonce: Int
    payload: String
    sbh: HexaString
    oph: HexaString
    pow: HexaString
    hashratekhs: Int
    maturation: Int
    operations: Int
    getOperations(page: Int = 1, amount: Int = 100, opType: OpType = IGNORE) : [Operation]
}

type Operation {
    valid: Boolean
    errors: String
    payload: HexaString
    block: Int
    time: Int
    opBlock: Int
    maturation: Int
    opType: Int
    account: Account
    accountNumber: AccountNumber
    opTxt: String
    amount: Currency
    fee: Currency
    balance: Currency
    opHash: OperationHash
    subType: Int
    signerAccount: Account
    signerAccountNumber: AccountNumber
    changers: [Changer],
    receivers: [Receiver],
    senders: [Sender]
}

type Changer {
    account: Account
    accountNumber: AccountNumber
    nOperation: Int
    newPublicKey: PublicKey
    newName: AccountName
    newType: Int
    sellerAccount: Account
    sellerAccountNumber: AccountNumber
    accountPrice: Currency
    lockedUntilBlock: Int
    fee: Currency
}

type Receiver {
    account: Account
    accountNumber: AccountNumber
    amount: Currency
    payload: HexaString
}

type Sender {
    account: Account
    accountNumber: AccountNumber
    nOperation: Int
    amount: Currency
    payload: HexaString
}
