{"version":3,"sources":["webpack://@pascalcoin-sbx/data-spec/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/data-spec/webpack/bootstrap","webpack://@pascalcoin-sbx/data-spec/../common/src/BC.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Endian.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/BytesWithLength.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/BytesWithoutLength.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/data-spec/./src/AbstractSpec.js","webpack://@pascalcoin-sbx/data-spec/../common/index.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Base58.js","webpack://@pascalcoin-sbx/data-spec/../common/src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Sha.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Util.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/StringWithLength.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/StringWithoutLength.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/data-spec/./index.js","webpack://@pascalcoin-sbx/data-spec/./src/Registry.js","webpack://@pascalcoin-sbx/data-spec/./src/Serializer/index.js","webpack://@pascalcoin-sbx/data-spec/./src/Serializer/JSON.js","webpack://@pascalcoin-sbx/data-spec/./src/Serializer/CSV.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/data-spec/(webpack)/buildin/global.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@pascalcoin-sbx/data-spec/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/data-spec//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/index.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/index.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Repeating.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Decissive.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Core/BytesFixedLength.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/AccountName.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/data-spec/../common/src/Coding/Pascal/OperationHash.js","webpack://@pascalcoin-sbx/data-spec/./src/Specs/index.js","webpack://@pascalcoin-sbx/data-spec/./src/Specs/Ruuvi.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Buffer","Endian","require","P_BUFFER","BC","constructor","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","e","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","switchEndian","match","reverse","join","switchEndianIf","targetEndian","detect","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","method","readInt32","buf","allocUnsafe","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","P_HAS_FIXED_VALUE","P_DESCRIPTION","id","hasFixedValue","fixedValue","typeInfo","description","extra","hierarchy","encodedSize","decodeFromBytes","encodeToBytes","describe","type","fixed","withFixedValue","AbstractInt","super","info","push","fromInt32","AbstractType","P_SUBTYPES","P_SIZE_ENCODED","subTypes","addSubType","field","clearSubTypes","toArray","obj","forEach","subType","values","objOrArray","empty","idx","subTypeValue","Array","isArray","arguments","decoded","encoded","P_ENDIAN","P_UNSIGNED","fromInt16","fromInt8","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","TypeError","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","isBuffer","len","checked","copy","val","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","x","y","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","BN","P_VALUE","toFixed","base","dm","divmod","mod","div","isNegative","Currency","pasc","isBN","split","negative","substring","comps","whole","fraction","molina","add","neg","isVague","toStringOpt","decimals","RegExp","toMolina","addValue","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","PascalCoinInfo","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","splitted","map","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","keys","xylPublicKey","xOrY","lPrivateKey","supported","Int8","Int16","Int32","BytesWithoutLength","P_LENGTH_FIELD","P_BYTES_FIELD","byteSize","decodedSimple","PascalCurve","AbstractSpec","payload","Base58","Sha","Util","Types","Coding","bs58","encode","decode","block","fromMolina","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","assert","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","parseBase","num","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","w","off","limbLen","limbPow","total","word","imuln","_iaddn","dest","clone","_expand","_normSign","zeros","groupSizes","groupBases","smallMulTo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toBuffer","toArrayLike","ArrayType","reqLength","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","output","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","sha256","sha512","buffers","hasher","SHA256","update","digest","SHA512","version","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c2","c3","bin2longbin","longbin","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","ind","litteendian","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","ALLOWED_ALL","ALLOWED_START","AccountName","validate","toStringEscaped","c1","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","P_KEY","P_CURVE","privateKeyLength","ec","P_X","P_XL","P_Y","P_YL","PublicKey","yl","xl","ecdh","fromInt","validate64Bit","isUnsigned","StringWithoutLength","PascalAccountNumber","Registry","Serializer","Specs","P_ITEMS","register","dataSpec","JSON","CSV","P_PRETTY","pretty","stringify","jsonString","parse","P_DELIMITER","P_ENCLOSURE","P_ESCAPE_CHAR","escape","enclosure","escapeChar","delimiter","withKeys","withKeysDelim","valEsc","keyEsc","deserialize","csv","state","inValue","result","addCurr","cb","basex","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","Function","window","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","isLE","mLen","eLen","eMax","eBias","nBits","NaN","rt","LN2","webpackPolyfill","deprecate","paths","children","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","OperationHash","Keys","PrivateKey","KeyPair","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","publicKey","CompositeType","Repeating","Decissive","Core","Int64","StringWithLength","BytesWithLength","BytesFixedLength","Pascal","NOperation","OpType","P_REPEAT_LIMIT","P_TYPE","repeatLimit","counter","limitArrived","item","P_SUBTYPE_RESOLVER","P_MARKER_FIELD","markerField","subTypeResolver","all","P_SIZE","PascalPublicKey","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","PrivateKeyType","PascalAccountName","PascalCurrency","P_INT_TYPE","OperationHashType","Ruuvi"],"mappings":"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","file":"@pascalcoin-sbx/data-spec.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/data-spec\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/data-spec\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/data-spec\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      try {\n        return BC.fromHex(data);\n      } catch (e) {\n        return BC.fromString(data);\n      }\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str, 'utf8'));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString();\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndian() {\n    return BC.fromHex(\n      this[P_BUFFER].toString('hex').match(/../g).reverse().join(''),\n    );\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndianIf(targetEndian) {\n    if (Endian.detect() !== targetEndian) {\n      return this.switchEndian();\n    }\n\n    return this;\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","const P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\nconst P_HAS_FIXED_VALUE = Symbol('has_fixed_value');\nconst P_DESCRIPTION = Symbol('description');\n\n/**\n * Abstract field type to encode and decode values. Abstracts encodeToBytes and decodeFromBytes as\n * basic implementations but in fact it can be anything.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string|null} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n    this[P_HAS_FIXED_VALUE] = false;\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Gets a value indicating whether the field type has a fixed value.\n   *\n   * @returns {Boolean}\n   */\n  get hasFixedValue() {\n    return this[P_HAS_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the fixed value.\n   *\n   * @returns {*}\n   */\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    return {\n      name: 'AbstractType',\n      description: this.description(),\n      extra: {},\n      hierarchy: ['AbstractType']\n    };\n  }\n\n  /**\n   * Gets the encoded size of the type.\n   *\n   * @return {Number}\n   */\n  get encodedSize() {\n    throw new Error('Encoded size getter not implemented');\n  }\n\n  /**\n   * Decodes a value using the rules defined in the method from the given bytes.\n   *\n   * @param {BC} bc\n   */\n  decodeFromBytes(bc) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Returns the encoded bytes for the given value.\n   *\n   * @param {*} value\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Describes the type.\n   *\n   * @param {*} value\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    if (this.hasFixedValue) {\n      description.fixed = this.fixedValue;\n    }\n\n    return description;\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  withFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    this[P_HAS_FIXED_VALUE] = true;\n    return this;\n  }\n\n  /**\n   * Sets the description and returns the type or gets the description itself.\n   *\n   * @param {String} description\n   * @returns {AbstractType|String}\n   */\n  description(description = null) {\n    if (description === null) {\n      return this[P_DESCRIPTION];\n    }\n\n    this[P_DESCRIPTION] = description;\n    return this;\n  }\n}\n\nmodule.exports = AbstractType;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int32', unsigned, endian);\n    this.description('4byte 32bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int32';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 4;\n  }\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SUBTYPES = Symbol('subtypes');\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A Type that itself is made up of multiple other (sub-)types.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id || 'composite_type');\n    super.description('A type that itself is made up of multiple other types.');\n    this[P_SUBTYPES] = [];\n  }\n\n  /**\n   * Gets all subtypes.\n   *\n   * @returns {Array}\n   */\n  get subTypes() {\n    return this[P_SUBTYPES];\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'CompositeType';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Adds a new field (type) definition.\n   *\n   * @param {AbstractType} field\n   */\n  addSubType(field) {\n    this[P_SUBTYPES].push(field);\n    return this;\n  }\n\n  clearSubTypes() {\n    this[P_SUBTYPES] = [];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Boolean} toArray\n   * @return {Object}\n   */\n  decodeFromBytes(bc, toArray = false) {\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.subTypes.forEach((subType) => {\n      obj[subType.id] = subType.decodeFromBytes(bc.slice(offset), toArray, obj);\n      offset += subType.encodedSize;\n    });\n\n    return toArray ? Object.values(obj) : obj;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let bc = BC.empty();\n\n    this.subTypes.forEach((subType, idx) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = Array.isArray(objOrArray) ? objOrArray[idx] : objOrArray[subType.id];\n      }\n\n      // we will use the first available\n      bc = bc.append(subType.encodeToBytes(subTypeValue, objOrArray));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = this.decodeFromBytes(this.encodeToBytes(value));\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = description.encoded.length;\n    }\n\n    description.subTypes = [];\n\n    this.subTypes.forEach((subType) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = value[subType.id];\n      }\n\n      description.subTypes.push(subType.describe(subTypeValue));\n    });\n\n    return description;\n  }\n}\n\nmodule.exports = CompositeType;\n","const AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'AbstractInt';\n    info.extra = {\n      unsigned: this.unsigned,\n      endian: this.endian\n    };\n\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    description.encodedSize = this.encodedSize;\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.encoded = this.encodeToBytes(value).toHex();\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = AbstractInt;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for a 16bit int value.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int16', unsigned, endian);\n    this.description('2byte 16bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int16';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 2;\n  }\n\n  /**\n   * Decodes the int16 value from the given bytes.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Encodes the given Int16 value to a byte sequence.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int16;\n","const AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8Bit int value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id || 'int8', unsigned, Endian.LITTLE_ENDIAN);\n    this.description('1byte 8bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int8';\n    info.hierarchy.push(info.name);\n\n    delete info.extra.endian;\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 1;\n  }\n\n  /**\n   * Reads the int8 value from the given bytes.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt8(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int8;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","const AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\nconst BytesWithoutLength = require('./BytesWithoutLength');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic content in form of bytes (prepends the length).\n */\nclass BytesWithLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {string} id\n   */\n  constructor(id, byteSize = 1) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('Bytes with variable size prepended');\n    this[P_BYTES_FIELD] = new BytesWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8('length', true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('IntSize must be either 8, 16 or 32');\n    }\n\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'BytesWithLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].decodeFromBytes(bc) + this[P_LENGTH_FIELD].encodedSize;\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    this[P_SIZE_ENCODED] = value.length + this[P_LENGTH_FIELD].encodedSize;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(\n      this[P_SIZE_ENCODED] - this[P_LENGTH_FIELD].encodedSize\n    );\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.decodedSimple = value.toHex();\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = BytesWithLength;\n","const AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write bytes without prepending the length.\n */\nclass BytesWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'bytes_without_length');\n    this.description('Btes without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'BytesWithoutLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value);\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    if (arguments.length > 0) {\n      description.value = value;\n      description.encoded = this.encodeToBytes(value);\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = BytesWithoutLength;\n","const PascalCurve = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', true, Endian.LITTLE_ENDIAN);\n    this.description('Key curve id');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Curve';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC} bc\n   * @returns {PascalCurve}\n   */\n  decodeFromBytes(bc) {\n    return new PascalCurve(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {PascalCurve} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","class AbstractSpec {\n  constructor() {\n    if (new.target === AbstractSpec) {\n      throw new TypeError('Cannot construct Abstract instances directly');\n    }\n  }\n\n  static get type() {\n    throw new Error('type getter not implemented');\n  }\n\n  static parse(payload) {\n    throw new Error('parse not implemented');\n  }\n\n  serialize() {\n    throw new Error('serialize not implemented');\n  }\n}\n\nmodule.exports = AbstractSpec;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","class Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   * Tests are not performed.\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  /* istanbul ignore next */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (this[P_MD160].length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_KEY].length > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_KEY].length}`\n      );\n    }\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\nconst BN = require('bn.js');\n\nfunction validate64Bit(isUnsigned, value) {\n  if (isUnsigned) {\n    if (value.isNeg()) {\n      throw new Error('64bit value is negative. Only signed allowed.');\n    } else if (value.gt(new BN('18446744073709551615'))) {\n      throw new Error('Invalid unsigned 64 bit value.');\n    }\n  } else if (!isUnsigned) {\n    if (value.gt(new BN('9223372036854775807')) || value.lt(new BN('-9223372036854775808'))) {\n      throw new Error('Invalid signed 64 bit value.');\n    }\n  }\n\n  return value;\n}\n\n/**\n * Field type for 64bit int values using BN.js.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'int64', unsigned, endian);\n    this.description('8byte 64bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int64';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 8;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC} bc\n   * @returns {BN}\n   */\n  decodeFromBytes(bc) {\n    let value = new BN(bc.buffer, 10, this.endian.toLowerCase());\n\n    if (!this.unsigned) {\n      value = value.fromTwos(64);\n    }\n\n    return validate64Bit(this.unsigned, value);\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {BN} value\n   */\n  encodeToBytes(value) {\n    value = validate64Bit(this.unsigned, value);\n    if (!this.unsigned) {\n      value = value.toTwos(64);\n    }\n    return BC.from(value.toBuffer(this.endian.toLowerCase(), this.encodedSize));\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    description.encodedSize = this.encodedSize;\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.decodedSimple = value.toString(10, this.encodedSize);\n      description.encoded = this.encodeToBytes(value).toHex();\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = Int64;\n","const AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\n\nconst StringWithoutLength = require('./StringWithoutLength');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithLength extends AbstractType {\n\n  constructor(id, byteSize = 1) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('String with size prepended');\n    this[P_BYTES_FIELD] = new StringWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8('length', true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'StringWithLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].decodeFromBytes(bc);\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_LENGTH_FIELD].encodedSize + this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {BC} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE_ENCODED] = value.length;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(this[P_SIZE_ENCODED]);\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.encoded = this.encodeToBytes(value);\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = StringWithLength;\n","const AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write dynamic strings without prepending the length.\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'string_without_length');\n    this.description('Single string value without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'StringWithoutLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    return bc.toString();\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value, 'string');\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    if (arguments.length > 0) {\n      description.value = value;\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","const PascalAccountNumber = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', true, Endian.LITTLE_ENDIAN);\n    this.description('An account number');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'AccountNumber';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalAccountNumber}\n   */\n  decodeFromBytes(bc) {\n    return new PascalAccountNumber(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {PascalAccountNumber} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n}\n\nmodule.exports = AccountNumber;\n","const Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n    this.description('Accounts n_operation value.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'NOperation';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalAccountName}\n   */\n  decodeFromBytes(bc) {\n    return super.decodeFromBytes(bc);\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {Number} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n}\n\nmodule.exports = NOperation;\n","module.exports = {\n  Registry: require('./src/Registry'),\n  AbstractSpec: require('./src/AbstractSpec'),\n  Serializer: require('./src/Serializer'),\n  Specs: require('./src/Specs')\n};\n","const P_ITEMS = [];\n\nclass Registry {\n  constructor() {\n    this[P_ITEMS] = {};\n  }\n\n  /**\n     *\n   * @param {AbstractSpec} dataSpec\n   * @param {Number} type\n     */\n  register(dataSpec, type = null) {\n    if (type === null) {\n      type = dataSpec.type;\n    } else {\n      type = parseInt(type, 10);\n    }\n\n    if (this[P_ITEMS][type] === undefined) {\n      this[P_ITEMS][type] = [];\n    }\n\n    this[P_ITEMS][type].push(dataSpec);\n  }\n}\n\nmodule.exports = Registry;\n","module.exports = {\n  JSON: require('./JSON'),\n  CSV: require('./CSV')\n};\n","const P_PRETTY = Symbol('pretty');\n\n/**\n * A serializer from JSON. It simply generates a JSON string from the given\n * value or parses the given json string.\n */\nclass JSON_ {\n  /**\n   * Constructor.\n   *\n   * @param {Boolean} pretty\n   */\n  constructor(pretty = false) {\n    this[P_PRETTY] = !!pretty;\n  }\n\n  /**\n   * Serializes the given parameter.\n   *\n   * @param {*} data\n   * @returns {string}\n   */\n  serialize(data) {\n    if (this[P_PRETTY]) {\n      return JSON.stringify(data, null, 2);\n    }\n    return JSON.stringify(data);\n  }\n\n  /**\n   * Deserializes the given json string.\n   *\n   * @param {String} jsonString\n   * @returns {*}\n   */\n  static deserialize(jsonString) {\n    return JSON.parse(jsonString);\n  }\n}\n\nmodule.exports = JSON_;\n","const Util = require('@pascalcoin-sbx/common').Util;\n\nconst P_DELIMITER = Symbol('delimiter');\nconst P_ENCLOSURE = Symbol('enclosure');\nconst P_ESCAPE_CHAR = Symbol('escape_char');\n\nfunction escape(str, enclosure, escapeChar) {\n  return str.replace(new RegExp(Util.escapeRegex(enclosure), 'g'), escapeChar + enclosure);\n}\n\n/**\n * A simple CSV serializer and deserializer.\n */\nclass CSV {\n  /**\n   * Constructor\n   *\n   * @param {String} delimiter\n   * @param {String} enclosure\n   * @param {String} escapeChar\n   */\n  constructor(delimiter = ',', enclosure = '\"', escapeChar = '\\\\') {\n    this[P_DELIMITER] = delimiter;\n    this[P_ENCLOSURE] = enclosure;\n    this[P_ESCAPE_CHAR] = escapeChar;\n  }\n\n  /**\n   * Serializes the given data.\n   *\n   * @param {Object|Array} data\n   * @param {Boolean} withKeys\n   * @param {String} withKeysDelim\n   * @returns {string}\n   */\n  serialize(data, withKeys = false, withKeysDelim = ':') {\n    let r = '';\n\n    const keys = Object.keys(data);\n\n    // loop data and add values to resulting csv\n    keys.forEach((key, idx) => {\n      let valEsc = escape(data[key], this[P_ENCLOSURE], this[P_ESCAPE_CHAR]);\n\n      // prepend key and delim\n      if (withKeys) {\n        let keyEsc = escape(key, this[P_ENCLOSURE], this[P_ESCAPE_CHAR]);\n\n        r += `${this[P_ENCLOSURE]}${keyEsc}${withKeysDelim}${valEsc}${this[P_ENCLOSURE]}`;\n      } else {\n        r += `${this[P_ENCLOSURE]}${valEsc}${this[P_ENCLOSURE]}`;\n      }\n      if (idx < keys.length - 1) {\n        r += this[P_DELIMITER];\n      }\n    });\n\n    return r;\n  }\n\n  /**\n   * Parses the given csv string and returns an object or an array with the results.\n   *\n   * @param {String} csv\n   * @param {Boolean} withKeys\n   * @param {String} withKeysDelim\n   * @returns {Array|Object}\n   */\n  deserialize(csv, withKeys = false, withKeysDelim = ':') {\n    const state = {\n      inValue: false\n    };\n    let result = [];\n\n    if (withKeys === true) {\n      result = {};\n    }\n    let curr = '';\n\n    const addCurr = () => {\n      if (withKeys) {\n        result[curr.split(withKeysDelim)[0]] = curr.split(withKeysDelim)[1];\n      } else {\n        result.push(curr);\n      }\n    };\n\n    // loop the csv string\n    for (let i = 0; i < csv.length; i++) {\n      const c = csv.charAt(i);\n      const cb = i > 0 ? csv.charAt(i - 1) : false;\n\n      // check if its an enclosure\n      if (c === this[P_ENCLOSURE] && !state.inValue) {\n        state.inValue = true;\n        continue;\n      }\n      if (c === this[P_ENCLOSURE] && cb !== this[P_ESCAPE_CHAR] && state.inValue) {\n        state.inValue = false;\n        addCurr();\n        curr = '';\n        continue;\n      }\n\n      // handle no enclosure\n      if (this[P_ENCLOSURE] === '') {\n        // we are always \"in\" a value, except we find a delimiter\n        state.inValue = true;\n        if (c === this[P_DELIMITER]) {\n          addCurr();\n          curr = '';\n          continue;\n        }\n      }\n\n      if (state.inValue) {\n        if (cb === this[P_ESCAPE_CHAR]) {\n          curr = curr.substr(0, curr.length - this[P_ESCAPE_CHAR].length);\n        }\n        curr += c;\n      }\n    }\n\n    if (curr !== '') {\n      addCurr();\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = CSV;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","module.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","module.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","module.exports = {\n  AbstractType: require('./AbstractType'),\n  CompositeType: require('./CompositeType'),\n  Repeating: require('./Repeating'),\n  Decissive: require('./Decissive'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    StringWithLength: require('./Core/StringWithLength'),\n    StringWithoutLength: require('./Core/StringWithoutLength'),\n    BytesWithLength: require('./Core/BytesWithLength'),\n    BytesWithoutLength: require('./Core/BytesWithoutLength'),\n    BytesFixedLength: require('./Core/BytesFixedLength')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey'),\n      PrivateKey: require('./Pascal/Keys/PrivateKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    AccountName: require('./Pascal/AccountName'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType'),\n    OperationHash: require('./Pascal/OperationHash')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_REPEAT_LIMIT = Symbol('repeat_limit');\nconst P_TYPE = Symbol('type');\n\n/**\n * A Type that itself is made up of multiple other types.\n */\nclass Repeating extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, type, repeatLimit = -1) {\n    super(id || 'repeating');\n    super.description('A type that itself has one repeating type that will ' +\n      'be written / read until the limit is reached or data is empty.');\n    this[P_TYPE] = type;\n    this[P_REPEAT_LIMIT] = repeatLimit;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Repeating';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @return {Object}\n   */\n  decodeFromBytes(bc) {\n    let result = [];\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    let counter = 0;\n    let limitArrived = false;\n\n    do {\n      const decoded = this[P_TYPE].decodeFromBytes(bc.slice(offset));\n\n      result.push(decoded);\n      offset += this[P_TYPE].encodedSize;\n      counter++;\n      limitArrived = (this[P_REPEAT_LIMIT] > -1 && this[P_REPEAT_LIMIT] === counter);\n\n    } while (offset < bc.length && !limitArrived);\n\n    return result;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(arr) {\n    let bc = BC.empty();\n\n    arr.forEach((item, idx) => {\n      if (idx >= this[P_REPEAT_LIMIT] && this[P_REPEAT_LIMIT] > -1) {\n        return;\n      }\n      bc = bc.append(this[P_TYPE].encodeToBytes(item));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = this.decodeFromBytes(this.encodeToBytes(value));\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = description.encoded.length;\n    }\n\n    description.subTypes = [];\n\n    this.subTypes.forEach((subType) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = value[subType.id];\n      }\n\n      description.subTypes.push(subType.describe(subTypeValue));\n    });\n\n    return description;\n  }\n}\n\nmodule.exports = Repeating;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CompositeType = require('./CompositeType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_SUBTYPE_RESOLVER = Symbol('subtype_resolver');\nconst P_MARKER_FIELD = Symbol('marker_field');\n\n/**\n * A Type that itself is made up of multiple other types. The types are selected dynamically\n * depending on the given resolver.\n */\nclass Decissive extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor(id, markerField, subTypeResolver) {\n    super(id || 'decissive');\n    super.description('A type that itself has many sub types but only some are triggere based on a marker.');\n    this[P_SUBTYPE_RESOLVER] = subTypeResolver;\n    this[P_MARKER_FIELD] = markerField;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Decissive';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Boolean} toArray\n   * @return {Object}\n   */\n  decodeFromBytes(bc, toArray = false, all = {}) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n\n    return subType.decodeFromBytes(bc, toArray);\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray, all) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n    let bc = subType.encodeToBytes(objOrArray);\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = this.decodeFromBytes(this.encodeToBytes(value));\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = description.encoded.length;\n    }\n\n    description.subTypes = [];\n\n    this.subTypes.forEach((subType) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = value[subType.id];\n      }\n\n      description.subTypes.push(subType.describe(subTypeValue));\n    });\n\n    return description;\n  }\n}\n\nmodule.exports = Decissive;\n","const AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to write bytes without prepending the length.\n */\nclass BytesFixedLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id, length) {\n    super(id || 'bytes_fixed_length');\n    this.description('Btes without length prepended.');\n    this[P_SIZE] = length;\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'BytesFixedLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    return bc.slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    return value.slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    description.encodedSize = this[P_SIZE];\n    if (arguments.length > 0) {\n      description.value = value;\n      description.encoded = this.encodeToBytes(value);\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = BytesFixedLength;\n","const Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PascalPublicKey = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A Public Key value.\n */\nclass PublicKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'pubkey');\n    this.addSubType(new Curve('curve'));\n    this.addSubType(new BytesWithLength('x', 2));\n    this.addSubType(new BytesWithLength('y', 2));\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'PublicKey';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PascalPublicKey(decoded.x, decoded.y, decoded.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","const Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst PrivateKeyType = require('./../../../../src/Types/Keys/PrivateKey');\n\n/**\n * A Public Key value.\n */\nclass PrivateKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'pubkey');\n    this.addSubType(new Curve('curve'));\n    this.addSubType(new BytesWithLength('key', 2));\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'PrivateKey';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PrivateKeyType}\n   */\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PrivateKeyType(decoded.key, decoded.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PrivateKeyType}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = PrivateKey;\n","const PascalAccountName = require('./../../Types/AccountName');\nconst StringWithLength = require('../Core/StringWithLength');\n\n/**\n * A pascal related type that can de/encode an account name.\n */\nclass AccountName extends StringWithLength {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account_name');\n    this.description('An account name');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'AccountName';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalAccountName}\n   */\n  decodeFromBytes(bc) {\n    return new PascalAccountName(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {PascalAccountName} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.toString());\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n}\n\nmodule.exports = AccountName;\n","const Int64 = require('./../Core/Int64');\nconst PascalCurrency = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends Int64 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'currency', false, Endian.LITTLE_ENDIAN);\n    this.description('A type for currency values.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Currency';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC} bc\n   * @returns {PascalCurrency}\n   */\n  decodeFromBytes(bc) {\n    return PascalCurrency.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {PascalCurrency} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.bn);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n\n}\n\nmodule.exports = Currency;\n","const Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_INT_TYPE = Symbol('int_type');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize) {\n    super(id || `optype_int${byteSize * 8}`);\n    switch (byteSize) {\n      case 1:\n        this[P_INT_TYPE] = new Int8('OpType[Int8]', true);\n        break;\n      case 2:\n        this[P_INT_TYPE] = new Int16('OpType[Int16]', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_INT_TYPE] = new Int32('OpType[Int32]', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n    this.description(`Operation type in ${byteSize * 8} bits`);\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = this[P_INT_TYPE].typeInfo;\n\n    info.name = 'OpType';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_INT_TYPE].encodedSize;\n  }\n\n  /**\n   * Decodes and returns the optype.\n   *\n   * @param {BC} bc\n   * @return {Number}\n   */\n  decodeFromBytes(bc) {\n    return this[P_INT_TYPE].decodeFromBytes(bc);\n  }\n\n  /**\n   * Encodes the given optype to bytes.\n   *\n   * @param {Number} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    return this[P_INT_TYPE].encodeToBytes(value);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    description.encodedSize = this.encodedSize;\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.encoded = this.encodeToBytes(value).toHex();\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = OpType;\n","const Endian = require('./../../Endian');\nconst CompositeType = require('./../CompositeType');\nconst Int32 = require('./../Core/Int32');\nconst AccountNumber = require('./AccountNumber');\nconst BytesWithoutLength = require('./../Core/BytesWithoutLength');\nconst NOperation = require('./NOperation');\nconst OperationHashType = require('./../../Types/OperationHash');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass OperationHash extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'ophash');\n    this.description('A pascalCoin operation hash');\n\n    this.addSubType(new Int32('block', true, Endian.LITTLE_ENDIAN));\n    this.addSubType(new AccountNumber('account'));\n    this.addSubType(new NOperation('nOperation', 4));\n    this.addSubType(new BytesWithoutLength('md160'));\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'OperationHash';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC} bc\n   * @returns {OperationHash}\n   */\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new OperationHashType(decoded.block, decoded.account, decoded.nOperation, decoded.md160);\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {OperationHash} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n}\n\nmodule.exports = OperationHash;\n","module.exports = {\n  Ruuvi: require('./Ruuvi')\n};\n","const BC = require('@pascalcoin-sbx/common').BC;\nconst AbstractSpec = require('./../AbstractSpec');\n\nclass Ruuvi extends AbstractSpec {\n  static get type() {\n    return 12;\n  }\n\n  static parse(payload) {\n    return JSON.parse(BC.from(payload).toString());\n  }\n\n  serialize() {\n    return JSON.stringify({a: 'B'});\n  }\n}\n\nmodule.exports = Ruuvi;\n"],"sourceRoot":""}