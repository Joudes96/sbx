{"version":3,"sources":["webpack://@pascalcoin-sbx/epasa/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/epasa/webpack/bootstrap","webpack://@pascalcoin-sbx/epasa/../common/src/BC.js","webpack://@pascalcoin-sbx/epasa/../common/src/Endian.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/epasa/../common/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/BytesWithoutLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/BytesWithLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Ascii.js","webpack://@pascalcoin-sbx/epasa/./src/EPasa.js","webpack://@pascalcoin-sbx/epasa/../common/src/Base58.js","webpack://@pascalcoin-sbx/epasa/external \"buffer\"","webpack://@pascalcoin-sbx/epasa/../common/src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/epasa/../common/src/Sha.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/epasa/../common/src/Util.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/StringWithLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/StringWithoutLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Base58.js","webpack://@pascalcoin-sbx/epasa/./index.js","webpack://@pascalcoin-sbx/epasa/./src/Parser.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Repeating.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Decissive.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/BytesFixedLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/AccountName.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/OperationHash.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/murmur.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Endian","require","P_BUFFER","BC","constructor","buffer","Buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","e","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","detect","method","readInt32","buf","allocUnsafe","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","P_HAS_FIXED_VALUE","P_DESCRIPTION","id","hasFixedValue","fixedValue","encodedSize","decodeFromBytes","options","all","encodeToBytes","withFixedValue","description","undefined","push","canDecode","Base58","PascalCoinInfo","Sha","Util","Types","Coding","AbstractInt","super","fromInt32","AbstractType","P_SUBTYPES","P_SIZE_ENCODED","subTypes","addSubType","field","toArray","obj","forEach","subType","values","objOrArray","empty","idx","subTypeValue","Array","isArray","P_ENDIAN","P_UNSIGNED","fromInt16","fromInt8","encoded","BN","P_VALUE","toFixed","x","base","pow","dm","divmod","mod","div","isNegative","substr","Currency","pasc","isBN","split","join","negative","substring","comps","whole","fraction","molina","mul","add","neg","isVague","toStringOpt","decimals","replace","RegExp","toMolina","addValue","sub","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","splitted","map","isNaN","calculateChecksum","Math","floor","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CURVES","0","714","715","729","716","XYL_PUBKEYS","y","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","indexOf","keys","xylPublicKey","xOrY","lPrivateKey","supported","Int8","Int16","Int32","BytesWithoutLength","P_LENGTH_FIELD","P_BYTES_FIELD","byteSize","lengthId","lengthDesc","lengthField","CurveType","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","Ascii","validate","pos","charCodeAt","toStringEscaped","c1","c2","AccountName","Core","MurmurHash3","v3","P_ACCOUNT_NUMBER","P_ACCOUNT_NAME","P_PAYLOAD","P_PAYLOAD_TYPE","P_PASSWORD","EPasa","NON_DETERMISTIC","ENC_PUBLIC","ENC_RECEIVER","ENC_SENDER","ENC_PASSWORD","FORMAT_ASCII","FORMAT_HEX","FORMAT_BASE58","ADDRESSED_BY_NAME","MAX_PUBLIC_ASCII","MAX_ECIES_ASCII","MAX_AES_ASCII","MAX_PUBLIC_HEX","MAX_ECIES_HEX","MAX_AES_HEX","MAX_PUBLIC_BASE58","MAX_ECIES_BASE58","MAX_AES_BASE58","accountName","hasFormat","isFormatBase58","isFormatAscii","isFormatHex","hasEncryption","isEncryptionPublic","isEncryptionPassword","isEncryptionSender","isEncryptionReceiver","isNonDetermistic","password","payload","compile","format","validatePayloadLength","payloadCompare","typeIdent","maxIdent","encryption","omitChecksum","enc_marker_start","enc_marker_end","asciiPayload","epasa","ePasaString","x86","hash32","bs58","encode","decode","block","fromMolina","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","assert","val","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","len","min","parseBase","num","max","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","j","w","off","limbLen","limbPow","total","word","imuln","_iaddn","copy","dest","clone","_expand","size","_normSign","inspect","zeros","groupSizes","groupBases","smallMulTo","out","lo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","ret","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","res","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","output","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","webpackPolyfill","deprecate","paths","children","sha256","sha512","buffers","hasher","SHA256","update","digest","SHA512","version","Convert","str2bin","bin","subarray","hex2bin","int2bin","integer","number2bin","f","Float64Array","set","base642bin","base64","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c3","String","fromCharCode","bin2longbin","longbin","bin2number","bin2base64","url","btoa","apply","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","fill","ind","litteendian","string","ALLOWED_ALL","ALLOWED_START","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","P_KEY","P_CURVE","privateKeyLength","ec","P_X","P_XL","P_Y","P_YL","PublicKey","yl","xl","ecdh","fromInt","validate64Bit","isUnsigned","StringWithoutLength","P_STRING_FIELD","AccountNumberType","ALLOWED","Parser","state","inAccount","inPayload","inPassword","inChecksum","checksumIdentFound","asciiOpen","asciiClosed","encOpen","encClosed","position","escaped","isEscape","char","exAccNumber","exAccName","message","basex","ALPHABET","TypeError","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","b256","it","vch","isBuffer","pbegin","pend","b58","copyProps","src","dst","SafeBuffer","arg","encodingOrOffset","allocUnsafeSlow","encoding","SlowBuffer","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","OperationHash","Keys","PrivateKey","KeyPair","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","publicKey","CompositeType","Repeating","Decissive","Int64","StringWithLength","BytesWithLength","BytesFixedLength","Pascal","NOperation","OpType","P_REPEAT_LIMIT","P_REPEAT_MARKER","P_TYPE","type","repeatLimit","repeatMarker","result","limit","counter","decoded","arr","item","repeatingType","P_SUBTYPE_RESOLVER","P_MARKER_FIELD","markerField","subTypeResolver","P_SIZE","PublicKeyType","omitXYLenghts","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","PrivateKeyType","AccountNameType","CurrencyType","P_INT_TYPE","OperationHashType","console","library","x64","_x86Multiply","_x86Rotl","_x86Fmix","_x64Add","_x64Multiply","_x64Rotl","_x64LeftShift","_x64Xor","_x64Fmix","seed","remainder","k1","hash128","k2","k3","k4","c4","murmurHash3"],"mappings":"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","file":"@pascalcoin-sbx/epasa.node.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/epasa\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/epasa\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/epasa\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 35);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      try {\n        return BC.fromHex(data);\n      } catch (e) {\n        return BC.fromString(data);\n      }\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str, 'utf8'));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString('utf8');\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\nconst P_HAS_FIXED_VALUE = Symbol('has_fixed_value');\nconst P_DESCRIPTION = Symbol('description');\n\n/**\n * Abstract field type to encode and decode values. Abstracts encodeToBytes and decodeFromBytes as\n * basic implementations but in fact it can be anything.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string|null} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n    this[P_HAS_FIXED_VALUE] = false;\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Gets a value indicating whether the field type has a fixed value.\n   *\n   * @returns {Boolean}\n   */\n  get hasFixedValue() {\n    return this[P_HAS_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the fixed value.\n   *\n   * @returns {*}\n   */\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the encoded size of the type.\n   *\n   * @return {Number}\n   */\n  get encodedSize() {\n    throw new Error('Encoded size getter not implemented');\n  }\n\n  /**\n   * Decodes a value using the rules defined in the method from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Returns the encoded bytes for the given value.\n   *\n   * @param {*} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  withFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    this[P_HAS_FIXED_VALUE] = true;\n    return this;\n  }\n\n  /**\n   * Sets the description and returns the type or gets the description itself.\n   *\n   * @param {String} description\n   * @returns {AbstractType|String}\n   */\n  description(description = null) {\n    if (description === null) {\n      return this[P_DESCRIPTION];\n    }\n\n    if (this[P_DESCRIPTION] === undefined) {\n      this[P_DESCRIPTION] = [];\n    }\n    this[P_DESCRIPTION].push(description);\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the type can be decoded. It is\n   * not possible in some circumstances.\n   *\n   * @return {boolean}\n   */\n  get canDecode() {\n    return true;\n  }\n}\n\nmodule.exports = AbstractType;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int32', unsigned, endian);\n    this.description('4byte 32bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 4;\n  }\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SUBTYPES = Symbol('subtypes');\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A Type that itself is made up of multiple other (sub-)types.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id || 'composite_type');\n    super.description('A type that itself is made up of multiple other types.');\n    this[P_SUBTYPES] = [];\n  }\n\n  /**\n   * Gets all subtypes.\n   *\n   * @returns {Array}\n   */\n  get subTypes() {\n    return this[P_SUBTYPES];\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Adds a new field (type) definition.\n   *\n   * @param {AbstractType} field\n   */\n  addSubType(field) {\n    this[P_SUBTYPES].push(field);\n    return this;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = { toArray: false }, all = null) {\n    if (this.canDecode === false) {\n      throw new Error('This type cannot be decoded.');\n    }\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.subTypes.forEach((subType) => {\n      obj[subType.id] = subType.decodeFromBytes(bc.slice(offset), options, obj);\n      offset += subType.encodedSize;\n    });\n    this[P_SIZE_ENCODED] = offset;\n\n    return options.toArray ? Object.values(obj) : obj;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array|*} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let bc = BC.empty();\n\n    this.subTypes.forEach((subType, idx) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = Array.isArray(objOrArray) ? objOrArray[idx] : objOrArray[subType.id];\n      }\n\n      // we will use the first available\n      bc = bc.append(subType.encodeToBytes(subTypeValue, objOrArray));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = CompositeType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n}\n\nmodule.exports = AbstractInt;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for a 16bit int value.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int16', unsigned, endian);\n    this.description('2byte 16bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 2;\n  }\n\n  /**\n   * Decodes the int16 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Encodes the given Int16 value to a byte sequence.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int16;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8Bit int value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id || 'int8', unsigned, Endian.LITTLE_ENDIAN);\n    this.description('1byte 8bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 1;\n  }\n\n  /**\n   * Reads the int8 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt8(0, this.unsigned);\n  }\n\n  /**\n   * Encodes the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned);\n  }\n}\n\nmodule.exports = Int8;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write bytes without prepending the length. This cannot be decoded in some circumstances.\n */\nclass BytesWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'bytes_without_length');\n    this.description('Bytes without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value);\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = BytesWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\nconst BytesWithoutLength = require('./BytesWithoutLength');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic content in form of bytes (prepends the length).\n */\nclass BytesWithLength extends AbstractType {\n  /**\n   * Constructor\n   *\n   * @param {string} id\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize = 1, lengthId = 'length', lengthDesc = null) {\n    super(id || `bytes_with_length_${byteSize * 8}`);\n    this.description('Bytes with variable size prepended');\n    this[P_BYTES_FIELD] = new BytesWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8(lengthId, true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16(lengthId, true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32(lengthId, true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n\n    if (lengthDesc !== null) {\n      this[P_LENGTH_FIELD].description(lengthDesc);\n    }\n\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].decodeFromBytes(bc) + this[P_LENGTH_FIELD].encodedSize;\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    this[P_SIZE_ENCODED] = value.length + this[P_LENGTH_FIELD].encodedSize;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(\n      this[P_SIZE_ENCODED] - this[P_LENGTH_FIELD].encodedSize\n    );\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  get lengthField() {\n    return this[P_LENGTH_FIELD];\n  }\n}\n\nmodule.exports = BytesWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CurveType = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special pascal type that can en/decode a curve id.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', true, Endian.LITTLE_ENDIAN);\n    this.description('Key curve id');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurveType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new CurveType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurveType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('@pascalcoin-sbx/common').Util;\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '\"():<>[\\\\]{}'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\n/**\n * Small class that holds, validated and outputs an EPasa ascii string.\n */\nclass Ascii {\n  /**\n   * Constructor\n   *\n   * @param {String|Ascii} value\n   */\n  constructor(value) {\n    if (value instanceof Ascii) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Ascii.validate(value);\n    }\n  }\n\n  /**\n   * Validates an ascii string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (value.charCodeAt(pos) < 32 || value.charCodeAt(pos) > 126) {\n        throw new Error(`Invalid ascii - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value itself.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = Ascii;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst Int16 = require('@pascalcoin-sbx/common').Coding.Core.Int16;\nconst MurmurHash3 = require('murmur-hash').v3;\nconst Ascii = require('./Types/Ascii');\nconst Base58 = require('./Types/Base58');\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_ACCOUNT_NUMBER = Symbol('account_number');\nconst P_ACCOUNT_NAME = Symbol('account_name');\nconst P_PAYLOAD = Symbol('payload');\nconst P_PAYLOAD_TYPE = Symbol('payload_type');\nconst P_PASSWORD = Symbol('password');\n\n/**\n * Represents an EPasa.\n */\nclass EPasa {\n\n  /**\n   * Payload encryption and encoding method not specified.\n   *\n   * @returns {number}\n   */\n  static get NON_DETERMISTIC() {\n    return 0;\n  }\n\n  /**\n   * Unencrypted, public payload.\n   *\n   * @returns {number}\n   */\n  static get ENC_PUBLIC() {\n    return 1;\n  }\n\n  /**\n   * ECIES encrypted using recipient accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_RECEIVER() {\n    return 2;\n  }\n\n  /**\n   * ECIES encrypted using sender accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_SENDER() {\n    return 4;\n  }\n\n  /**\n   * AES encrypted using pwd param\n   *\n   * @returns {number}\n   */\n  static get ENC_PASSWORD() {\n    return 8;\n  }\n\n  /**\n   * Payload data encoded in ASCII\n   *\n   * @returns {number}\n   */\n  static get FORMAT_ASCII() {\n    return 16;\n  }\n\n  /**\n   * Payload data encoded in HEX\n   *\n   * @returns {number}\n   */\n  static get FORMAT_HEX() {\n    return 32;\n  }\n\n  /**\n   * Payload data encoded in Base58\n   *\n   * @returns {number}\n   */\n  static get FORMAT_BASE58() {\n    return 64;\n  }\n\n  /**\n   * E-PASA addressed by account name (not number).\n   *\n   * @returns {number}\n   */\n  static get ADDRESSED_BY_NAME() {\n    return 128;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_ASCII() {\n    return 255;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_ASCII() {\n    return 144;\n  }\n\n  /**\n   * The max payload length for AES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_ASCII() {\n    return 223;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_HEX() {\n    return 510;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_HEX() {\n    return 288;\n  }\n\n  /**\n   * The max payload length for AES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_HEX() {\n    return 446;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_BASE58() {\n    return 348;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_BASE58() {\n    return 196;\n  }\n\n  /**\n   * The max payload length for AES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_BASE58() {\n    return 304;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD_TYPE] = EPasa.NON_DETERMISTIC;\n  }\n\n  /**\n   * Sets the account number.\n   *\n   * @param accountNumber\n   */\n  set accountNumber(accountNumber) {\n    if (this[P_ACCOUNT_NAME] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NUMBER] = new AccountNumber(accountNumber);\n  }\n\n  /**\n   * Gets the account number if set.\n   *\n   * @returns {null|AccountNumber}\n   */\n  get accountNumber() {\n    return this[P_ACCOUNT_NUMBER];\n  }\n\n  /**\n   * Gets the account name if set.\n   *\n   * @returns {null|AccountName}\n   */\n  get accountName() {\n    return this[P_ACCOUNT_NAME];\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an assigned format.\n   */\n  hasFormat() {\n    return (this.isFormatBase58() || this.isFormatAscii() || this.isFormatHex());\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an encryption assigned.\n   */\n  hasEncryption() {\n    return (this.isEncryptionPublic() || this.isEncryptionPassword() ||\n        this.isEncryptionSender() || this.isEncryptionReceiver());\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatBase58() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatAscii() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatHex() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the receivers public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionReceiver() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the senders public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionSender() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is aes.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPassword() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD);\n  }\n\n  /**\n   * Gets a value indicating that there is no encryption (public payloads).\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPublic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is not set.\n   *\n   * @returns {boolean}\n   */\n  isNonDetermistic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.NON_DETERMISTIC) === EPasa.NON_DETERMISTIC);\n  }\n\n  /**\n   * Gets the password of the epasa.\n   *\n   * @returns {null|String}\n   */\n  get password() {\n    return this[P_PASSWORD];\n  }\n\n  /**\n   * Gets the payload of the epasa.\n   *\n   * @returns {null|Payload}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the extended checksum.\n   *\n   * @returns {string}\n   */\n  get checksum() {\n    return EPasa.calculateChecksum(this.compile(true));\n  }\n\n  /**\n   * Sets the account name.\n   *\n   * @param {AccountName} accountName\n   */\n  set accountName(accountName) {\n    if (this[P_ACCOUNT_NUMBER] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NAME] = new AccountName(accountName);\n    this[P_PAYLOAD_TYPE] |= EPasa.ADDRESSED_BY_NAME;\n  }\n\n  /**\n   * Sets the payload.\n   *\n   * @param {BC} payload\n   */\n  set payload(payload) {\n\n    if (!this.hasFormat()) {\n      this.format = EPasa.FORMAT_ASCII;\n    }\n\n    if ((!this.hasFormat() || !this.hasEncryption()) && payload.toString() !== '') {\n      throw new Error('EPasa payloads can only be set when the encryption and format is defined.');\n    }\n\n    if (!(payload instanceof BC)) {\n      if (this.isFormatHex()) {\n        payload = BC.fromHex(payload);\n      } else {\n        payload = BC.fromString(payload);\n      }\n    }\n\n    this.validatePayloadLength(payload);\n    this[P_PAYLOAD] = payload;\n\n    return this;\n  }\n\n  /**\n   * Vaidates the length of an unencrypted payload.\n   *\n   * @param {BC} payload\n   * @returns {boolean}\n   */\n  validatePayloadLength(payload) {\n    // TODO: Oh yes, wanted to be smart, but now im unreadable.\n    let payloadCompare = '';\n    let typeIdent = 'ASCII';\n\n    if (this.isFormatAscii()) {\n      payloadCompare = payload.toString();\n    } else if (this.isFormatHex()) {\n      payloadCompare = payload.toHex();\n      typeIdent = 'HEX';\n    } else if (this.isFormatBase58()) {\n      payloadCompare = payload.toString();\n      typeIdent = 'BASE58';\n    }\n\n    let maxIdent = 'PUBLIC';\n\n    if (this.isEncryptionReceiver() || this.isEncryptionSender()) {\n      maxIdent = 'ECIES';\n    } else if (this.isEncryptionPassword()) {\n      maxIdent = 'AES';\n    }\n\n    if (payloadCompare.length > EPasa[`MAX_${maxIdent}_${typeIdent}`]) {\n      throw new Error(\n        `Invalid payload length ${payloadCompare.length} for ${maxIdent}_${typeIdent}. \n        Max is ${EPasa[`MAX_${maxIdent}_${typeIdent}`]}`\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {String} password\n   */\n  set password(password) {\n    this[P_PASSWORD] = password;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} encryption\n   */\n  set encryption(encryption) {\n    if (encryption === EPasa.ENC_PASSWORD && this[P_PASSWORD] === undefined) {\n      throw new Error('Set password before setting the password encryption flag.');\n    }\n\n    this[P_PAYLOAD_TYPE] |= encryption;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} format\n   */\n  set format(format) {\n    this[P_PAYLOAD_TYPE] |= format;\n  }\n\n  /**\n   * Creates a new E-PASA string.\n   *\n   * @param {Boolean} omitChecksum\n   * @returns {string}\n   */\n  compile(omitChecksum = false) {\n    let data = {\n      account: null,\n      enc_marker_start: null,\n      enc_marker_end: null,\n      payload: ''\n    };\n\n    // determine and validate account info\n    if ((this[P_PAYLOAD_TYPE] & EPasa.ADDRESSED_BY_NAME) === EPasa.ADDRESSED_BY_NAME) {\n      data.account = this[P_ACCOUNT_NAME].toStringEscaped();\n    } else {\n      data.account = this[P_ACCOUNT_NUMBER].toString();\n    }\n\n    // if there is a payload, we need to format it\n    if (this[P_PAYLOAD] !== undefined) {\n      if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX) {\n        data.payload = `0x${this[P_PAYLOAD].toHex().toLowerCase()}`;\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58) {\n        data.payload = new Base58(this[P_PAYLOAD].toString()).toString();\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII) {\n        let asciiPayload = new Ascii(this[P_PAYLOAD].toString()).toStringEscaped();\n\n        if (asciiPayload.length > 0) {\n          data.payload = `\"${asciiPayload}\"`;\n        }\n      }\n\n      // now we need to determine the wanted encryption of the payload.\n      if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC) {\n        data.enc_marker_start = '[';\n        data.enc_marker_end = ']';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER) {\n        data.enc_marker_start = '(';\n        data.enc_marker_end = ')';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER) {\n        data.enc_marker_start = '<';\n        data.enc_marker_end = '>';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD) {\n        data.enc_marker_start = '{';\n        data.enc_marker_end = '}';\n        // append password\n        let password = new Ascii(this[P_PASSWORD]);\n\n        data.payload += `:${password.toStringEscaped()}`;\n      }\n    } else {\n      // no payload, no marker\n      data.payload = '';\n      data.enc_marker_start = '';\n      data.enc_marker_end = '';\n    }\n\n    // combine collected data\n    let epasa = `${data.account}${data.enc_marker_start}${data.payload}${data.enc_marker_end}`;\n\n    // no checksum\n    if (omitChecksum) {\n      return epasa;\n    }\n\n    // calculate the checksum\n    return `${epasa}:${EPasa.calculateChecksum(epasa)}`;\n  }\n\n  /**\n   * Calculates the checksum of the epasa.\n   *\n   * @param {String} ePasaString\n   * @returns {string}\n   */\n  static calculateChecksum(ePasaString) {\n    return new Int16('checksum', true, Endian.LITTLE_ENDIAN)\n      .encodeToBytes(MurmurHash3.x86.hash32(ePasaString) % 65536)\n      .toHex();\n  }\n}\n\nmodule.exports = EPasa;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = require(\"buffer\");","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   * Tests are not performed.\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  /* istanbul ignore next */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (this[P_MD160].length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_KEY].length > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_KEY].length}`\n      );\n    }\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\nconst BN = require('bn.js');\n\nfunction validate64Bit(isUnsigned, value) {\n  if (isUnsigned) {\n    if (value.isNeg()) {\n      throw new Error('64bit value is negative. Only signed allowed.');\n    } else if (value.gt(new BN('18446744073709551615'))) {\n      throw new Error('Invalid unsigned 64 bit value.');\n    }\n  } else if (!isUnsigned) {\n    if (value.gt(new BN('9223372036854775807')) || value.lt(new BN('-9223372036854775808'))) {\n      throw new Error('Invalid signed 64 bit value.');\n    }\n  }\n\n  return value;\n}\n\n/**\n * Field type for 64bit int values using BN.js.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'int64', unsigned, endian);\n    this.description('8byte 64bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 8;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BN}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let value = new BN(BC.from(bc).slice(0, this.encodedSize).buffer, 10, this.endian.toLowerCase());\n\n    if (!this.unsigned) {\n      value = value.fromTwos(64);\n    }\n\n    return validate64Bit(this.unsigned, value);\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {BN} value\n   */\n  encodeToBytes(value) {\n    value = validate64Bit(this.unsigned, value);\n    if (!this.unsigned) {\n      value = value.toTwos(64);\n    }\n\n    return BC.from(value.toBuffer(this.endian.toLowerCase(), this.encodedSize));\n  }\n}\n\nmodule.exports = Int64;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../../BC');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\n\nconst StringWithoutLength = require('./StringWithoutLength');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_STRING_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithLength extends AbstractType {\n\n  constructor(id, byteSize = 1) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('String with size prepended');\n    this[P_STRING_FIELD] = new StringWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8('length', true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].encodedSize + this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc));\n    return this[P_STRING_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE_ENCODED] = value.length;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(this[P_SIZE_ENCODED]);\n\n    return bc.append(this[P_STRING_FIELD].encodeToBytes(value));\n  }\n}\n\nmodule.exports = StringWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write dynamic strings without prepending the length.\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'string_without_length');\n    this.description('Single string value without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).toString();\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value, 'string');\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumberType = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', true, Endian.LITTLE_ENDIAN);\n    this.description('An account number');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNumberType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNumberType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNumberType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n    this.description('Accounts n_operation value.');\n  }\n}\n\nmodule.exports = NOperation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_VALUE = Symbol('value');\n\nconst ALLOWED = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split('');\n\n/**\n * Small class to initialize and validate a base58 value.\n */\nclass Base58 {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof Base58) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Base58.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (ALLOWED.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid base58 - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = {\n  Parser: require('./src/Parser'),\n  EPasa: require('./src/EPasa'),\n  Types: {\n    Ascii: require('./src/Types/Ascii'),\n    Base58: require('./src/Types/Base58')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst EPasa = require('./EPasa');\nconst Ascii = require('./Types/Ascii');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\n/**\n * A small parser for the EPASA format.\n */\nclass Parser {\n  /**\n   * Tries to parse an EPASA string.\n   *\n   * @param {String} ePasaString\n   * @returns {EPasa}\n   */\n  static parse(ePasaString) {\n    let state = {\n      inAccount: true,\n      inPayload: false,\n      inPassword: false,\n      inChecksum: false,\n      checksumIdentFound: false,\n      account: '',\n      payload: '',\n      format: null,\n      encryption: null,\n      checksum: '',\n      password: '',\n      asciiOpen: false,\n      asciiClosed: false,\n      encOpen: false,\n      encClosed: false\n    };\n\n    let position = 0;\n\n    /**\n         * Gets information of the current char in the loop as well as a flag\n         * identifiying an escaped character (position +2) and the next char.\n         *\n         * @param {Boolean} inAccount\n         * @param {Boolean} inPayload\n         * @returns {Object}\n         */\n    const next = function (inAccount, inPayload) {\n      // check if we are at the end\n      if (position > ePasaString.length - 1) {\n        return false;\n      }\n\n      // flag identifying an escaped character\n      let escaped = false;\n\n      if (inAccount) {\n        // account names have special escaping rules\n        escaped = AccountName.isEscape(ePasaString[position], ePasaString[position + 1]);\n      } else if (inPayload) {\n        // payload has special escaping rules\n        escaped = Ascii.isEscape(ePasaString[position], ePasaString[position + 1]);\n      }\n\n      // increment position, if escaped increment twice to skip the escape\n      position++;\n      if (escaped) {\n        position++;\n      }\n\n      return {\n        escaped,\n        char: ePasaString[position - 1],\n        next: ePasaString[position]\n      };\n    };\n\n    // current char info in the loop\n    let curr;\n\n    // loop the epasa string\n    while ((curr = next(state.inAccount, state.inPayload)) !== false) {\n\n      // we are in the account, now check for an payload open identifier\n      // and toggle the position\n      if (state.inAccount) {\n        if (curr.escaped === false && ['[', '(', '{', '<'].indexOf(curr.char) > -1) {\n          state.inAccount = false;\n          state.inPayload = true;\n        }\n      }\n\n      // if we are in the payload, no encryption was determined\n      // and the character is an encryption type open tag\n      if (state.encryption === null && curr.escaped === false && state.inPayload &&\n                ['[', '(', '{', '<'].indexOf(curr.char) > -1\n      ) {\n        if (curr.char === '[') {\n          state.encryption = EPasa.ENC_PUBLIC;\n        } else if (curr.char === '(') {\n          state.encryption = EPasa.ENC_RECEIVER;\n        } else if (curr.char === '<') {\n          state.encryption = EPasa.ENC_SENDER;\n        } else if (curr.char === '{') {\n          state.encryption = EPasa.ENC_PASSWORD;\n        }\n\n        state.encOpen = curr.char;\n        // we omit the character\n        continue;\n      }\n\n      // when we are in the payload or the account and find a \":\" it is an\n      // password identifier but only if its a password encryption, otherwise it identifies the\n      // checksum\n      if (curr.escaped === false && (state.inPayload || state.inAccount) && curr.char === ':') {\n        if (state.encryption === EPasa.ENC_PASSWORD) {\n          state.inPassword = true;\n        } else {\n          state.inPassword = false;\n          state.inChecksum = true;\n          state.inAccount = false;\n          state.checksumIdentFound = true;\n        }\n\n        // we ignore it then\n        continue;\n      }\n\n      // determine the format, a \" identifies ascii, 0x hex, otherwise its probably base58\n      if (curr.escaped === false && curr.char === '\"' && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_ASCII;\n        state.asciiOpen = true;\n        continue;\n      } else if (curr.escaped === false && curr.char === '0' && curr.next === 'x' &&\n                state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_HEX;\n      } else if (curr.escaped === false && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_BASE58;\n      } else if (curr.escaped === false && curr.char === '\"' && state.inPayload &&\n                state.format === EPasa.FORMAT_ASCII) {\n        state.asciiClosed = true;\n        continue;\n      }\n\n      // check closing encryption\n      if (curr.escaped === false && state.inPayload && [']', ')', '}', '>'].indexOf(curr.char) > -1) {\n        state.inPayload = false;\n        state.inChecksum = true;\n        state.encClosed = curr.char;\n        // omit\n        continue;\n      }\n\n      // append to account\n      if (state.inAccount) {\n        state.account += curr.char;\n        continue;\n      }\n\n      // if (state.inPayload && curr.escaped === false && curr.char === ':') {\n      //  state.inPassword = true;\n      // }\n\n      // payload\n      if (state.inPayload && !state.inPassword) {\n        state.payload += curr.char;\n      }\n      // password\n      if (state.inPayload && state.inPassword) {\n        state.password += curr.char;\n      }\n\n      // checksum\n      if (state.inChecksum && curr.char !== ':') {\n        state.checksum += curr.char;\n      }\n    }\n\n    if (state.asciiOpen && !state.asciiClosed) {\n      throw new Error('Invalid EPasa - missing closing ascii');\n    }\n\n    if (state.encOpen !== false && state.encClosed === false) {\n      throw new Error('Invalid EPasa - missing closing encryption identifier');\n    }\n\n    if ((state.encOpen === '[' && state.encClosed !== ']') ||\n            (state.encOpen === '(' && state.encClosed !== ')') ||\n            (state.encOpen === '<' && state.encClosed !== '>') ||\n            (state.encOpen === '{' && state.encClosed !== '}')) {\n      throw new Error('Invalid EPasa - wrong closing encryption identifier');\n    }\n\n    if (state.inChecksum && state.checksum.length < 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too short checksum');\n    }\n\n    if (state.inChecksum && state.checksum.length > 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too long checksum');\n    }\n\n    if (state.format === EPasa.FORMAT_HEX && state.payload.substr(2).length > 0 &&\n            /^[0-9a-f]+$/.test(state.payload.substr(2)) === false) {\n      throw new Error('Invalid EPasa - only lowercase hex allowed.');\n    }\n\n    // create a new epasa and trigger the validation\n    let epasa = new EPasa();\n\n    try {\n      epasa.accountNumber = state.account;\n    } catch (exAccNumber) {\n      try {\n        epasa.accountName = state.account;\n      } catch (exAccName) {\n        throw new Error(\n          `Bad account for epasa: ${exAccNumber.message} - ${exAccName.message}`\n        );\n      }\n    }\n\n    if (state.encryption === EPasa.ENC_PASSWORD) {\n      epasa.password = state.password;\n    }\n\n    if (state.format === EPasa.FORMAT_BASE58 && state.payload !== '') {\n      epasa.format = state.format;\n    }\n    epasa.encryption = state.encryption;\n\n    if (state.format === EPasa.FORMAT_HEX) {\n      epasa.payload = BC.fromHex(state.payload.substr(2));\n    } else if (state.format !== null) {\n      epasa.payload = BC.fromString(state.payload);\n    }\n\n    // validate checksum\n    if (state.checksum !== '' && EPasa.calculateChecksum(epasa.compile(true)) !== state.checksum) {\n      throw new Error('Invalid checksum provided');\n    }\n\n    return epasa;\n  }\n}\n\nmodule.exports = Parser;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AbstractType: require('./AbstractType'),\n  CompositeType: require('./CompositeType'),\n  Repeating: require('./Repeating'),\n  Decissive: require('./Decissive'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    StringWithLength: require('./Core/StringWithLength'),\n    StringWithoutLength: require('./Core/StringWithoutLength'),\n    BytesWithLength: require('./Core/BytesWithLength'),\n    BytesWithoutLength: require('./Core/BytesWithoutLength'),\n    BytesFixedLength: require('./Core/BytesFixedLength')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey'),\n      PrivateKey: require('./Pascal/Keys/PrivateKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    AccountName: require('./Pascal/AccountName'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType'),\n    OperationHash: require('./Pascal/OperationHash')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_REPEAT_LIMIT = Symbol('repeat_limit');\nconst P_REPEAT_MARKER = Symbol('repeat_marker');\nconst P_TYPE = Symbol('type');\n\n/**\n * A Type that itself is made up of multiple other types.\n */\nclass Repeating extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, type, repeatLimit = -1, repeatMarker = null) {\n    super(id || 'repeating');\n    super.description('A type that itself has one repeating type that will ' +\n      'be written / read until the limit is reached or data is empty.');\n    this[P_TYPE] = type;\n    this[P_REPEAT_LIMIT] = repeatLimit;\n    this[P_REPEAT_MARKER] = repeatMarker;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let result = [];\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    let limit = this[P_REPEAT_MARKER] !== null ? all[this[P_REPEAT_MARKER]] : this[P_REPEAT_LIMIT];\n    let counter = limit;\n\n    while ((limit > -1 && counter > 0) || (limit === -1 && bc.length > offset)) {\n      const decoded = this[P_TYPE].decodeFromBytes(bc.slice(offset));\n\n      result.push(decoded);\n      offset += this[P_TYPE].encodedSize;\n      counter--;\n    }\n\n    this[P_SIZE_ENCODED] = offset;\n\n    return result;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(arr) {\n    let bc = BC.empty();\n\n    arr.forEach((item, idx) => {\n      if (idx >= this[P_REPEAT_LIMIT] && this[P_REPEAT_LIMIT] > -1) {\n        return;\n      }\n      bc = bc.append(this[P_TYPE].encodeToBytes(item));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  get repeatingType() {\n    return this[P_TYPE];\n  }\n}\n\nmodule.exports = Repeating;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CompositeType = require('./CompositeType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_SUBTYPE_RESOLVER = Symbol('subtype_resolver');\nconst P_MARKER_FIELD = Symbol('marker_field');\n\n/**\n * A Type that itself is made up of multiple other types. The types are selected dynamically\n * depending on the given resolver.\n */\nclass Decissive extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor(id, markerField, subTypeResolver) {\n    super(id || 'decissive');\n    super.description('A type that itself has many sub types but only some are triggere based on a marker.');\n    this[P_SUBTYPE_RESOLVER] = subTypeResolver;\n    this[P_MARKER_FIELD] = markerField;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n\n    this[P_SIZE_ENCODED] = subType.encodedSize;\n    return subType.decodeFromBytes(bc, options, all);\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray, all) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n    let bc = subType.encodeToBytes(objOrArray);\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = Decissive;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to encode and decode bytes with a fixed length.\n */\nclass BytesFixedLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Number} length\n   */\n  constructor(id, length) {\n    super(id || 'bytes_fixed_length_' + length);\n    this.description('Bytes with a fixed length of ' + length);\n    this[P_SIZE] = length;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE];\n  }\n\n  /**\n   * Returns the values of the given bc in the configured length.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    return value.slice(0, this[P_SIZE]);\n  }\n}\n\nmodule.exports = BytesFixedLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst BytesWithoutLength = require('../../Core/BytesWithoutLength');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PublicKeyType = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A Public Key value.\n */\nclass PublicKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} omitXYLenghts\n   */\n  constructor(id = null, omitXYLenghts = false) {\n    super(id || 'public_key');\n    this.addSubType(new Curve('curve'));\n\n    // oh come on..\n    if (omitXYLenghts) {\n      this.addSubType(\n        new BytesWithoutLength('x')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(new BytesWithoutLength('y'));\n    } else {\n      this.addSubType(\n        new BytesWithLength('x', 2, 'x_length', 'Length of X value')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(\n        new BytesWithLength('y', 2, 'y_length', 'Length of Y value')\n          .description('The X value of the public key.')\n      );\n    }\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PublicKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PublicKeyType(decoded.x, decoded.y, decoded.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst PrivateKeyType = require('./../../../../src/Types/Keys/PrivateKey');\n\n/**\n * A coder for a private key.\n */\nclass PrivateKey extends CompositeType {\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'private_key');\n    this.addSubType(new Curve('curve'));\n    this.addSubType(new BytesWithLength('key', 2));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PrivateKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PrivateKeyType(decoded.key, decoded.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {PrivateKeyType} value\n   * @returns {PrivateKeyType}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNameType = require('./../../Types/AccountName');\nconst StringWithLength = require('../Core/StringWithLength');\n\n/**\n * A pascal related type that can de/encode an account name.\n */\nclass AccountName extends StringWithLength {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null, byteSize = 2) {\n    super(id || 'account_name', byteSize);\n    this.description('An account name');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNameType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNameType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNameType} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.toString());\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Int64 = require('./../Core/Int64');\nconst CurrencyType = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends Int64 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'currency', true, Endian.LITTLE_ENDIAN);\n    this.description('A type for currency values.');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurrencyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return CurrencyType.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurrencyType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.bn);\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_INT_TYPE = Symbol('int_type');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize) {\n    super(id || `optype_int${byteSize * 8}`);\n    switch (byteSize) {\n      case 1:\n        this[P_INT_TYPE] = new Int8('OpType[Int8]', true);\n        break;\n      case 2:\n        this[P_INT_TYPE] = new Int16('OpType[Int16]', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_INT_TYPE] = new Int32('OpType[Int32]', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n    this.description(`Operation type in ${byteSize * 8} bits`);\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_INT_TYPE].encodedSize;\n  }\n\n  /**\n   * Decodes and returns the optype.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Number}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return this[P_INT_TYPE].decodeFromBytes(bc);\n  }\n\n  /**\n   * Encodes the given optype to bytes.\n   *\n   * @param {Number} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    return this[P_INT_TYPE].encodeToBytes(value);\n  }\n}\n\nmodule.exports = OpType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst CompositeType = require('./../CompositeType');\nconst Int32 = require('./../Core/Int32');\nconst AccountNumber = require('./AccountNumber');\nconst BytesWithoutLength = require('./../Core/BytesWithoutLength');\nconst NOperation = require('./NOperation');\nconst OperationHashType = require('./../../Types/OperationHash');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass OperationHash extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'ophash');\n    this.description('A pascalCoin operation hash');\n\n    this.addSubType(new Int32('block', true, Endian.LITTLE_ENDIAN));\n    this.addSubType(new AccountNumber('account'));\n    this.addSubType(new NOperation('nOperation', 4));\n    this.addSubType(new BytesWithoutLength('md160'));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {OperationHash}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new OperationHashType(decoded.block, decoded.account, decoded.nOperation, decoded.md160);\n  }\n\n  /**\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {OperationHash} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = OperationHash;\n","'use strict';\n\nmodule.exports =  {\n  v3: require('./lib/v3')\n};\n\n// -- Test Code ---------------------------------------------------------\nif (require.main === module) {\n  (function () {\n    console.log(module.exports.v3);\n  })();\n}\n","'use strict';\n\nmodule.exports = require('./murmur');\n","// +----------------------------------------------------------------------+\n// | murmurHash3.js v2.1.2 (http://github.com/karanlyons/murmurHash.js)   |\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012 Karan Lyons                                       |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n\n;(function (root, undefined) {\n  'use strict';\n\n  // Create a local object that'll be exported or referenced globally.\n  var library = {\n    'version': '2.1.2',\n    'x86': {},\n    'x64': {}\n  };\n\n\n\n\n  // PRIVATE FUNCTIONS\n  // -----------------\n\n  function _x86Multiply(m, n) {\n    //\n    // Given two 32bit ints, returns the two multiplied together as a\n    // 32bit int.\n    //\n\n    return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n  }\n\n\n  function _x86Rotl(m, n) {\n    //\n    // Given a 32bit int and an int representing a number of bit positions,\n    // returns the 32bit int rotated left by that number of positions.\n    //\n\n    return (m << n) | (m >>> (32 - n));\n  }\n\n\n  function _x86Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x86 mix of that block.\n    //\n\n    h ^= h >>> 16;\n    h  = _x86Multiply(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h  = _x86Multiply(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n\n    return h;\n  }\n\n\n  function _x64Add(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // added together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Multiply(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // multiplied together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Rotl(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) rotated left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 32) {\n      return [m[1], m[0]];\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n    }\n\n    else {\n      n -= 32;\n      return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n    }\n  }\n\n\n  function _x64LeftShift(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) shifted left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 0) {\n      return m;\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n    }\n\n    else {\n      return [m[1] << (n - 32), 0];\n    }\n  }\n\n\n  function _x64Xor(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // xored together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n\n\n  function _x64Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x64 mix of that block.\n    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n    // only place where we need to right shift 64bit ints.)\n    //\n\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n\n    return h;\n  }\n\n\n\n\n  // PUBLIC FUNCTIONS\n  // ----------------\n\n  library.x86.hash32 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 32 bit hash\n    // using the x86 flavor of MurmurHash3, as an unsigned int.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 4;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n\n    var k1 = 0;\n\n    var c1 = 0xcc9e2d51;\n    var c2 = 0x1b873593;\n\n    for (var i = 0; i < bytes; i = i + 4) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n\n      h1 ^= k1;\n      h1 = _x86Rotl(h1, 13);\n      h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n      case 1:\n        k1 ^= (key.charCodeAt(i) & 0xff);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 = _x86Fmix(h1);\n\n    return h1 >>> 0;\n  };\n\n\n  library.x86.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n    var h2 = seed;\n    var h3 = seed;\n    var h4 = seed;\n\n    var k1 = 0;\n    var k2 = 0;\n    var k3 = 0;\n    var k4 = 0;\n\n    var c1 = 0x239b961b;\n    var c2 = 0xab0e9789;\n    var c3 = 0x38b34ae5;\n    var c4 = 0xa1e38b93;\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n      k2 = ((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24);\n      k3 = ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24);\n      k4 = ((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n\n      h1 = _x86Rotl(h1, 19);\n      h1 += h2;\n      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n\n      h2 = _x86Rotl(h2, 17);\n      h2 += h3;\n      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n\n      h3 = _x86Rotl(h3, 15);\n      h3 += h4;\n      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n\n      h4 = _x86Rotl(h4, 13);\n      h4 += h1;\n      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    }\n\n    k1 = 0;\n    k2 = 0;\n    k3 = 0;\n    k4 = 0;\n\n    switch (remainder) {\n      case 15:\n        k4 ^= key.charCodeAt(i + 14) << 16;\n\n      case 14:\n        k4 ^= key.charCodeAt(i + 13) << 8;\n\n      case 13:\n        k4 ^= key.charCodeAt(i + 12);\n        k4 = _x86Multiply(k4, c4);\n        k4 = _x86Rotl(k4, 18);\n        k4 = _x86Multiply(k4, c1);\n        h4 ^= k4;\n\n      case 12:\n        k3 ^= key.charCodeAt(i + 11) << 24;\n\n      case 11:\n        k3 ^= key.charCodeAt(i + 10) << 16;\n\n      case 10:\n        k3 ^= key.charCodeAt(i + 9) << 8;\n\n      case 9:\n        k3 ^= key.charCodeAt(i + 8);\n        k3 = _x86Multiply(k3, c3);\n        k3 = _x86Rotl(k3, 17);\n        k3 = _x86Multiply(k3, c4);\n        h3 ^= k3;\n\n      case 8:\n        k2 ^= key.charCodeAt(i + 7) << 24;\n\n      case 7:\n        k2 ^= key.charCodeAt(i + 6) << 16;\n\n      case 6:\n        k2 ^= key.charCodeAt(i + 5) << 8;\n\n      case 5:\n        k2 ^= key.charCodeAt(i + 4);\n        k2 = _x86Multiply(k2, c2);\n        k2 = _x86Rotl(k2, 16);\n        k2 = _x86Multiply(k2, c3);\n        h2 ^= k2;\n\n      case 4:\n        k1 ^= key.charCodeAt(i + 3) << 24;\n\n      case 3:\n        k1 ^= key.charCodeAt(i + 2) << 16;\n\n      case 2:\n        k1 ^= key.charCodeAt(i + 1) << 8;\n\n      case 1:\n        k1 ^= key.charCodeAt(i);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h2 ^= key.length;\n    h3 ^= key.length;\n    h4 ^= key.length;\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    h1 = _x86Fmix(h1);\n    h2 = _x86Fmix(h2);\n    h3 = _x86Fmix(h3);\n    h4 = _x86Fmix(h4);\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n  };\n\n\n  library.x64.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = [((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24), ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24)];\n      k2 = [((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24), ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24)];\n\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n\n      h1 = _x64Rotl(h1, 27);\n      h1 = _x64Add(h1, h2);\n      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n\n      h2 = _x64Rotl(h2, 31);\n      h2 = _x64Add(h2, h1);\n      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n\n    k1 = [0, 0];\n    k2 = [0, 0];\n\n    switch(remainder) {\n      case 15:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n\n      case 14:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n\n      case 13:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n\n      case 12:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n\n      case 11:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n\n      case 10:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n\n      case 9:\n        k2 = _x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = _x64Multiply(k2, c2);\n        k2 = _x64Rotl(k2, 33);\n        k2 = _x64Multiply(k2, c1);\n        h2 = _x64Xor(h2, k2);\n\n      case 8:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n\n      case 7:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n\n      case 6:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n\n      case 5:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n\n      case 4:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n\n      case 3:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n\n      case 2:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n\n      case 1:\n        k1 = _x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = _x64Multiply(k1, c1);\n        k1 = _x64Rotl(k1, 31);\n        k1 = _x64Multiply(k1, c2);\n        h1 = _x64Xor(h1, k1);\n    }\n\n    h1 = _x64Xor(h1, [0, key.length]);\n    h2 = _x64Xor(h2, [0, key.length]);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    h1 = _x64Fmix(h1);\n    h2 = _x64Fmix(h2);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n  };\n\n\n\n\n  // INITIALIZATION\n  // --------------\n\n  // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n  // of the global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = library;\n    }\n\n    exports.murmurHash3 = library;\n  }\n\n  else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return library;\n    });\n  }\n\n  else {\n    // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n    // original value. Returns a reference to the library object, to allow\n    // it to be used under a different name.\n    library._murmurHash3 = root.murmurHash3\n\n    library.noConflict = function () {\n      root.murmurHash3 = library._murmurHash3;\n      library._murmurHash3 = undefined;\n      library.noConflict = undefined;\n\n      return library;\n    };\n\n    root.murmurHash3 = library;\n  }\n})(this);\n"],"sourceRoot":""}