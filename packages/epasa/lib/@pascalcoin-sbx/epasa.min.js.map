{"version":3,"sources":["webpack://@pascalcoin-sbx/epasa/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/epasa/webpack/bootstrap","webpack://@pascalcoin-sbx/epasa/../common/src/BC.js","webpack://@pascalcoin-sbx/epasa/../common/src/Endian.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/epasa/../common/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Ascii.js","webpack://@pascalcoin-sbx/epasa/./src/EPasa.js","webpack://@pascalcoin-sbx/epasa/../common/src/Base58.js","webpack://@pascalcoin-sbx/epasa/../common/src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/epasa/../common/src/Sha.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/epasa/../common/src/Util.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/VariableString.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Base58.js","webpack://@pascalcoin-sbx/epasa/./index.js","webpack://@pascalcoin-sbx/epasa/./src/Parser.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/global.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/FixedString.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/murmur.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Buffer","Endian","require","P_BUFFER","BC","constructor","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","switchEndian","match","reverse","join","switchEndianIf","targetEndian","detect","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","method","readInt32","readInt64","buf","allocUnsafe","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","id","decodeFromBytes","encodeToBytes","setFixedValue","hasFixedValue","fixedValue","Base58","PascalCoinInfo","Sha","Util","Types","Coding","AbstractType","P_ENDIAN","P_UNSIGNED","super","global","base64","ieee754","isArray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","TypeError","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","obj","isBuffer","len","checked","copy","val","type","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","x","y","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","values","keys","xylPublicKey","xOrY","lPrivateKey","supported","AbstractInt","fromInt16","fromInt32","BN","P_VALUE","toFixed","base","dm","divmod","mod","div","isNegative","Currency","pasc","isBN","split","negative","substring","comps","whole","fraction","molina","add","neg","isVague","toStringOpt","decimals","RegExp","toMolina","addValue","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","splitted","map","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","Ascii","validate","toStringEscaped","c1","c2","AccountName","MurmurHash3","v3","P_ACCOUNT_NUMBER","P_ACCOUNT_NAME","P_PAYLOAD","P_PAYLOAD_TYPE","P_PASSWORD","EPasa","NON_DETERMISTIC","ENC_PUBLIC","ENC_RECEIVER","ENC_SENDER","ENC_PASSWORD","FORMAT_ASCII","FORMAT_HEX","FORMAT_BASE58","ADDRESSED_BY_NAME","MAX_PUBLIC_ASCII","MAX_ECIES_ASCII","MAX_AES_ASCII","MAX_PUBLIC_HEX","MAX_ECIES_HEX","MAX_AES_HEX","MAX_PUBLIC_BASE58","MAX_ECIES_BASE58","MAX_AES_BASE58","accountName","hasFormat","isFormatBase58","isFormatAscii","isFormatHex","hasEncryption","isEncryptionPublic","isEncryptionPassword","isEncryptionSender","isEncryptionReceiver","isNonDetermistic","password","payload","compile","format","validatePayloadLength","payloadCompare","typeIdent","maxIdent","encryption","omitChecksum","enc_marker_start","enc_marker_end","asciiPayload","epasa","ePasaString","fromInt","x86","hash32","bs58","encode","decode","block","fromMolina","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","webpackPolyfill","deprecate","paths","children","sha256","sha512","buffers","hasher","SHA256","forEach","update","digest","SHA512","version","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c3","bin2longbin","longbin","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","xor","ind","litteendian","condition","action","whilst","then","Promise","resolve","P_X","P_XL","P_Y","P_YL","P_CURVE","PublicKey","yl","xl","ec","ecdh","P_FIELDS","addField","field","fields","fieldType","returnExplanation","empty","explain","fieldValue","isStatic","fromInt8","Int16","P_SIZE","lengthField","v","PascalCurve","ALLOWED","Parser","state","inAccount","inPayload","inPassword","inChecksum","checksumIdentFound","asciiOpen","asciiClosed","encOpen","encClosed","position","next","escaped","isEscape","char","exAccNumber","exAccName","message","basex","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","carry","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","g","Function","window","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","assert","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","parseBase","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","toArray","ceil","w","off","limbLen","limbPow","total","word","imuln","_iaddn","dest","clone","_expand","_normSign","zeros","groupSizes","groupBases","smallMulTo","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toBuffer","toArrayLike","ArrayType","reqLength","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","zeroBits","toTwos","width","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","outLen","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","idx","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","OperationHash","Keys","ALLOWED_ALL","ALLOWED_START","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","opHash","encodeAsPending","PrivateKey","KeyPair","P_KEY","P_LENGTH","privateKeyLength","encoded","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","publicKey","CompositeType","Core","FixedString","Int8","Int32","Int64","VariableString","Pascal","NOperation","OpType","P_APPEND","P_PREPEND","fromInt64","PascalPublicKey","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","decoded","PascalAccountNumber","PascalCurrency","P_CODER","byteSize","console","library","x64","_x86Multiply","_x86Rotl","_x86Fmix","_x64Add","_x64Multiply","_x64Rotl","_x64LeftShift","_x64Xor","_x64Fmix","seed","remainder","k1","hash128","k2","k3","k4","c4","murmurHash3"],"mappings":"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","file":"@pascalcoin-sbx/epasa.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/epasa\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/epasa\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/epasa\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      return BC.fromHex(data);\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString();\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndian() {\n    return BC.fromHex(\n      this[P_BUFFER].toString('hex').match(/../g).reverse().join(''),\n    );\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndianIf(targetEndian) {\n    if (Endian.detect() !== targetEndian) {\n      return this.switchEndian();\n    }\n\n    return this;\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 64 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt64(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int${endian}`;\n\n    return this[P_BUFFER][method](offset, 5);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 64 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt64(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int${endian}`;\n    const buf = Buffer.allocUnsafe(8);\n\n    buf[method](value, 0, 5);\n    return new BC(buf);\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","const P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\n\n/**\n * Abstract field type.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n  }\n\n  /**\n   * Read a value using the rules defined in the method from the given BC.\n   *\n   * @param {BC} bc\n   */\n  decodeFromBytes(bc) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Appends the given value to the given BC.\n   *\n   * @param {*} value\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  setFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    return this;\n  }\n\n  get hasFixedValue() {\n    return this.hasOwnProperty(P_FIXED_VALUE);\n  }\n\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n}\n\nmodule.exports = AbstractType;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","const AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n}\n\nmodule.exports = AbstractInt;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 16bit ints.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Reads the int16 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int16 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {number}\n   */\n  get size() {\n    return 2;\n  }\n}\n\nmodule.exports = Int16;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the number of bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return 4;\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('@pascalcoin-sbx/common').Util;\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '\"():<>[\\\\]{}'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\n/**\n * Small class that holds, validated and outputs an EPasa ascii string.\n */\nclass Ascii {\n  /**\n   * Constructor\n   *\n   * @param {String|Ascii} value\n   */\n  constructor(value) {\n    if (value instanceof Ascii) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Ascii.validate(value);\n    }\n  }\n\n  /**\n   * Validates an ascii string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (value.charCodeAt(pos) < 32 || value.charCodeAt(pos) > 126) {\n        throw new Error(`Invalid ascii - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value itself.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = Ascii;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\nconst MurmurHash3 = require('murmur-hash').v3;\nconst Ascii = require('./Types/Ascii');\nconst Base58 = require('./Types/Base58');\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_ACCOUNT_NUMBER = Symbol('account_number');\nconst P_ACCOUNT_NAME = Symbol('account_name');\nconst P_PAYLOAD = Symbol('payload');\nconst P_PAYLOAD_TYPE = Symbol('payload_type');\nconst P_PASSWORD = Symbol('password');\n\n/**\n * Represents an EPasa.\n */\nclass EPasa {\n\n  /**\n   * Payload encryption and encoding method not specified.\n   *\n   * @returns {number}\n   */\n  static get NON_DETERMISTIC() {\n    return 0;\n  }\n\n  /**\n   * Unencrypted, public payload.\n   *\n   * @returns {number}\n   */\n  static get ENC_PUBLIC() {\n    return 1;\n  }\n\n  /**\n   * ECIES encrypted using recipient accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_RECEIVER() {\n    return 2;\n  }\n\n  /**\n   * ECIES encrypted using sender accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_SENDER() {\n    return 4;\n  }\n\n  /**\n   * AES encrypted using pwd param\n   *\n   * @returns {number}\n   */\n  static get ENC_PASSWORD() {\n    return 8;\n  }\n\n  /**\n   * Payload data encoded in ASCII\n   *\n   * @returns {number}\n   */\n  static get FORMAT_ASCII() {\n    return 16;\n  }\n\n  /**\n   * Payload data encoded in HEX\n   *\n   * @returns {number}\n   */\n  static get FORMAT_HEX() {\n    return 32;\n  }\n\n  /**\n   * Payload data encoded in Base58\n   *\n   * @returns {number}\n   */\n  static get FORMAT_BASE58() {\n    return 64;\n  }\n\n  /**\n   * E-PASA addressed by account name (not number).\n   *\n   * @returns {number}\n   */\n  static get ADDRESSED_BY_NAME() {\n    return 128;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_ASCII() {\n    return 255;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_ASCII() {\n    return 144;\n  }\n\n  /**\n   * The max payload length for AES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_ASCII() {\n    return 223;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_HEX() {\n    return 510;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_HEX() {\n    return 288;\n  }\n\n  /**\n   * The max payload length for AES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_HEX() {\n    return 446;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_BASE58() {\n    return 348;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_BASE58() {\n    return 196;\n  }\n\n  /**\n   * The max payload length for AES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_BASE58() {\n    return 304;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD_TYPE] = EPasa.NON_DETERMISTIC;\n  }\n\n  /**\n   * Sets the account number.\n   *\n   * @param accountNumber\n   */\n  set accountNumber(accountNumber) {\n    if (this[P_ACCOUNT_NAME] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NUMBER] = new AccountNumber(accountNumber);\n  }\n\n  /**\n   * Gets the account number if set.\n   *\n   * @returns {null|AccountNumber}\n   */\n  get accountNumber() {\n    return this[P_ACCOUNT_NUMBER];\n  }\n\n  /**\n   * Gets the account name if set.\n   *\n   * @returns {null|AccountName}\n   */\n  get accountName() {\n    return this[P_ACCOUNT_NAME];\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an assigned format.\n   */\n  hasFormat() {\n    return (this.isFormatBase58() || this.isFormatAscii() || this.isFormatHex());\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an encryption assigned.\n   */\n  hasEncryption() {\n    return (this.isEncryptionPublic() || this.isEncryptionPassword() ||\n        this.isEncryptionSender() || this.isEncryptionReceiver());\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatBase58() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatAscii() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatHex() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the receivers public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionReceiver() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the senders public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionSender() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is aes.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPassword() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD);\n  }\n\n  /**\n   * Gets a value indicating that there is no encryption (public payloads).\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPublic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is not set.\n   *\n   * @returns {boolean}\n   */\n  isNonDetermistic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.NON_DETERMISTIC) === EPasa.NON_DETERMISTIC);\n  }\n\n  /**\n   * Gets the password of the epasa.\n   *\n   * @returns {null|String}\n   */\n  get password() {\n    return this[P_PASSWORD];\n  }\n\n  /**\n   * Gets the payload of the epasa.\n   *\n   * @returns {null|Payload}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the extended checksum.\n   *\n   * @returns {string}\n   */\n  get checksum() {\n    return EPasa.calculateChecksum(this.compile(true));\n  }\n\n  /**\n   * Sets the account name.\n   *\n   * @param {AccountName} accountName\n   */\n  set accountName(accountName) {\n    if (this[P_ACCOUNT_NUMBER] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NAME] = new AccountName(accountName);\n    this[P_PAYLOAD_TYPE] |= EPasa.ADDRESSED_BY_NAME;\n  }\n\n  /**\n   * Sets the payload.\n   *\n   * @param {BC} payload\n   */\n  set payload(payload) {\n\n    if (!this.hasFormat()) {\n      this.format = EPasa.FORMAT_ASCII;\n    }\n\n    if ((!this.hasFormat() || !this.hasEncryption()) && payload.toString() !== '') {\n      throw new Error('EPasa payloads can only be set when the encryption and format is defined.');\n    }\n\n    if (!(payload instanceof BC)) {\n      if (this.isFormatHex()) {\n        payload = BC.fromHex(payload);\n      } else {\n        payload = BC.fromString(payload);\n      }\n    }\n\n    this.validatePayloadLength(payload);\n    this[P_PAYLOAD] = payload;\n\n    return this;\n  }\n\n  /**\n   * Vaidates the length of an unencrypted payload.\n   *\n   * @param {BC} payload\n   * @returns {boolean}\n   */\n  validatePayloadLength(payload) {\n    // TODO: Oh yes, wanted to be smart, but now im unreadable.\n    let payloadCompare = '';\n    let typeIdent = 'ASCII';\n\n    if (this.isFormatAscii()) {\n      payloadCompare = payload.toString();\n    } else if (this.isFormatHex()) {\n      payloadCompare = payload.toHex();\n      typeIdent = 'HEX';\n    } else if (this.isFormatBase58()) {\n      payloadCompare = payload.toString();\n      typeIdent = 'BASE58';\n    }\n\n    let maxIdent = 'PUBLIC';\n\n    if (this.isEncryptionReceiver() || this.isEncryptionSender()) {\n      maxIdent = 'ECIES';\n    } else if (this.isEncryptionPassword()) {\n      maxIdent = 'AES';\n    }\n\n    if (payloadCompare.length > EPasa[`MAX_${maxIdent}_${typeIdent}`]) {\n      throw new Error(\n        `Invalid payload length ${payloadCompare.length} for ${maxIdent}_${typeIdent}. \n        Max is ${EPasa[`MAX_${maxIdent}_${typeIdent}`]}`\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {String} password\n   */\n  set password(password) {\n    this[P_PASSWORD] = password;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} encryption\n   */\n  set encryption(encryption) {\n    if (encryption === EPasa.ENC_PASSWORD && this[P_PASSWORD] === undefined) {\n      throw new Error('Set password before setting the password encryption flag.');\n    }\n\n    this[P_PAYLOAD_TYPE] |= encryption;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} format\n   */\n  set format(format) {\n    this[P_PAYLOAD_TYPE] |= format;\n  }\n\n  /**\n   * Creates a new E-PASA string.\n   *\n   * @param {Boolean} omitChecksum\n   * @returns {string}\n   */\n  compile(omitChecksum = false) {\n    let data = {\n      account: null,\n      enc_marker_start: null,\n      enc_marker_end: null,\n      payload: ''\n    };\n\n    // determine and validate account info\n    if ((this[P_PAYLOAD_TYPE] & EPasa.ADDRESSED_BY_NAME) === EPasa.ADDRESSED_BY_NAME) {\n      data.account = this[P_ACCOUNT_NAME].toStringEscaped();\n    } else {\n      data.account = this[P_ACCOUNT_NUMBER].toString();\n    }\n\n    // if there is a payload, we need to format it\n    if (this[P_PAYLOAD] !== undefined) {\n      if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX) {\n        data.payload = `0x${this[P_PAYLOAD].toHex().toLowerCase()}`;\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58) {\n        data.payload = new Base58(this[P_PAYLOAD].toString()).toString();\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII) {\n        let asciiPayload = new Ascii(this[P_PAYLOAD].toString()).toStringEscaped();\n\n        if (asciiPayload.length > 0) {\n          data.payload = `\"${asciiPayload}\"`;\n        }\n      }\n\n      // now we need to determine the wanted encryption of the payload.\n      if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC) {\n        data.enc_marker_start = '[';\n        data.enc_marker_end = ']';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER) {\n        data.enc_marker_start = '(';\n        data.enc_marker_end = ')';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER) {\n        data.enc_marker_start = '<';\n        data.enc_marker_end = '>';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD) {\n        data.enc_marker_start = '{';\n        data.enc_marker_end = '}';\n        // append password\n        let password = new Ascii(this[P_PASSWORD]);\n\n        data.payload += `:${password.toStringEscaped()}`;\n      }\n    } else {\n      // no payload, no marker\n      data.payload = '';\n      data.enc_marker_start = '';\n      data.enc_marker_end = '';\n    }\n\n    // combine collected data\n    let epasa = `${data.account}${data.enc_marker_start}${data.payload}${data.enc_marker_end}`;\n\n    // no checksum\n    if (omitChecksum) {\n      return epasa;\n    }\n\n    // calculate the checksum\n    return `${epasa}:${EPasa.calculateChecksum(epasa)}`;\n  }\n\n  /**\n   * Calculates the checksum of the epasa.\n   *\n   * @param {String} ePasaString\n   * @returns {string}\n   */\n  static calculateChecksum(ePasaString) {\n    return BC.fromInt(MurmurHash3.x86.hash32(ePasaString) % 65536)\n      .switchEndian()\n      .toHex(true);\n  }\n}\n\nmodule.exports = EPasa;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","class Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n\n  static promiseWhile(data, condition, action) {\n    let whilst = (data) => {\n      return condition(data) ?\n        action(data).then(whilst) :\n        Promise.resolve(data);\n    };\n\n    return whilst(data);\n  };\n\n  // https://stackoverflow.com/questions/46479169/check-if-value-is-a-symbol-in-javascript\n  static isSymbol(x) {\n    return typeof x === 'symbol' ||\n        typeof x === 'object' && Object.prototype.toString.call(x) === '[object Symbol]';\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_FIELDS = Symbol('fields');\n\n/**\n * A BC reader and writer for binary data.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id);\n    this[P_FIELDS] = [];\n  }\n\n  /**\n   * Adds a field config.\n   *\n   * @param {AbstractType} field\n   */\n  addField(field) {\n    this[P_FIELDS].push(field);\n  }\n\n  /**\n   * Gets the config for all fields.\n   *\n   * @returns {*}\n   */\n  get fields() {\n    return this[P_FIELDS];\n  }\n\n  /**\n   * Reads the given byte collection into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   */\n  decodeFromBytes(bc) {\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.fields.forEach((fieldType) => {\n      obj[fieldType.id] = fieldType.decodeFromBytes(bc.slice(offset));\n      offset += fieldType.size;\n    });\n\n    return obj;\n  }\n\n  /**\n   * Writes the given object to a BC.\n   *\n   * @param {Object} obj\n   * @returns {BC}\n   */\n  encodeToBytes(obj, returnExplanation = false) {\n    let bc = BC.empty();\n    let explain = {};\n\n    this.fields.forEach((field) => {\n      let fieldValue;\n\n      if (field.hasFixedValue) {\n        fieldValue = field.fixedValue;\n      } else {\n        if (field.isStatic) {\n          fieldValue = obj.constructor[field.id];\n        } else {\n          fieldValue = obj[field.id];\n        }\n      }\n\n      if (returnExplanation) {\n        explain[field.id] = field.encodeToBytes(fieldValue).toHex();\n      } else {\n        // we will use the first available\n        bc = bc.append(field.encodeToBytes(fieldValue));\n      }\n    });\n\n    if (returnExplanation) {\n      return explain;\n    }\n\n    return bc;\n  }\n}\n\nmodule.exports = CompositeType;\n","const AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8 Bit value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id, unsigned, Endian.LITTLE_ENDIAN);\n  }\n\n  /**\n   * Reads the int8 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt8(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {number}\n   */\n  get size() {\n    return 1;\n  }\n}\n\nmodule.exports = Int8;\n","const AbstractType = require('./../AbstractType');\nconst Int16 = require('./Int16');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE = Symbol('size');\n\nconst lengthField = new Int16('length', true, Endian.LITTLE_ENDIAN);\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass VariableString extends AbstractType {\n\n  /**\n   * Reads the string from the BC.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    this[P_SIZE] = lengthField.decodeFromBytes(bc) + lengthField.size;\n    return bc.slice(lengthField.size, this[P_SIZE]);\n  }\n\n  /**\n   * Appends the string to the BC.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let v = BC.from(value);\n\n    v = v.prepend(lengthField.encodeToBytes(v.length));\n    return v;\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return this[P_SIZE];\n  }\n}\n\nmodule.exports = VariableString;\n","const PascalCurve = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', false, Endian.LITTLE_ENDIAN);\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC} bc\n   * @returns {PascalCurve}\n   */\n  decodeFromBytes(bc) {\n    return new PascalCurve(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {PascalCurve} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_VALUE = Symbol('value');\n\nconst ALLOWED = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split('');\n\n/**\n * Small class to initialize and validate a base58 value.\n */\nclass Base58 {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof Base58) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Base58.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (ALLOWED.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid base58 - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = {\n  Parser: require('./src/Parser'),\n  EPasa: require('./src/EPasa'),\n  Types: {\n    Ascii: require('./src/Types/Ascii'),\n    Base58: require('./src/Types/Base58')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst EPasa = require('./EPasa');\nconst Ascii = require('./Types/Ascii');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\n/**\n * A small parser for the EPASA format.\n */\nclass Parser {\n  /**\n   * Tries to parse an EPASA string.\n   *\n   * @param {String} ePasaString\n   * @returns {EPasa}\n   */\n  static parse(ePasaString) {\n    let state = {\n      inAccount: true,\n      inPayload: false,\n      inPassword: false,\n      inChecksum: false,\n      checksumIdentFound: false,\n      account: '',\n      payload: '',\n      format: null,\n      encryption: null,\n      checksum: '',\n      password: '',\n      asciiOpen: false,\n      asciiClosed: false,\n      encOpen: false,\n      encClosed: false\n    };\n\n    let position = 0;\n\n    /**\n         * Gets information of the current char in the loop as well as a flag\n         * identifiying an escaped character (position +2) and the next char.\n         *\n         * @param {Boolean} inAccount\n         * @param {Boolean} inPayload\n         * @returns {Object}\n         */\n    const next = function (inAccount, inPayload) {\n      // check if we are at the end\n      if (position > ePasaString.length - 1) {\n        return false;\n      }\n\n      // flag identifying an escaped character\n      let escaped = false;\n\n      if (inAccount) {\n        // account names have special escaping rules\n        escaped = AccountName.isEscape(ePasaString[position], ePasaString[position + 1]);\n      } else if (inPayload) {\n        // payload has special escaping rules\n        escaped = Ascii.isEscape(ePasaString[position], ePasaString[position + 1]);\n      }\n\n      // increment position, if escaped increment twice to skip the escape\n      position++;\n      if (escaped) {\n        position++;\n      }\n\n      return {\n        escaped,\n        char: ePasaString[position - 1],\n        next: ePasaString[position]\n      };\n    };\n\n    // current char info in the loop\n    let curr;\n\n    // loop the epasa string\n    while ((curr = next(state.inAccount, state.inPayload)) !== false) {\n\n      // we are in the account, now check for an payload open identifier\n      // and toggle the position\n      if (state.inAccount) {\n        if (curr.escaped === false && ['[', '(', '{', '<'].indexOf(curr.char) > -1) {\n          state.inAccount = false;\n          state.inPayload = true;\n        }\n      }\n\n      // if we are in the payload, no encryption was determined\n      // and the character is an encryption type open tag\n      if (state.encryption === null && curr.escaped === false && state.inPayload &&\n                ['[', '(', '{', '<'].indexOf(curr.char) > -1\n      ) {\n        if (curr.char === '[') {\n          state.encryption = EPasa.ENC_PUBLIC;\n        } else if (curr.char === '(') {\n          state.encryption = EPasa.ENC_RECEIVER;\n        } else if (curr.char === '<') {\n          state.encryption = EPasa.ENC_SENDER;\n        } else if (curr.char === '{') {\n          state.encryption = EPasa.ENC_PASSWORD;\n        }\n\n        state.encOpen = curr.char;\n        // we omit the character\n        continue;\n      }\n\n      // when we are in the payload or the account and find a \":\" it is an\n      // password identifier but only if its a password encryption, otherwise it identifies the\n      // checksum\n      if (curr.escaped === false && (state.inPayload || state.inAccount) && curr.char === ':') {\n        if (state.encryption === EPasa.ENC_PASSWORD) {\n          state.inPassword = true;\n        } else {\n          state.inPassword = false;\n          state.inChecksum = true;\n          state.inAccount = false;\n          state.checksumIdentFound = true;\n        }\n\n        // we ignore it then\n        continue;\n      }\n\n      // determine the format, a \" identifies ascii, 0x hex, otherwise its probably base58\n      if (curr.escaped === false && curr.char === '\"' && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_ASCII;\n        state.asciiOpen = true;\n        continue;\n      } else if (curr.escaped === false && curr.char === '0' && curr.next === 'x' &&\n                state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_HEX;\n      } else if (curr.escaped === false && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_BASE58;\n      } else if (curr.escaped === false && curr.char === '\"' && state.inPayload &&\n                state.format === EPasa.FORMAT_ASCII) {\n        state.asciiClosed = true;\n        continue;\n      }\n\n      // check closing encryption\n      if (curr.escaped === false && state.inPayload && [']', ')', '}', '>'].indexOf(curr.char) > -1) {\n        state.inPayload = false;\n        state.inChecksum = true;\n        state.encClosed = curr.char;\n        // omit\n        continue;\n      }\n\n      // append to account\n      if (state.inAccount) {\n        state.account += curr.char;\n        continue;\n      }\n\n      // if (state.inPayload && curr.escaped === false && curr.char === ':') {\n      //  state.inPassword = true;\n      // }\n\n      // payload\n      if (state.inPayload && !state.inPassword) {\n        state.payload += curr.char;\n      }\n      // password\n      if (state.inPayload && state.inPassword) {\n        state.password += curr.char;\n      }\n\n      // checksum\n      if (state.inChecksum && curr.char !== ':') {\n        state.checksum += curr.char;\n      }\n    }\n\n    if (state.asciiOpen && !state.asciiClosed) {\n      throw new Error('Invalid EPasa - missing closing ascii');\n    }\n\n    if (state.encOpen !== false && state.encClosed === false) {\n      throw new Error('Invalid EPasa - missing closing encryption identifier');\n    }\n\n    if ((state.encOpen === '[' && state.encClosed !== ']') ||\n            (state.encOpen === '(' && state.encClosed !== ')') ||\n            (state.encOpen === '<' && state.encClosed !== '>') ||\n            (state.encOpen === '{' && state.encClosed !== '}')) {\n      throw new Error('Invalid EPasa - wrong closing encryption identifier');\n    }\n\n    if (state.inChecksum && state.checksum.length < 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too short checksum');\n    }\n\n    if (state.inChecksum && state.checksum.length > 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too long checksum');\n    }\n\n    if (state.format === EPasa.FORMAT_HEX && state.payload.substr(2).length > 0 &&\n            /^[0-9a-f]+$/.test(state.payload.substr(2)) === false) {\n      throw new Error('Invalid EPasa - only lowercase hex allowed.');\n    }\n\n    // create a new epasa and trigger the validation\n    let epasa = new EPasa();\n\n    try {\n      epasa.accountNumber = state.account;\n    } catch (exAccNumber) {\n      try {\n        epasa.accountName = state.account;\n      } catch (exAccName) {\n        throw new Error(\n          `Bad account for epasa: ${exAccNumber.message} - ${exAccName.message}`\n        );\n      }\n    }\n\n    if (state.encryption === EPasa.ENC_PASSWORD) {\n      epasa.password = state.password;\n    }\n\n    if (state.format === EPasa.FORMAT_BASE58 && state.payload !== '') {\n      epasa.format = state.format;\n    }\n    epasa.encryption = state.encryption;\n\n    if (state.format === EPasa.FORMAT_HEX) {\n      epasa.payload = BC.fromHex(state.payload.substr(2));\n    } else if (state.format !== null) {\n      epasa.payload = BC.fromString(state.payload);\n    }\n\n    // validate checksum\n    if (state.checksum !== '' && EPasa.calculateChecksum(epasa.compile(true)) !== state.checksum) {\n      throw new Error('Invalid checksum provided');\n    }\n\n    return epasa;\n  }\n}\n\nmodule.exports = Parser;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","module.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (md160.length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Decodes the given operation hash.\n   *\n   * @param {BC|Buffer|Uint8Array|String} opHash\n   */\n  static decode(opHash) {\n    opHash = BC.from(opHash);\n    const block = opHash.slice(0, 4).switchEndian().toInt();\n    const account = new AccountNumber(opHash.slice(4, 8).switchEndian().toInt());\n    const nOperation = opHash.slice(8, 12).switchEndian().toInt();\n    const md160 = opHash.slice(12);\n\n    return new OperationHash(block, account, nOperation, md160);\n  }\n\n  /**\n   * Creates the pascal encoding for an operation hash.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    return BC.concat(\n      BC.fromInt(this[P_BLOCK], 4).switchEndian(),\n      BC.fromInt(this[P_ACCOUNT].account, 4).switchEndian(),\n      BC.fromInt(this[P_N_OPERATION], 4).switchEndian(),\n      this[P_MD160],\n    );\n  }\n\n  /**\n   * Gets the operation hash as a pending operation.\n   *\n   * @returns {BC}\n   */\n  encodeAsPending() {\n    return new OperationHash(0, this[P_ACCOUNT], this[P_N_OPERATION], this[P_MD160]).encode();\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","module.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\nconst P_LENGTH = Symbol('length');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n    this[P_LENGTH] = key.length;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_LENGTH] > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_LENGTH]}`\n      );\n    }\n\n    /*\n    if (this[P_LENGTH] < privateKeyLength) {\n      this[P_LENGTH] = privateKeyLength;\n      this[P_KEY] = key.prepend(BC.fromHex('00'.repeat(privateKeyLength - this[P_LENGTH])));\n    }*/\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {Number}\n     */\n  get length() {\n    return this[P_LENGTH];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Encodes a private key to a BC defined by PascalCoin.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    const curve = BC.fromInt(this.curve.id).switchEndian();\n    const length = BC.fromInt(this.length, 2).switchEndian();\n\n    return BC.concat(curve, length, this.key);\n  }\n\n  /**\n   * Decodes a PascalCoin private key string.\n   *\n   * @param {BC|Buffer|Uint8Array|String} encoded\n   * @returns {PrivateKey}\n   */\n  static decode(encoded) {\n    encoded = BC.from(encoded);\n    const curve = encoded.slice(0, 2).switchEndian().toInt();\n    const length = encoded.slice(2, 4).switchEndian().toInt();\n    const key = encoded.slice(4, 4 + length);\n\n    return new PrivateKey(key, new Curve(curve));\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","module.exports = {\n  CompositeType: require('./CompositeType'),\n  AbstractType: require('./AbstractType'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    FixedString: require('./Core/FixedString'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    VariableString: require('./Core/VariableString')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType')\n  }\n};\n","const AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\nconst P_APPEND = Symbol('append');\nconst P_PREPEND = Symbol('prepend');\n\n/**\n * Field types for string with an exact length.\n */\nclass FixedString extends AbstractType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Number} size\n   * @param {BC|null} append\n   * @param {BC|null} prepend\n   */\n  constructor(id, size, append = null, prepend = null) {\n    super(id);\n    this[P_SIZE] = size;\n    this[P_APPEND] = append;\n    this[P_PREPEND] = prepend;\n  }\n\n  /**\n   * Reads the string.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    return bc.slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Appends the given string to the given BC.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let v = BC.from(value);\n\n    if (v.length < this[P_SIZE]) {\n      if (this[P_APPEND] !== null) {\n        v = v.append(BC.fromHex(this[P_APPEND].toHex().repeat(this[P_SIZE] - v.length())));\n      } else {\n        v = v.prepend(BC.fromHex(this[P_PREPEND].toHex().repeat(this[P_SIZE] - v.length())));\n      }\n    }\n\n    return v;\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return this[P_SIZE];\n  }\n}\n\nmodule.exports = FixedString;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 64bit int values.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Reads the given int64 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt64(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int64 value.\n   *\n   * @param {string} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt64(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the number of bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return 8;\n  }\n}\n\nmodule.exports = Int64;\n","const Curve = require('./Curve');\nconst VariableString = require('./../../Core/VariableString');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PascalPublicKey = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKey extends CompositeType {\n\n  constructor(id = null) {\n    super(id || 'pubkey');\n    this.addField(new Curve('curve'));\n    this.addField(new VariableString('x'));\n    this.addField(new VariableString('y'));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc) {\n    const parsed = super.decodeFromBytes(bc);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","const PascalAccountNumber = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', false, Endian.LITTLE_ENDIAN);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalAccountNumber}\n   */\n  decodeFromBytes(bc) {\n    return new PascalAccountNumber(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {PascalAccountNumber} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n}\n\nmodule.exports = AccountNumber;\n","const AbstractType = require('./../AbstractType');\nconst PascalCurrency = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends AbstractType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'currency');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC} bc\n   * @returns {PascalCurrency}\n   */\n  decodeFromBytes(bc) {\n    return PascalCurrency.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {PascalCurrency} value\n   */\n  encodeToBytes(value) {\n    return value.bn.toArrayLike(Buffer, Endian.LITTLE_ENDIAN.toLowerCase(), 8);\n  }\n}\n\nmodule.exports = Currency;\n","const Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n  }\n}\n\nmodule.exports = NOperation;\n","const Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_CODER = Symbol('coder');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(byteSize) {\n    super(`int${byteSize * 8}_optype`);\n    switch (byteSize) {\n      case 1:\n        this[P_CODER] = new Int8('optype', true);\n        break;\n      case 2:\n        this[P_CODER] = new Int16('optype', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_CODER] = new Int32('optype', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n  }\n\n  decodeFromBytes(bc) {\n    return this[P_CODER].decodeFromBytes(bc);\n  }\n\n  encodeToBytes(value) {\n    return this[P_CODER].encodeToBytes(value);\n  }\n\n  get size() {\n    return this[P_CODER].size();\n  }\n}\n\nmodule.exports = OpType;\n","'use strict';\n\nmodule.exports =  {\n  v3: require('./lib/v3')\n};\n\n// -- Test Code ---------------------------------------------------------\nif (require.main === module) {\n  (function () {\n    console.log(module.exports.v3);\n  })();\n}\n","'use strict';\n\nmodule.exports = require('./murmur');\n","// +----------------------------------------------------------------------+\n// | murmurHash3.js v2.1.2 (http://github.com/karanlyons/murmurHash.js)   |\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012 Karan Lyons                                       |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n\n;(function (root, undefined) {\n  'use strict';\n\n  // Create a local object that'll be exported or referenced globally.\n  var library = {\n    'version': '2.1.2',\n    'x86': {},\n    'x64': {}\n  };\n\n\n\n\n  // PRIVATE FUNCTIONS\n  // -----------------\n\n  function _x86Multiply(m, n) {\n    //\n    // Given two 32bit ints, returns the two multiplied together as a\n    // 32bit int.\n    //\n\n    return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n  }\n\n\n  function _x86Rotl(m, n) {\n    //\n    // Given a 32bit int and an int representing a number of bit positions,\n    // returns the 32bit int rotated left by that number of positions.\n    //\n\n    return (m << n) | (m >>> (32 - n));\n  }\n\n\n  function _x86Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x86 mix of that block.\n    //\n\n    h ^= h >>> 16;\n    h  = _x86Multiply(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h  = _x86Multiply(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n\n    return h;\n  }\n\n\n  function _x64Add(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // added together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Multiply(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // multiplied together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Rotl(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) rotated left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 32) {\n      return [m[1], m[0]];\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n    }\n\n    else {\n      n -= 32;\n      return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n    }\n  }\n\n\n  function _x64LeftShift(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) shifted left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 0) {\n      return m;\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n    }\n\n    else {\n      return [m[1] << (n - 32), 0];\n    }\n  }\n\n\n  function _x64Xor(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // xored together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n\n\n  function _x64Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x64 mix of that block.\n    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n    // only place where we need to right shift 64bit ints.)\n    //\n\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n\n    return h;\n  }\n\n\n\n\n  // PUBLIC FUNCTIONS\n  // ----------------\n\n  library.x86.hash32 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 32 bit hash\n    // using the x86 flavor of MurmurHash3, as an unsigned int.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 4;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n\n    var k1 = 0;\n\n    var c1 = 0xcc9e2d51;\n    var c2 = 0x1b873593;\n\n    for (var i = 0; i < bytes; i = i + 4) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n\n      h1 ^= k1;\n      h1 = _x86Rotl(h1, 13);\n      h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n      case 1:\n        k1 ^= (key.charCodeAt(i) & 0xff);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 = _x86Fmix(h1);\n\n    return h1 >>> 0;\n  };\n\n\n  library.x86.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n    var h2 = seed;\n    var h3 = seed;\n    var h4 = seed;\n\n    var k1 = 0;\n    var k2 = 0;\n    var k3 = 0;\n    var k4 = 0;\n\n    var c1 = 0x239b961b;\n    var c2 = 0xab0e9789;\n    var c3 = 0x38b34ae5;\n    var c4 = 0xa1e38b93;\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n      k2 = ((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24);\n      k3 = ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24);\n      k4 = ((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n\n      h1 = _x86Rotl(h1, 19);\n      h1 += h2;\n      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n\n      h2 = _x86Rotl(h2, 17);\n      h2 += h3;\n      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n\n      h3 = _x86Rotl(h3, 15);\n      h3 += h4;\n      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n\n      h4 = _x86Rotl(h4, 13);\n      h4 += h1;\n      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    }\n\n    k1 = 0;\n    k2 = 0;\n    k3 = 0;\n    k4 = 0;\n\n    switch (remainder) {\n      case 15:\n        k4 ^= key.charCodeAt(i + 14) << 16;\n\n      case 14:\n        k4 ^= key.charCodeAt(i + 13) << 8;\n\n      case 13:\n        k4 ^= key.charCodeAt(i + 12);\n        k4 = _x86Multiply(k4, c4);\n        k4 = _x86Rotl(k4, 18);\n        k4 = _x86Multiply(k4, c1);\n        h4 ^= k4;\n\n      case 12:\n        k3 ^= key.charCodeAt(i + 11) << 24;\n\n      case 11:\n        k3 ^= key.charCodeAt(i + 10) << 16;\n\n      case 10:\n        k3 ^= key.charCodeAt(i + 9) << 8;\n\n      case 9:\n        k3 ^= key.charCodeAt(i + 8);\n        k3 = _x86Multiply(k3, c3);\n        k3 = _x86Rotl(k3, 17);\n        k3 = _x86Multiply(k3, c4);\n        h3 ^= k3;\n\n      case 8:\n        k2 ^= key.charCodeAt(i + 7) << 24;\n\n      case 7:\n        k2 ^= key.charCodeAt(i + 6) << 16;\n\n      case 6:\n        k2 ^= key.charCodeAt(i + 5) << 8;\n\n      case 5:\n        k2 ^= key.charCodeAt(i + 4);\n        k2 = _x86Multiply(k2, c2);\n        k2 = _x86Rotl(k2, 16);\n        k2 = _x86Multiply(k2, c3);\n        h2 ^= k2;\n\n      case 4:\n        k1 ^= key.charCodeAt(i + 3) << 24;\n\n      case 3:\n        k1 ^= key.charCodeAt(i + 2) << 16;\n\n      case 2:\n        k1 ^= key.charCodeAt(i + 1) << 8;\n\n      case 1:\n        k1 ^= key.charCodeAt(i);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h2 ^= key.length;\n    h3 ^= key.length;\n    h4 ^= key.length;\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    h1 = _x86Fmix(h1);\n    h2 = _x86Fmix(h2);\n    h3 = _x86Fmix(h3);\n    h4 = _x86Fmix(h4);\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n  };\n\n\n  library.x64.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = [((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24), ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24)];\n      k2 = [((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24), ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24)];\n\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n\n      h1 = _x64Rotl(h1, 27);\n      h1 = _x64Add(h1, h2);\n      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n\n      h2 = _x64Rotl(h2, 31);\n      h2 = _x64Add(h2, h1);\n      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n\n    k1 = [0, 0];\n    k2 = [0, 0];\n\n    switch(remainder) {\n      case 15:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n\n      case 14:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n\n      case 13:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n\n      case 12:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n\n      case 11:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n\n      case 10:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n\n      case 9:\n        k2 = _x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = _x64Multiply(k2, c2);\n        k2 = _x64Rotl(k2, 33);\n        k2 = _x64Multiply(k2, c1);\n        h2 = _x64Xor(h2, k2);\n\n      case 8:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n\n      case 7:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n\n      case 6:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n\n      case 5:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n\n      case 4:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n\n      case 3:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n\n      case 2:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n\n      case 1:\n        k1 = _x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = _x64Multiply(k1, c1);\n        k1 = _x64Rotl(k1, 31);\n        k1 = _x64Multiply(k1, c2);\n        h1 = _x64Xor(h1, k1);\n    }\n\n    h1 = _x64Xor(h1, [0, key.length]);\n    h2 = _x64Xor(h2, [0, key.length]);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    h1 = _x64Fmix(h1);\n    h2 = _x64Fmix(h2);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n  };\n\n\n\n\n  // INITIALIZATION\n  // --------------\n\n  // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n  // of the global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = library;\n    }\n\n    exports.murmurHash3 = library;\n  }\n\n  else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return library;\n    });\n  }\n\n  else {\n    // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n    // original value. Returns a reference to the library object, to allow\n    // it to be used under a different name.\n    library._murmurHash3 = root.murmurHash3\n\n    library.noConflict = function () {\n      root.murmurHash3 = library._murmurHash3;\n      library._murmurHash3 = undefined;\n      library.noConflict = undefined;\n\n      return library;\n    };\n\n    root.murmurHash3 = library;\n  }\n})(this);\n"],"sourceRoot":""}