{"version":3,"sources":["webpack://@pascalcoin-sbx/epasa/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/epasa/webpack/bootstrap","webpack://@pascalcoin-sbx/epasa/../common/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/BC.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Ascii.js","webpack://@pascalcoin-sbx/epasa/./src/EPasa.js","webpack://@pascalcoin-sbx/epasa/../common/src/Base58.js","webpack://@pascalcoin-sbx/epasa/../common/src/History.js","webpack://@pascalcoin-sbx/epasa/../common/src/Sha.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/epasa/../common/src/Util.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Base58.js","webpack://@pascalcoin-sbx/epasa/./index.js","webpack://@pascalcoin-sbx/epasa/./src/Parser.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/global.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Endian.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bignumber.js/bignumber.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/index.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/murmur.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Base58","require","BC","Endian","History","Sha","Util","Types","Buffer","P_BUFFER","constructor","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","switchEndian","match","reverse","join","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","global","base64","ieee754","isArray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","TypeError","ArrayBuffer","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","obj","isBuffer","len","checked","copy","val","type","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","a","x","y","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","values","keys","id","xylPublicKey","xOrY","lPrivateKey","supported","P_VALUE","CHARS_TO_ESCAPE","split","REGEX_TO_ESCAPE","map","escapeRegex","Ascii","validate","toStringEscaped","RegExp","c1","c2","AccountNumber","AccountName","MurmurHash3","v3","P_ACCOUNT_NUMBER","P_ACCOUNT_NAME","P_PAYLOAD","P_PAYLOAD_TYPE","P_PASSWORD","EPasa","NON_DETERMISTIC","ENC_PUBLIC","ENC_RECEIVER","ENC_SENDER","ENC_PASSWORD","FORMAT_ASCII","FORMAT_HEX","FORMAT_BASE58","ADDRESSED_BY_NAME","MAX_PUBLIC_ASCII","MAX_ECIES_ASCII","MAX_AES_ASCII","MAX_PUBLIC_HEX","MAX_ECIES_HEX","MAX_AES_HEX","MAX_PUBLIC_BASE58","MAX_ECIES_BASE58","MAX_AES_BASE58","accountNumber","accountName","hasFormat","isFormatBase58","isFormatAscii","isFormatHex","hasEncryption","isEncryptionPublic","isEncryptionPassword","isEncryptionSender","isEncryptionReceiver","isNonDetermistic","password","payload","checksum","calculateChecksum","compile","format","validatePayloadLength","payloadCompare","typeIdent","maxIdent","encryption","omitChecksum","account","enc_marker_start","enc_marker_end","asciiPayload","epasa","ePasaString","fromInt","x86","hash32","bs58","encode","decode","PIP_0010","INFLATION_REDUCTION","block","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","sha256","sha512","buffers","hasher","SHA256","forEach","update","digest","SHA512","version","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c3","bin2longbin","longbin","Uint32Array","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","xor","ind","litteendian","condition","action","whilst","then","Promise","resolve","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","splitted","isDeveloperReward","createdInBlock","isFoundationReward","ALLOWED","Parser","state","inAccount","inPayload","inPassword","inChecksum","checksumIdentFound","asciiOpen","asciiClosed","encOpen","encClosed","position","next","escaped","isEscape","char","exAccNumber","exAccName","message","basex","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","carry","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","g","Function","window","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","BIG_ENDIAN","LITTLE_ENDIAN","detect","base_1","hashSize","K","init","H","bufferIndex","count","transform","h","h0","h1","h2","h3","h4","h5","h6","h7","w","msg","idx","hash","selftest","cumulative","sha","toBeHashed","substring","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","Currency","OperationHash","Keys","ALLOWED_ALL","ALLOWED_START","BigNumber","MIN_FEE","pasc","molina","dividedBy","toFixed","isVague","toStringOpt","decimals","toMolina","parseFloat","add","addValue","plus","subValue","minus","toPositive","isPositive","multipliedBy","eq","isEqualTo","gt","isGreaterThan","lt","isLessThan","lteq","isLessThanOrEqualTo","gteq","isGreaterThanOrEqualTo","serialize","pascal","__WEBPACK_AMD_DEFINE_RESULT__","globalObject","isNumeric","hasSymbol","iterator","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","z","yc","k","intCheck","isOdd","toExponential","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","v","alphabet","caseChanged","isNum","_isBigNumber","search","round","DEBUG","rm","c0","ne","maxOrMin","args","method","normalise","pop","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","minimum","random","dp","rand","splice","sum","toBaseOut","baseIn","baseOut","arrL","sign","callerIsToString","multiply","base","temp","xlo","xhi","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","p1","p2","absoluteValue","comparedTo","decimalPlaces","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","gte","lte","isNegative","isZero","xLTy","xe","ye","modulo","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","for","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","opHash","encodeAsPending","PrivateKey","PublicKey","KeyPair","P_KEY","P_CURVE","P_LENGTH","privateKeyLength","ec","encoded","P_X","P_XL","P_Y","P_YL","yl","xl","ecdh","toBase58","raw","base58","decoded","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","publicKey","console","webpackPolyfill","deprecate","paths","children","library","x64","_x86Multiply","_x86Rotl","_x86Fmix","_x64Add","_x64Multiply","_x64Rotl","_x64LeftShift","_x64Xor","_x64Fmix","seed","remainder","k1","hash128","k2","k3","k4","c4","murmurHash3"],"mappings":"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","file":"@pascalcoin-sbx/epasa.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/epasa\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/epasa\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/epasa\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  History: require('./src/History'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      return BC.fromHex(data);\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString();\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n     * Switches the endianness of the BC.\n     *\n     * @returns {BC}\n     */\n  switchEndian() {\n    return BC.fromHex(\n      this[P_BUFFER].toString('hex').match(/../g).reverse().join(''),\n    );\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end) {\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n}\n\nmodule.exports = BC;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('@pascalcoin-sbx/common').Util;\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '\"():<>[\\\\]{}'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\n/**\n * Small class that holds, validated and outputs an EPasa ascii string.\n */\nclass Ascii {\n  /**\n   * Constructor\n   *\n   * @param {String|Ascii} value\n   */\n  constructor(value) {\n    if (value instanceof Ascii) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Ascii.validate(value);\n    }\n  }\n\n  /**\n   * Validates an ascii string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (value.charCodeAt(pos) < 32 || value.charCodeAt(pos) > 126) {\n        throw new Error(`Invalid ascii - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value itself.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = Ascii;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\nconst MurmurHash3 = require('murmur-hash').v3;\nconst Ascii = require('./Types/Ascii');\nconst Base58 = require('./Types/Base58');\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_ACCOUNT_NUMBER = Symbol('account_number');\nconst P_ACCOUNT_NAME = Symbol('account_name');\nconst P_PAYLOAD = Symbol('payload');\nconst P_PAYLOAD_TYPE = Symbol('payload_type');\nconst P_PASSWORD = Symbol('password');\n\n/**\n * Represents an EPasa.\n */\nclass EPasa {\n\n  /**\n   * Payload encryption and encoding method not specified.\n   *\n   * @returns {number}\n   */\n  static get NON_DETERMISTIC() {\n    return 0;\n  }\n\n  /**\n   * Unencrypted, public payload.\n   *\n   * @returns {number}\n   */\n  static get ENC_PUBLIC() {\n    return 1;\n  }\n\n  /**\n   * ECIES encrypted using recipient accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_RECEIVER() {\n    return 2;\n  }\n\n  /**\n   * ECIES encrypted using sender accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_SENDER() {\n    return 4;\n  }\n\n  /**\n   * AES encrypted using pwd param\n   *\n   * @returns {number}\n   */\n  static get ENC_PASSWORD() {\n    return 8;\n  }\n\n  /**\n   * Payload data encoded in ASCII\n   *\n   * @returns {number}\n   */\n  static get FORMAT_ASCII() {\n    return 16;\n  }\n\n  /**\n   * Payload data encoded in HEX\n   *\n   * @returns {number}\n   */\n  static get FORMAT_HEX() {\n    return 32;\n  }\n\n  /**\n   * Payload data encoded in Base58\n   *\n   * @returns {number}\n   */\n  static get FORMAT_BASE58() {\n    return 64;\n  }\n\n  /**\n   * E-PASA addressed by account name (not number).\n   *\n   * @returns {number}\n   */\n  static get ADDRESSED_BY_NAME() {\n    return 128;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_ASCII() {\n    return 255;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_ASCII() {\n    return 144;\n  }\n\n  /**\n   * The max payload length for AES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_ASCII() {\n    return 223;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_HEX() {\n    return 510;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_HEX() {\n    return 288;\n  }\n\n  /**\n   * The max payload length for AES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_HEX() {\n    return 446;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_BASE58() {\n    return 348;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_BASE58() {\n    return 196;\n  }\n\n  /**\n   * The max payload length for AES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_BASE58() {\n    return 304;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD_TYPE] = EPasa.NON_DETERMISTIC;\n  }\n\n  /**\n   * Sets the account number.\n   *\n   * @param accountNumber\n   */\n  set accountNumber(accountNumber) {\n    if (this[P_ACCOUNT_NAME] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NUMBER] = new AccountNumber(accountNumber);\n  }\n\n  /**\n   * Gets the account number if set.\n   *\n   * @returns {null|AccountNumber}\n   */\n  get accountNumber() {\n    return this[P_ACCOUNT_NUMBER];\n  }\n\n  /**\n   * Gets the account name if set.\n   *\n   * @returns {null|AccountName}\n   */\n  get accountName() {\n    return this[P_ACCOUNT_NAME];\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an assigned format.\n   */\n  hasFormat() {\n    return (this.isFormatBase58() || this.isFormatAscii() || this.isFormatHex());\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an encryption assigned.\n   */\n  hasEncryption() {\n    return (this.isEncryptionPublic() || this.isEncryptionPassword() ||\n        this.isEncryptionSender() || this.isEncryptionReceiver());\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatBase58() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatAscii() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatHex() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the receivers public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionReceiver() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the senders public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionSender() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is aes.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPassword() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD);\n  }\n\n  /**\n   * Gets a value indicating that there is no encryption (public payloads).\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPublic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is not set.\n   *\n   * @returns {boolean}\n   */\n  isNonDetermistic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.NON_DETERMISTIC) === EPasa.NON_DETERMISTIC);\n  }\n\n  /**\n   * Gets the password of the epasa.\n   *\n   * @returns {null|String}\n   */\n  get password() {\n    return this[P_PASSWORD];\n  }\n\n  /**\n   * Gets the payload of the epasa.\n   *\n   * @returns {null|Payload}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the extended checksum.\n   *\n   * @returns {string}\n   */\n  get checksum() {\n    return EPasa.calculateChecksum(this.compile(true));\n  }\n\n  /**\n   * Sets the account name.\n   *\n   * @param {AccountName} accountName\n   */\n  set accountName(accountName) {\n    if (this[P_ACCOUNT_NUMBER] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NAME] = new AccountName(accountName);\n    this[P_PAYLOAD_TYPE] |= EPasa.ADDRESSED_BY_NAME;\n  }\n\n  /**\n   * Sets the payload.\n   *\n   * @param {BC} payload\n   */\n  set payload(payload) {\n\n    if (!this.hasFormat()) {\n      this.format = EPasa.FORMAT_ASCII;\n    }\n\n    if ((!this.hasFormat() || !this.hasEncryption()) && payload.toString() !== '') {\n      throw new Error('EPasa payloads can only be set when the encryption and format is defined.');\n    }\n\n    if (!(payload instanceof BC)) {\n      if (this.isFormatHex()) {\n        payload = BC.fromHex(payload);\n      } else {\n        payload = BC.fromString(payload);\n      }\n    }\n\n    this.validatePayloadLength(payload);\n    this[P_PAYLOAD] = payload;\n\n    return this;\n  }\n\n  /**\n   * Vaidates the length of an unencrypted payload.\n   *\n   * @param {BC} payload\n   * @returns {boolean}\n   */\n  validatePayloadLength(payload) {\n    // TODO: Oh yes, wanted to be smart, but now im unreadable.\n    let payloadCompare = '';\n    let typeIdent = 'ASCII';\n\n    if (this.isFormatAscii()) {\n      payloadCompare = payload.toString();\n    } else if (this.isFormatHex()) {\n      payloadCompare = payload.toHex();\n      typeIdent = 'HEX';\n    } else if (this.isFormatBase58()) {\n      payloadCompare = payload.toString();\n      typeIdent = 'BASE58';\n    }\n\n    let maxIdent = 'PUBLIC';\n\n    if (this.isEncryptionReceiver() || this.isEncryptionSender()) {\n      maxIdent = 'ECIES';\n    } else if (this.isEncryptionPassword()) {\n      maxIdent = 'AES';\n    }\n\n    if (payloadCompare.length > EPasa[`MAX_${maxIdent}_${typeIdent}`]) {\n      throw new Error(\n        `Invalid payload length ${payloadCompare.length} for ${maxIdent}_${typeIdent}. \n        Max is ${EPasa[`MAX_${maxIdent}_${typeIdent}`]}`\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {String} password\n   */\n  set password(password) {\n    this[P_PASSWORD] = password;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} encryption\n   */\n  set encryption(encryption) {\n    if (encryption === EPasa.ENC_PASSWORD && this[P_PASSWORD] === undefined) {\n      throw new Error('Set password before setting the password encryption flag.');\n    }\n\n    this[P_PAYLOAD_TYPE] |= encryption;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} format\n   */\n  set format(format) {\n    this[P_PAYLOAD_TYPE] |= format;\n  }\n\n  /**\n   * Creates a new E-PASA string.\n   *\n   * @param {Boolean} omitChecksum\n   * @returns {string}\n   */\n  compile(omitChecksum = false) {\n    let data = {\n      account: null,\n      enc_marker_start: null,\n      enc_marker_end: null,\n      payload: ''\n    };\n\n    // determine and validate account info\n    if ((this[P_PAYLOAD_TYPE] & EPasa.ADDRESSED_BY_NAME) === EPasa.ADDRESSED_BY_NAME) {\n      data.account = this[P_ACCOUNT_NAME].toStringEscaped();\n    } else {\n      data.account = this[P_ACCOUNT_NUMBER].toString();\n    }\n\n    // if there is a payload, we need to format it\n    if (this[P_PAYLOAD] !== undefined) {\n      if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX) {\n        data.payload = `0x${this[P_PAYLOAD].toHex().toLowerCase()}`;\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58) {\n        data.payload = new Base58(this[P_PAYLOAD].toString()).toString();\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII) {\n        let asciiPayload = new Ascii(this[P_PAYLOAD].toString()).toStringEscaped();\n\n        if (asciiPayload.length > 0) {\n          data.payload = `\"${asciiPayload}\"`;\n        }\n      }\n\n      // now we need to determine the wanted encryption of the payload.\n      if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC) {\n        data.enc_marker_start = '[';\n        data.enc_marker_end = ']';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER) {\n        data.enc_marker_start = '(';\n        data.enc_marker_end = ')';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER) {\n        data.enc_marker_start = '<';\n        data.enc_marker_end = '>';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD) {\n        data.enc_marker_start = '{';\n        data.enc_marker_end = '}';\n        // append password\n        let password = new Ascii(this[P_PASSWORD]);\n\n        data.payload += `:${password.toStringEscaped()}`;\n      }\n    } else {\n      // no payload, no marker\n      data.payload = '';\n      data.enc_marker_start = '';\n      data.enc_marker_end = '';\n    }\n\n    // combine collected data\n    let epasa = `${data.account}${data.enc_marker_start}${data.payload}${data.enc_marker_end}`;\n\n    // no checksum\n    if (omitChecksum) {\n      return epasa;\n    }\n\n    // calculate the checksum\n    return `${epasa}:${EPasa.calculateChecksum(epasa)}`;\n  }\n\n  /**\n   * Calculates the checksum of the epasa.\n   *\n   * @param {String} ePasaString\n   * @returns {string}\n   */\n  static calculateChecksum(ePasaString) {\n    return BC.fromInt(MurmurHash3.x86.hash32(ePasaString) % 65536)\n      .switchEndian()\n      .toHex(true);\n  }\n}\n\nmodule.exports = EPasa;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Gets information about forks and features.\n */\nclass History {\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return History.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= History.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return History.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= History.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return History.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= History.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = History;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","class Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n\n  static promiseWhile(data, condition, action) {\n    let whilst = (data) => {\n      return condition(data) ?\n        action(data).then(whilst) :\n        Promise.resolve(data);\n    };\n\n    return whilst(data);\n  };\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst History = require('../History');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = History.isDeveloperReward(this[P_CREATED_IN_BLOCK]) && this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_VALUE = Symbol('value');\n\nconst ALLOWED = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split('');\n\n/**\n * Small class to initialize and validate a base58 value.\n */\nclass Base58 {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof Base58) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Base58.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (ALLOWED.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid base58 - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = {\n  Parser: require('./src/Parser'),\n  EPasa: require('./src/EPasa'),\n  Types: {\n    Ascii: require('./src/Types/Ascii'),\n    Base58: require('./src/Types/Base58')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst EPasa = require('./EPasa');\nconst Ascii = require('./Types/Ascii');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\n/**\n * A small parser for the EPASA format.\n */\nclass Parser {\n  /**\n   * Tries to parse an EPASA string.\n   *\n   * @param {String} ePasaString\n   * @returns {EPasa}\n   */\n  static parse(ePasaString) {\n    let state = {\n      inAccount: true,\n      inPayload: false,\n      inPassword: false,\n      inChecksum: false,\n      checksumIdentFound: false,\n      account: '',\n      payload: '',\n      format: null,\n      encryption: null,\n      checksum: '',\n      password: '',\n      asciiOpen: false,\n      asciiClosed: false,\n      encOpen: false,\n      encClosed: false\n    };\n\n    let position = 0;\n\n    /**\n         * Gets information of the current char in the loop as well as a flag\n         * identifiying an escaped character (position +2) and the next char.\n         *\n         * @param {Boolean} inAccount\n         * @param {Boolean} inPayload\n         * @returns {Object}\n         */\n    const next = function (inAccount, inPayload) {\n      // check if we are at the end\n      if (position > ePasaString.length - 1) {\n        return false;\n      }\n\n      // flag identifying an escaped character\n      let escaped = false;\n\n      if (inAccount) {\n        // account names have special escaping rules\n        escaped = AccountName.isEscape(ePasaString[position], ePasaString[position + 1]);\n      } else if (inPayload) {\n        // payload has special escaping rules\n        escaped = Ascii.isEscape(ePasaString[position], ePasaString[position + 1]);\n      }\n\n      // increment position, if escaped increment twice to skip the escape\n      position++;\n      if (escaped) {\n        position++;\n      }\n\n      return {\n        escaped,\n        char: ePasaString[position - 1],\n        next: ePasaString[position]\n      };\n    };\n\n    // current char info in the loop\n    let curr;\n\n    // loop the epasa string\n    while ((curr = next(state.inAccount, state.inPayload)) !== false) {\n\n      // we are in the account, now check for an payload open identifier\n      // and toggle the position\n      if (state.inAccount) {\n        if (curr.escaped === false && ['[', '(', '{', '<'].indexOf(curr.char) > -1) {\n          state.inAccount = false;\n          state.inPayload = true;\n        }\n      }\n\n      // if we are in the payload, no encryption was determined\n      // and the character is an encryption type open tag\n      if (state.encryption === null && curr.escaped === false && state.inPayload &&\n                ['[', '(', '{', '<'].indexOf(curr.char) > -1\n      ) {\n        if (curr.char === '[') {\n          state.encryption = EPasa.ENC_PUBLIC;\n        } else if (curr.char === '(') {\n          state.encryption = EPasa.ENC_RECEIVER;\n        } else if (curr.char === '<') {\n          state.encryption = EPasa.ENC_SENDER;\n        } else if (curr.char === '{') {\n          state.encryption = EPasa.ENC_PASSWORD;\n        }\n\n        state.encOpen = curr.char;\n        // we omit the character\n        continue;\n      }\n\n      // when we are in the payload or the account and find a \":\" it is an\n      // password identifier but only if its a password encryption, otherwise it identifies the\n      // checksum\n      if (curr.escaped === false && (state.inPayload || state.inAccount) && curr.char === ':') {\n        if (state.encryption === EPasa.ENC_PASSWORD) {\n          state.inPassword = true;\n        } else {\n          state.inPassword = false;\n          state.inChecksum = true;\n          state.inAccount = false;\n          state.checksumIdentFound = true;\n        }\n\n        // we ignore it then\n        continue;\n      }\n\n      // determine the format, a \" identifies ascii, 0x hex, otherwise its probably base58\n      if (curr.escaped === false && curr.char === '\"' && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_ASCII;\n        state.asciiOpen = true;\n        continue;\n      } else if (curr.escaped === false && curr.char === '0' && curr.next === 'x' &&\n                state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_HEX;\n      } else if (curr.escaped === false && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_BASE58;\n      } else if (curr.escaped === false && curr.char === '\"' && state.inPayload &&\n                state.format === EPasa.FORMAT_ASCII) {\n        state.asciiClosed = true;\n        continue;\n      }\n\n      // check closing encryption\n      if (curr.escaped === false && state.inPayload && [']', ')', '}', '>'].indexOf(curr.char) > -1) {\n        state.inPayload = false;\n        state.inChecksum = true;\n        state.encClosed = curr.char;\n        // omit\n        continue;\n      }\n\n      // append to account\n      if (state.inAccount) {\n        state.account += curr.char;\n        continue;\n      }\n\n      // if (state.inPayload && curr.escaped === false && curr.char === ':') {\n      //  state.inPassword = true;\n      // }\n\n      // payload\n      if (state.inPayload && !state.inPassword) {\n        state.payload += curr.char;\n      }\n      // password\n      if (state.inPayload && state.inPassword) {\n        state.password += curr.char;\n      }\n\n      // checksum\n      if (state.inChecksum && curr.char !== ':') {\n        state.checksum += curr.char;\n      }\n    }\n\n    if (state.asciiOpen && !state.asciiClosed) {\n      throw new Error('Invalid EPasa - missing closing ascii');\n    }\n\n    if (state.encOpen !== false && state.encClosed === false) {\n      throw new Error('Invalid EPasa - missing closing encryption identifier');\n    }\n\n    if ((state.encOpen === '[' && state.encClosed !== ']') ||\n            (state.encOpen === '(' && state.encClosed !== ')') ||\n            (state.encOpen === '<' && state.encClosed !== '>') ||\n            (state.encOpen === '{' && state.encClosed !== '}')) {\n      throw new Error('Invalid EPasa - wrong closing encryption identifier');\n    }\n\n    if (state.inChecksum && state.checksum.length < 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too short checksum');\n    }\n\n    if (state.inChecksum && state.checksum.length > 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too long checksum');\n    }\n\n    if (state.format === EPasa.FORMAT_HEX && state.payload.substr(2).length > 0 &&\n            /^[0-9a-f]+$/.test(state.payload.substr(2)) === false) {\n      throw new Error('Invalid EPasa - only lowercase hex allowed.');\n    }\n\n    // create a new epasa and trigger the validation\n    let epasa = new EPasa();\n\n    try {\n      epasa.accountNumber = state.account;\n    } catch (exAccNumber) {\n      try {\n        epasa.accountName = state.account;\n      } catch (exAccName) {\n        throw new Error(\n          `Bad account for epasa: ${exAccNumber.message} - ${exAccName.message}`\n        );\n      }\n    }\n\n    if (state.encryption === EPasa.ENC_PASSWORD) {\n      epasa.password = state.password;\n    }\n\n    if (state.format === EPasa.FORMAT_BASE58 && state.payload !== '') {\n      epasa.format = state.format;\n    }\n    epasa.encryption = state.encryption;\n\n    if (state.format === EPasa.FORMAT_HEX) {\n      epasa.payload = BC.fromHex(state.payload.substr(2));\n    } else if (state.format !== null) {\n      epasa.payload = BC.fromString(state.payload);\n    }\n\n    // validate checksum\n    if (state.checksum !== '' && EPasa.calculateChecksum(epasa.compile(true)) !== state.checksum) {\n      throw new Error('Invalid checksum provided');\n    }\n\n    return epasa;\n  }\n}\n\nmodule.exports = Parser;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    var b = new ArrayBuffer(4);\n    var a = new Uint32Array(b);\n    var c = new Uint8Array(b);\n\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return Endian.LITTLE_ENDIAN;\n    }\n    if (c[0] === 0xde) {\n      return Endian.BIG_ENDIAN;\n    }\n\n    throw new Error('unknown endianness');\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","module.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BigNumber = require('bignumber.js');\n\nconst P_VALUE = Symbol('value');\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  static get MIN_FEE() {\n    return new Currency('0.0001');\n  }\n\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (typeof pasc === 'string') {\n      pasc = pasc.split(',').join('');\n    }\n\n    this[P_VALUE] = new BigNumber(pasc.toString());\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BigNumber(molina.toString()).dividedBy('10000')\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return this[P_VALUE].toFixed(4);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return this[P_VALUE].toFixed(decimals)\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return parseFloat(this[P_VALUE].toString()) * 10000;\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.plus(new Currency(addValue).value).toFixed(4),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.minus(new Currency(subValue).value).toFixed(4),\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (!this[P_VALUE].isPositive()) {\n      return new Currency(\n        this[P_VALUE].multipliedBy(-1).toFixed(4),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].isEqualTo(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].isGreaterThan(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].isLessThan(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].isLessThanOrEqualTo(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].isGreaterThanOrEqualTo(new Currency(value).value);\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (md160.length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Decodes the given operation hash.\n   *\n   * @param {BC|Buffer|Uint8Array|String} opHash\n   */\n  static decode(opHash) {\n    opHash = BC.from(opHash);\n    const block = opHash.slice(0, 4).switchEndian().toInt();\n    const account = new AccountNumber(opHash.slice(4, 8).switchEndian().toInt());\n    const nOperation = opHash.slice(8, 12).switchEndian().toInt();\n    const md160 = opHash.slice(12);\n\n    return new OperationHash(block, account, nOperation, md160);\n  }\n\n  /**\n   * Creates the pascal encoding for an operation hash.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    return BC.concat(\n      BC.fromInt(this[P_BLOCK], 4).switchEndian(),\n      BC.fromInt(this[P_ACCOUNT].account, 4).switchEndian(),\n      BC.fromInt(this[P_N_OPERATION], 4).switchEndian(),\n      this[P_MD160],\n    );\n  }\n\n  /**\n   * Gets the operation hash as a pending operation.\n   *\n   * @returns {BC}\n   */\n  encodeAsPending() {\n    return new OperationHash(0, this[P_ACCOUNT], this[P_N_OPERATION], this[P_MD160]).encode();\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","module.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\nconst P_LENGTH = Symbol('length');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n    this[P_LENGTH] = key.length;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_LENGTH] > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_LENGTH]}`\n      );\n    }\n\n    /*\n    if (this[P_LENGTH] < privateKeyLength) {\n      this[P_LENGTH] = privateKeyLength;\n      this[P_KEY] = key.prepend(BC.fromHex('00'.repeat(privateKeyLength - this[P_LENGTH])));\n    }*/\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {Number}\n     */\n  get length() {\n    return this[P_LENGTH];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Encodes a private key to a BC defined by PascalCoin.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    const curve = BC.fromInt(this.curve.id).switchEndian();\n    const length = BC.fromInt(this.length, 2).switchEndian();\n\n    return BC.concat(curve, length, this.key);\n  }\n\n  /**\n   * Decodes a PascalCoin private key string.\n   *\n   * @param {BC|Buffer|Uint8Array|String} encoded\n   * @returns {PrivateKey}\n   */\n  static decode(encoded) {\n    encoded = BC.from(encoded);\n    const curve = encoded.slice(0, 2).switchEndian().toInt();\n    const length = encoded.slice(2, 4).switchEndian().toInt();\n    const key = encoded.slice(4, 4 + length);\n\n    return new PrivateKey(key, new Curve(curve));\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\nconst Sha = require('../../Sha');\nconst Base58 = require('../../Base58');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n\n  /**\n   * Encodes a public key to a BC defined by PascalCoin.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    const curve = BC.fromInt(this.curve.id, 2).switchEndian();\n    const xl = BC.fromInt(this.xl, 2).switchEndian();\n    const yl = BC.fromInt(this.yl, 2).switchEndian();\n\n    return BC.concat(curve, xl, this.x, yl, this.y);\n  }\n\n  /**\n   * Decodes an encoded public key.\n   *\n   * @param {BC|Buffer|Uint8Array|String} encoded\n   * @returns {PublicKey}\n   */\n  static decode(encoded) {\n    encoded = BC.from(encoded);\n    const curve = encoded.slice(0, 2).switchEndian().toInt();\n    const xl = encoded.slice(2, 4).switchEndian().toInt();\n    const x = encoded.slice(4, 4 + xl);\n    const yl = encoded.slice(4 + xl, 6 + xl).switchEndian().toInt();\n    const y = encoded.slice(6 + xl, 6 + xl + yl);\n\n    return new PublicKey(x, y, new Curve(curve));\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  toBase58() {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encode();\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  static fromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return PublicKey.decode(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","'use strict';\n\nmodule.exports =  {\n  v3: require('./lib/v3')\n};\n\n// -- Test Code ---------------------------------------------------------\nif (require.main === module) {\n  (function () {\n    console.log(module.exports.v3);\n  })();\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","'use strict';\n\nmodule.exports = require('./murmur');\n","// +----------------------------------------------------------------------+\n// | murmurHash3.js v2.1.2 (http://github.com/karanlyons/murmurHash.js)   |\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012 Karan Lyons                                       |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n\n;(function (root, undefined) {\n  'use strict';\n\n  // Create a local object that'll be exported or referenced globally.\n  var library = {\n    'version': '2.1.2',\n    'x86': {},\n    'x64': {}\n  };\n\n\n\n\n  // PRIVATE FUNCTIONS\n  // -----------------\n\n  function _x86Multiply(m, n) {\n    //\n    // Given two 32bit ints, returns the two multiplied together as a\n    // 32bit int.\n    //\n\n    return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n  }\n\n\n  function _x86Rotl(m, n) {\n    //\n    // Given a 32bit int and an int representing a number of bit positions,\n    // returns the 32bit int rotated left by that number of positions.\n    //\n\n    return (m << n) | (m >>> (32 - n));\n  }\n\n\n  function _x86Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x86 mix of that block.\n    //\n\n    h ^= h >>> 16;\n    h  = _x86Multiply(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h  = _x86Multiply(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n\n    return h;\n  }\n\n\n  function _x64Add(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // added together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Multiply(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // multiplied together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Rotl(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) rotated left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 32) {\n      return [m[1], m[0]];\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n    }\n\n    else {\n      n -= 32;\n      return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n    }\n  }\n\n\n  function _x64LeftShift(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) shifted left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 0) {\n      return m;\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n    }\n\n    else {\n      return [m[1] << (n - 32), 0];\n    }\n  }\n\n\n  function _x64Xor(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // xored together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n\n\n  function _x64Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x64 mix of that block.\n    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n    // only place where we need to right shift 64bit ints.)\n    //\n\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n\n    return h;\n  }\n\n\n\n\n  // PUBLIC FUNCTIONS\n  // ----------------\n\n  library.x86.hash32 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 32 bit hash\n    // using the x86 flavor of MurmurHash3, as an unsigned int.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 4;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n\n    var k1 = 0;\n\n    var c1 = 0xcc9e2d51;\n    var c2 = 0x1b873593;\n\n    for (var i = 0; i < bytes; i = i + 4) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n\n      h1 ^= k1;\n      h1 = _x86Rotl(h1, 13);\n      h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n      case 1:\n        k1 ^= (key.charCodeAt(i) & 0xff);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 = _x86Fmix(h1);\n\n    return h1 >>> 0;\n  };\n\n\n  library.x86.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n    var h2 = seed;\n    var h3 = seed;\n    var h4 = seed;\n\n    var k1 = 0;\n    var k2 = 0;\n    var k3 = 0;\n    var k4 = 0;\n\n    var c1 = 0x239b961b;\n    var c2 = 0xab0e9789;\n    var c3 = 0x38b34ae5;\n    var c4 = 0xa1e38b93;\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n      k2 = ((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24);\n      k3 = ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24);\n      k4 = ((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n\n      h1 = _x86Rotl(h1, 19);\n      h1 += h2;\n      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n\n      h2 = _x86Rotl(h2, 17);\n      h2 += h3;\n      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n\n      h3 = _x86Rotl(h3, 15);\n      h3 += h4;\n      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n\n      h4 = _x86Rotl(h4, 13);\n      h4 += h1;\n      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    }\n\n    k1 = 0;\n    k2 = 0;\n    k3 = 0;\n    k4 = 0;\n\n    switch (remainder) {\n      case 15:\n        k4 ^= key.charCodeAt(i + 14) << 16;\n\n      case 14:\n        k4 ^= key.charCodeAt(i + 13) << 8;\n\n      case 13:\n        k4 ^= key.charCodeAt(i + 12);\n        k4 = _x86Multiply(k4, c4);\n        k4 = _x86Rotl(k4, 18);\n        k4 = _x86Multiply(k4, c1);\n        h4 ^= k4;\n\n      case 12:\n        k3 ^= key.charCodeAt(i + 11) << 24;\n\n      case 11:\n        k3 ^= key.charCodeAt(i + 10) << 16;\n\n      case 10:\n        k3 ^= key.charCodeAt(i + 9) << 8;\n\n      case 9:\n        k3 ^= key.charCodeAt(i + 8);\n        k3 = _x86Multiply(k3, c3);\n        k3 = _x86Rotl(k3, 17);\n        k3 = _x86Multiply(k3, c4);\n        h3 ^= k3;\n\n      case 8:\n        k2 ^= key.charCodeAt(i + 7) << 24;\n\n      case 7:\n        k2 ^= key.charCodeAt(i + 6) << 16;\n\n      case 6:\n        k2 ^= key.charCodeAt(i + 5) << 8;\n\n      case 5:\n        k2 ^= key.charCodeAt(i + 4);\n        k2 = _x86Multiply(k2, c2);\n        k2 = _x86Rotl(k2, 16);\n        k2 = _x86Multiply(k2, c3);\n        h2 ^= k2;\n\n      case 4:\n        k1 ^= key.charCodeAt(i + 3) << 24;\n\n      case 3:\n        k1 ^= key.charCodeAt(i + 2) << 16;\n\n      case 2:\n        k1 ^= key.charCodeAt(i + 1) << 8;\n\n      case 1:\n        k1 ^= key.charCodeAt(i);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h2 ^= key.length;\n    h3 ^= key.length;\n    h4 ^= key.length;\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    h1 = _x86Fmix(h1);\n    h2 = _x86Fmix(h2);\n    h3 = _x86Fmix(h3);\n    h4 = _x86Fmix(h4);\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n  };\n\n\n  library.x64.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = [((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24), ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24)];\n      k2 = [((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24), ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24)];\n\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n\n      h1 = _x64Rotl(h1, 27);\n      h1 = _x64Add(h1, h2);\n      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n\n      h2 = _x64Rotl(h2, 31);\n      h2 = _x64Add(h2, h1);\n      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n\n    k1 = [0, 0];\n    k2 = [0, 0];\n\n    switch(remainder) {\n      case 15:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n\n      case 14:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n\n      case 13:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n\n      case 12:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n\n      case 11:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n\n      case 10:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n\n      case 9:\n        k2 = _x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = _x64Multiply(k2, c2);\n        k2 = _x64Rotl(k2, 33);\n        k2 = _x64Multiply(k2, c1);\n        h2 = _x64Xor(h2, k2);\n\n      case 8:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n\n      case 7:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n\n      case 6:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n\n      case 5:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n\n      case 4:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n\n      case 3:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n\n      case 2:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n\n      case 1:\n        k1 = _x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = _x64Multiply(k1, c1);\n        k1 = _x64Rotl(k1, 31);\n        k1 = _x64Multiply(k1, c2);\n        h1 = _x64Xor(h1, k1);\n    }\n\n    h1 = _x64Xor(h1, [0, key.length]);\n    h2 = _x64Xor(h2, [0, key.length]);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    h1 = _x64Fmix(h1);\n    h2 = _x64Fmix(h2);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n  };\n\n\n\n\n  // INITIALIZATION\n  // --------------\n\n  // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n  // of the global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = library;\n    }\n\n    exports.murmurHash3 = library;\n  }\n\n  else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return library;\n    });\n  }\n\n  else {\n    // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n    // original value. Returns a reference to the library object, to allow\n    // it to be used under a different name.\n    library._murmurHash3 = root.murmurHash3\n\n    library.noConflict = function () {\n      root.murmurHash3 = library._murmurHash3;\n      library._murmurHash3 = undefined;\n      library.noConflict = undefined;\n\n      return library;\n    };\n\n    root.murmurHash3 = library;\n  }\n})(this);\n"],"sourceRoot":""}