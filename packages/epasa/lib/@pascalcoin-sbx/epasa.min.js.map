{"version":3,"sources":["webpack://@pascalcoin-sbx/epasa/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/epasa/webpack/bootstrap","webpack://@pascalcoin-sbx/epasa/../common/src/BC.js","webpack://@pascalcoin-sbx/epasa/../common/src/Endian.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/epasa/../common/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/BytesWithoutLength.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/BytesWithLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Ascii.js","webpack://@pascalcoin-sbx/epasa/./src/EPasa.js","webpack://@pascalcoin-sbx/epasa/../common/src/Base58.js","webpack://@pascalcoin-sbx/epasa/../common/src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/epasa/../common/src/Sha.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/epasa/../common/src/Util.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/StringWithLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/StringWithoutLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Base58.js","webpack://@pascalcoin-sbx/epasa/./index.js","webpack://@pascalcoin-sbx/epasa/./src/Parser.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/global.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/index.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Repeating.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Decissive.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Core/BytesFixedLength.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/AccountName.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/epasa/../common/src/Coding/Pascal/OperationHash.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/murmur.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Buffer","Endian","require","P_BUFFER","BC","constructor","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","e","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","detect","method","readInt32","buf","allocUnsafe","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","P_HAS_FIXED_VALUE","P_DESCRIPTION","id","hasFixedValue","fixedValue","encodedSize","decodeFromBytes","options","all","encodeToBytes","withFixedValue","description","undefined","push","canDecode","Base58","PascalCoinInfo","Sha","Util","Types","Coding","AbstractInt","super","fromInt32","AbstractType","P_SUBTYPES","P_SIZE_ENCODED","subTypes","addSubType","field","toArray","obj","forEach","subType","values","objOrArray","empty","idx","subTypeValue","Array","isArray","P_ENDIAN","P_UNSIGNED","fromInt16","fromInt8","encoded","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","TypeError","array","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","isBuffer","len","checked","copy","val","type","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","x","y","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","BN","P_VALUE","toFixed","base","dm","divmod","mod","div","isNegative","Currency","pasc","isBN","split","negative","substring","comps","whole","fraction","molina","add","neg","isVague","toStringOpt","decimals","RegExp","toMolina","addValue","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","splitted","map","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","keys","xylPublicKey","xOrY","lPrivateKey","supported","Int8","Int16","Int32","BytesWithoutLength","P_LENGTH_FIELD","P_BYTES_FIELD","byteSize","lengthId","lengthDesc","lengthField","CurveType","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","Ascii","validate","toStringEscaped","c1","c2","AccountName","Core","MurmurHash3","v3","P_ACCOUNT_NUMBER","P_ACCOUNT_NAME","P_PAYLOAD","P_PAYLOAD_TYPE","P_PASSWORD","EPasa","NON_DETERMISTIC","ENC_PUBLIC","ENC_RECEIVER","ENC_SENDER","ENC_PASSWORD","FORMAT_ASCII","FORMAT_HEX","FORMAT_BASE58","ADDRESSED_BY_NAME","MAX_PUBLIC_ASCII","MAX_ECIES_ASCII","MAX_AES_ASCII","MAX_PUBLIC_HEX","MAX_ECIES_HEX","MAX_AES_HEX","MAX_PUBLIC_BASE58","MAX_ECIES_BASE58","MAX_AES_BASE58","accountName","hasFormat","isFormatBase58","isFormatAscii","isFormatHex","hasEncryption","isEncryptionPublic","isEncryptionPassword","isEncryptionSender","isEncryptionReceiver","isNonDetermistic","password","payload","compile","format","validatePayloadLength","payloadCompare","typeIdent","maxIdent","encryption","omitChecksum","enc_marker_start","enc_marker_end","asciiPayload","epasa","ePasaString","x86","hash32","bs58","encode","decode","block","fromMolina","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","assert","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","parseBase","num","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","w","off","limbLen","limbPow","total","word","imuln","_iaddn","dest","clone","_expand","_normSign","zeros","groupSizes","groupBases","smallMulTo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toBuffer","toArrayLike","ArrayType","reqLength","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","output","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","webpackPolyfill","deprecate","paths","children","sha256","sha512","buffers","hasher","SHA256","update","digest","SHA512","version","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c3","bin2longbin","longbin","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","ind","litteendian","ALLOWED_ALL","ALLOWED_START","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","P_KEY","P_CURVE","privateKeyLength","ec","P_X","P_XL","P_Y","P_YL","PublicKey","yl","xl","ecdh","fromInt","validate64Bit","isUnsigned","StringWithoutLength","P_STRING_FIELD","AccountNumberType","ALLOWED","Parser","state","inAccount","inPayload","inPassword","inChecksum","checksumIdentFound","asciiOpen","asciiClosed","encOpen","encClosed","position","escaped","isEscape","char","exAccNumber","exAccName","message","basex","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","Function","window","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","isLE","mLen","eLen","eMax","eBias","nBits","NaN","rt","LN2","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","OperationHash","Keys","PrivateKey","KeyPair","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","publicKey","CompositeType","Repeating","Decissive","Int64","StringWithLength","BytesWithLength","BytesFixedLength","Pascal","NOperation","OpType","P_REPEAT_LIMIT","P_REPEAT_MARKER","P_TYPE","repeatLimit","repeatMarker","result","counter","decoded","item","repeatingType","P_SUBTYPE_RESOLVER","P_MARKER_FIELD","markerField","subTypeResolver","P_SIZE","PublicKeyType","omitXYLenghts","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","PrivateKeyType","AccountNameType","CurrencyType","P_INT_TYPE","OperationHashType","console","library","x64","_x86Multiply","_x86Rotl","_x86Fmix","_x64Add","_x64Multiply","_x64Rotl","_x64LeftShift","_x64Xor","_x64Fmix","seed","remainder","k1","hash128","k2","k3","k4","c4","murmurHash3"],"mappings":"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","file":"@pascalcoin-sbx/epasa.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/epasa\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/epasa\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/epasa\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 35);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      try {\n        return BC.fromHex(data);\n      } catch (e) {\n        return BC.fromString(data);\n      }\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str, 'utf8'));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString('utf8');\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\nconst P_HAS_FIXED_VALUE = Symbol('has_fixed_value');\nconst P_DESCRIPTION = Symbol('description');\n\n/**\n * Abstract field type to encode and decode values. Abstracts encodeToBytes and decodeFromBytes as\n * basic implementations but in fact it can be anything.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string|null} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n    this[P_HAS_FIXED_VALUE] = false;\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Gets a value indicating whether the field type has a fixed value.\n   *\n   * @returns {Boolean}\n   */\n  get hasFixedValue() {\n    return this[P_HAS_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the fixed value.\n   *\n   * @returns {*}\n   */\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the encoded size of the type.\n   *\n   * @return {Number}\n   */\n  get encodedSize() {\n    throw new Error('Encoded size getter not implemented');\n  }\n\n  /**\n   * Decodes a value using the rules defined in the method from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Returns the encoded bytes for the given value.\n   *\n   * @param {*} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  withFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    this[P_HAS_FIXED_VALUE] = true;\n    return this;\n  }\n\n  /**\n   * Sets the description and returns the type or gets the description itself.\n   *\n   * @param {String} description\n   * @returns {AbstractType|String}\n   */\n  description(description = null) {\n    if (description === null) {\n      return this[P_DESCRIPTION];\n    }\n\n    if (this[P_DESCRIPTION] === undefined) {\n      this[P_DESCRIPTION] = [];\n    }\n    this[P_DESCRIPTION].push(description);\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the type can be decoded. It is\n   * not possible in some circumstances.\n   *\n   * @return {boolean}\n   */\n  get canDecode() {\n    return true;\n  }\n}\n\nmodule.exports = AbstractType;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int32', unsigned, endian);\n    this.description('4byte 32bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 4;\n  }\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SUBTYPES = Symbol('subtypes');\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A Type that itself is made up of multiple other (sub-)types.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id || 'composite_type');\n    super.description('A type that itself is made up of multiple other types.');\n    this[P_SUBTYPES] = [];\n  }\n\n  /**\n   * Gets all subtypes.\n   *\n   * @returns {Array}\n   */\n  get subTypes() {\n    return this[P_SUBTYPES];\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Adds a new field (type) definition.\n   *\n   * @param {AbstractType} field\n   */\n  addSubType(field) {\n    this[P_SUBTYPES].push(field);\n    return this;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = { toArray: false }, all = null) {\n    if (this.canDecode === false) {\n      throw new Error('This type cannot be decoded.');\n    }\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.subTypes.forEach((subType) => {\n      obj[subType.id] = subType.decodeFromBytes(bc.slice(offset), options, obj);\n      offset += subType.encodedSize;\n    });\n    this[P_SIZE_ENCODED] = offset;\n\n    return options.toArray ? Object.values(obj) : obj;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array|*} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let bc = BC.empty();\n\n    this.subTypes.forEach((subType, idx) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = Array.isArray(objOrArray) ? objOrArray[idx] : objOrArray[subType.id];\n      }\n\n      // we will use the first available\n      bc = bc.append(subType.encodeToBytes(subTypeValue, objOrArray));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = CompositeType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n}\n\nmodule.exports = AbstractInt;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for a 16bit int value.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int16', unsigned, endian);\n    this.description('2byte 16bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 2;\n  }\n\n  /**\n   * Decodes the int16 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Encodes the given Int16 value to a byte sequence.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int16;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8Bit int value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id || 'int8', unsigned, Endian.LITTLE_ENDIAN);\n    this.description('1byte 8bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 1;\n  }\n\n  /**\n   * Reads the int8 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt8(0, this.unsigned);\n  }\n\n  /**\n   * Encodes the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned);\n  }\n}\n\nmodule.exports = Int8;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write bytes without prepending the length. This cannot be decoded in some circumstances.\n */\nclass BytesWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'bytes_without_length');\n    this.description('Bytes without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value);\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = BytesWithoutLength;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\nconst BytesWithoutLength = require('./BytesWithoutLength');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic content in form of bytes (prepends the length).\n */\nclass BytesWithLength extends AbstractType {\n  /**\n   * Constructor\n   *\n   * @param {string} id\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize = 1, lengthId = 'length', lengthDesc = null) {\n    super(id || `bytes_with_length_${byteSize * 8}`);\n    this.description('Bytes with variable size prepended');\n    this[P_BYTES_FIELD] = new BytesWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8(lengthId, true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16(lengthId, true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32(lengthId, true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n\n    if (lengthDesc !== null) {\n      this[P_LENGTH_FIELD].description(lengthDesc);\n    }\n\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].decodeFromBytes(bc) + this[P_LENGTH_FIELD].encodedSize;\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    this[P_SIZE_ENCODED] = value.length + this[P_LENGTH_FIELD].encodedSize;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(\n      this[P_SIZE_ENCODED] - this[P_LENGTH_FIELD].encodedSize\n    );\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  get lengthField() {\n    return this[P_LENGTH_FIELD];\n  }\n}\n\nmodule.exports = BytesWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CurveType = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special pascal type that can en/decode a curve id.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', true, Endian.LITTLE_ENDIAN);\n    this.description('Key curve id');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurveType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new CurveType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurveType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('@pascalcoin-sbx/common').Util;\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '\"():<>[\\\\]{}'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\n/**\n * Small class that holds, validated and outputs an EPasa ascii string.\n */\nclass Ascii {\n  /**\n   * Constructor\n   *\n   * @param {String|Ascii} value\n   */\n  constructor(value) {\n    if (value instanceof Ascii) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Ascii.validate(value);\n    }\n  }\n\n  /**\n   * Validates an ascii string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (value.charCodeAt(pos) < 32 || value.charCodeAt(pos) > 126) {\n        throw new Error(`Invalid ascii - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value itself.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = Ascii;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst Int16 = require('@pascalcoin-sbx/common').Coding.Core.Int16;\nconst MurmurHash3 = require('murmur-hash').v3;\nconst Ascii = require('./Types/Ascii');\nconst Base58 = require('./Types/Base58');\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_ACCOUNT_NUMBER = Symbol('account_number');\nconst P_ACCOUNT_NAME = Symbol('account_name');\nconst P_PAYLOAD = Symbol('payload');\nconst P_PAYLOAD_TYPE = Symbol('payload_type');\nconst P_PASSWORD = Symbol('password');\n\n/**\n * Represents an EPasa.\n */\nclass EPasa {\n\n  /**\n   * Payload encryption and encoding method not specified.\n   *\n   * @returns {number}\n   */\n  static get NON_DETERMISTIC() {\n    return 0;\n  }\n\n  /**\n   * Unencrypted, public payload.\n   *\n   * @returns {number}\n   */\n  static get ENC_PUBLIC() {\n    return 1;\n  }\n\n  /**\n   * ECIES encrypted using recipient accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_RECEIVER() {\n    return 2;\n  }\n\n  /**\n   * ECIES encrypted using sender accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_SENDER() {\n    return 4;\n  }\n\n  /**\n   * AES encrypted using pwd param\n   *\n   * @returns {number}\n   */\n  static get ENC_PASSWORD() {\n    return 8;\n  }\n\n  /**\n   * Payload data encoded in ASCII\n   *\n   * @returns {number}\n   */\n  static get FORMAT_ASCII() {\n    return 16;\n  }\n\n  /**\n   * Payload data encoded in HEX\n   *\n   * @returns {number}\n   */\n  static get FORMAT_HEX() {\n    return 32;\n  }\n\n  /**\n   * Payload data encoded in Base58\n   *\n   * @returns {number}\n   */\n  static get FORMAT_BASE58() {\n    return 64;\n  }\n\n  /**\n   * E-PASA addressed by account name (not number).\n   *\n   * @returns {number}\n   */\n  static get ADDRESSED_BY_NAME() {\n    return 128;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_ASCII() {\n    return 255;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_ASCII() {\n    return 144;\n  }\n\n  /**\n   * The max payload length for AES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_ASCII() {\n    return 223;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_HEX() {\n    return 510;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_HEX() {\n    return 288;\n  }\n\n  /**\n   * The max payload length for AES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_HEX() {\n    return 446;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_BASE58() {\n    return 348;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_BASE58() {\n    return 196;\n  }\n\n  /**\n   * The max payload length for AES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_BASE58() {\n    return 304;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD_TYPE] = EPasa.NON_DETERMISTIC;\n  }\n\n  /**\n   * Sets the account number.\n   *\n   * @param accountNumber\n   */\n  set accountNumber(accountNumber) {\n    if (this[P_ACCOUNT_NAME] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NUMBER] = new AccountNumber(accountNumber);\n  }\n\n  /**\n   * Gets the account number if set.\n   *\n   * @returns {null|AccountNumber}\n   */\n  get accountNumber() {\n    return this[P_ACCOUNT_NUMBER];\n  }\n\n  /**\n   * Gets the account name if set.\n   *\n   * @returns {null|AccountName}\n   */\n  get accountName() {\n    return this[P_ACCOUNT_NAME];\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an assigned format.\n   */\n  hasFormat() {\n    return (this.isFormatBase58() || this.isFormatAscii() || this.isFormatHex());\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an encryption assigned.\n   */\n  hasEncryption() {\n    return (this.isEncryptionPublic() || this.isEncryptionPassword() ||\n        this.isEncryptionSender() || this.isEncryptionReceiver());\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatBase58() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatAscii() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatHex() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the receivers public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionReceiver() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the senders public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionSender() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is aes.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPassword() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD);\n  }\n\n  /**\n   * Gets a value indicating that there is no encryption (public payloads).\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPublic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is not set.\n   *\n   * @returns {boolean}\n   */\n  isNonDetermistic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.NON_DETERMISTIC) === EPasa.NON_DETERMISTIC);\n  }\n\n  /**\n   * Gets the password of the epasa.\n   *\n   * @returns {null|String}\n   */\n  get password() {\n    return this[P_PASSWORD];\n  }\n\n  /**\n   * Gets the payload of the epasa.\n   *\n   * @returns {null|Payload}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the extended checksum.\n   *\n   * @returns {string}\n   */\n  get checksum() {\n    return EPasa.calculateChecksum(this.compile(true));\n  }\n\n  /**\n   * Sets the account name.\n   *\n   * @param {AccountName} accountName\n   */\n  set accountName(accountName) {\n    if (this[P_ACCOUNT_NUMBER] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NAME] = new AccountName(accountName);\n    this[P_PAYLOAD_TYPE] |= EPasa.ADDRESSED_BY_NAME;\n  }\n\n  /**\n   * Sets the payload.\n   *\n   * @param {BC} payload\n   */\n  set payload(payload) {\n\n    if (!this.hasFormat()) {\n      this.format = EPasa.FORMAT_ASCII;\n    }\n\n    if ((!this.hasFormat() || !this.hasEncryption()) && payload.toString() !== '') {\n      throw new Error('EPasa payloads can only be set when the encryption and format is defined.');\n    }\n\n    if (!(payload instanceof BC)) {\n      if (this.isFormatHex()) {\n        payload = BC.fromHex(payload);\n      } else {\n        payload = BC.fromString(payload);\n      }\n    }\n\n    this.validatePayloadLength(payload);\n    this[P_PAYLOAD] = payload;\n\n    return this;\n  }\n\n  /**\n   * Vaidates the length of an unencrypted payload.\n   *\n   * @param {BC} payload\n   * @returns {boolean}\n   */\n  validatePayloadLength(payload) {\n    // TODO: Oh yes, wanted to be smart, but now im unreadable.\n    let payloadCompare = '';\n    let typeIdent = 'ASCII';\n\n    if (this.isFormatAscii()) {\n      payloadCompare = payload.toString();\n    } else if (this.isFormatHex()) {\n      payloadCompare = payload.toHex();\n      typeIdent = 'HEX';\n    } else if (this.isFormatBase58()) {\n      payloadCompare = payload.toString();\n      typeIdent = 'BASE58';\n    }\n\n    let maxIdent = 'PUBLIC';\n\n    if (this.isEncryptionReceiver() || this.isEncryptionSender()) {\n      maxIdent = 'ECIES';\n    } else if (this.isEncryptionPassword()) {\n      maxIdent = 'AES';\n    }\n\n    if (payloadCompare.length > EPasa[`MAX_${maxIdent}_${typeIdent}`]) {\n      throw new Error(\n        `Invalid payload length ${payloadCompare.length} for ${maxIdent}_${typeIdent}. \n        Max is ${EPasa[`MAX_${maxIdent}_${typeIdent}`]}`\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {String} password\n   */\n  set password(password) {\n    this[P_PASSWORD] = password;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} encryption\n   */\n  set encryption(encryption) {\n    if (encryption === EPasa.ENC_PASSWORD && this[P_PASSWORD] === undefined) {\n      throw new Error('Set password before setting the password encryption flag.');\n    }\n\n    this[P_PAYLOAD_TYPE] |= encryption;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} format\n   */\n  set format(format) {\n    this[P_PAYLOAD_TYPE] |= format;\n  }\n\n  /**\n   * Creates a new E-PASA string.\n   *\n   * @param {Boolean} omitChecksum\n   * @returns {string}\n   */\n  compile(omitChecksum = false) {\n    let data = {\n      account: null,\n      enc_marker_start: null,\n      enc_marker_end: null,\n      payload: ''\n    };\n\n    // determine and validate account info\n    if ((this[P_PAYLOAD_TYPE] & EPasa.ADDRESSED_BY_NAME) === EPasa.ADDRESSED_BY_NAME) {\n      data.account = this[P_ACCOUNT_NAME].toStringEscaped();\n    } else {\n      data.account = this[P_ACCOUNT_NUMBER].toString();\n    }\n\n    // if there is a payload, we need to format it\n    if (this[P_PAYLOAD] !== undefined) {\n      if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX) {\n        data.payload = `0x${this[P_PAYLOAD].toHex().toLowerCase()}`;\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58) {\n        data.payload = new Base58(this[P_PAYLOAD].toString()).toString();\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII) {\n        let asciiPayload = new Ascii(this[P_PAYLOAD].toString()).toStringEscaped();\n\n        if (asciiPayload.length > 0) {\n          data.payload = `\"${asciiPayload}\"`;\n        }\n      }\n\n      // now we need to determine the wanted encryption of the payload.\n      if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC) {\n        data.enc_marker_start = '[';\n        data.enc_marker_end = ']';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER) {\n        data.enc_marker_start = '(';\n        data.enc_marker_end = ')';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER) {\n        data.enc_marker_start = '<';\n        data.enc_marker_end = '>';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD) {\n        data.enc_marker_start = '{';\n        data.enc_marker_end = '}';\n        // append password\n        let password = new Ascii(this[P_PASSWORD]);\n\n        data.payload += `:${password.toStringEscaped()}`;\n      }\n    } else {\n      // no payload, no marker\n      data.payload = '';\n      data.enc_marker_start = '';\n      data.enc_marker_end = '';\n    }\n\n    // combine collected data\n    let epasa = `${data.account}${data.enc_marker_start}${data.payload}${data.enc_marker_end}`;\n\n    // no checksum\n    if (omitChecksum) {\n      return epasa;\n    }\n\n    // calculate the checksum\n    return `${epasa}:${EPasa.calculateChecksum(epasa)}`;\n  }\n\n  /**\n   * Calculates the checksum of the epasa.\n   *\n   * @param {String} ePasaString\n   * @returns {string}\n   */\n  static calculateChecksum(ePasaString) {\n    return new Int16('checksum', true, Endian.LITTLE_ENDIAN)\n      .encodeToBytes(MurmurHash3.x86.hash32(ePasaString) % 65536)\n      .toHex();\n  }\n}\n\nmodule.exports = EPasa;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   * Tests are not performed.\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  /* istanbul ignore next */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (this[P_MD160].length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_KEY].length > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_KEY].length}`\n      );\n    }\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\nconst BN = require('bn.js');\n\nfunction validate64Bit(isUnsigned, value) {\n  if (isUnsigned) {\n    if (value.isNeg()) {\n      throw new Error('64bit value is negative. Only signed allowed.');\n    } else if (value.gt(new BN('18446744073709551615'))) {\n      throw new Error('Invalid unsigned 64 bit value.');\n    }\n  } else if (!isUnsigned) {\n    if (value.gt(new BN('9223372036854775807')) || value.lt(new BN('-9223372036854775808'))) {\n      throw new Error('Invalid signed 64 bit value.');\n    }\n  }\n\n  return value;\n}\n\n/**\n * Field type for 64bit int values using BN.js.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'int64', unsigned, endian);\n    this.description('8byte 64bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 8;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BN}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let value = new BN(BC.from(bc).slice(0, this.encodedSize).buffer, 10, this.endian.toLowerCase());\n\n    if (!this.unsigned) {\n      value = value.fromTwos(64);\n    }\n\n    return validate64Bit(this.unsigned, value);\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {BN} value\n   */\n  encodeToBytes(value) {\n    value = validate64Bit(this.unsigned, value);\n    if (!this.unsigned) {\n      value = value.toTwos(64);\n    }\n\n    return BC.from(value.toBuffer(this.endian.toLowerCase(), this.encodedSize));\n  }\n}\n\nmodule.exports = Int64;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../../BC');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\n\nconst StringWithoutLength = require('./StringWithoutLength');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_STRING_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithLength extends AbstractType {\n\n  constructor(id, byteSize = 1) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('String with size prepended');\n    this[P_STRING_FIELD] = new StringWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8('length', true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].encodedSize + this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc));\n    return this[P_STRING_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE_ENCODED] = value.length;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(this[P_SIZE_ENCODED]);\n\n    return bc.append(this[P_STRING_FIELD].encodeToBytes(value));\n  }\n}\n\nmodule.exports = StringWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write dynamic strings without prepending the length.\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'string_without_length');\n    this.description('Single string value without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).toString();\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value, 'string');\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumberType = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', true, Endian.LITTLE_ENDIAN);\n    this.description('An account number');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNumberType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNumberType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNumberType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n    this.description('Accounts n_operation value.');\n  }\n}\n\nmodule.exports = NOperation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_VALUE = Symbol('value');\n\nconst ALLOWED = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split('');\n\n/**\n * Small class to initialize and validate a base58 value.\n */\nclass Base58 {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof Base58) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Base58.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (ALLOWED.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid base58 - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = {\n  Parser: require('./src/Parser'),\n  EPasa: require('./src/EPasa'),\n  Types: {\n    Ascii: require('./src/Types/Ascii'),\n    Base58: require('./src/Types/Base58')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst EPasa = require('./EPasa');\nconst Ascii = require('./Types/Ascii');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\n/**\n * A small parser for the EPASA format.\n */\nclass Parser {\n  /**\n   * Tries to parse an EPASA string.\n   *\n   * @param {String} ePasaString\n   * @returns {EPasa}\n   */\n  static parse(ePasaString) {\n    let state = {\n      inAccount: true,\n      inPayload: false,\n      inPassword: false,\n      inChecksum: false,\n      checksumIdentFound: false,\n      account: '',\n      payload: '',\n      format: null,\n      encryption: null,\n      checksum: '',\n      password: '',\n      asciiOpen: false,\n      asciiClosed: false,\n      encOpen: false,\n      encClosed: false\n    };\n\n    let position = 0;\n\n    /**\n         * Gets information of the current char in the loop as well as a flag\n         * identifiying an escaped character (position +2) and the next char.\n         *\n         * @param {Boolean} inAccount\n         * @param {Boolean} inPayload\n         * @returns {Object}\n         */\n    const next = function (inAccount, inPayload) {\n      // check if we are at the end\n      if (position > ePasaString.length - 1) {\n        return false;\n      }\n\n      // flag identifying an escaped character\n      let escaped = false;\n\n      if (inAccount) {\n        // account names have special escaping rules\n        escaped = AccountName.isEscape(ePasaString[position], ePasaString[position + 1]);\n      } else if (inPayload) {\n        // payload has special escaping rules\n        escaped = Ascii.isEscape(ePasaString[position], ePasaString[position + 1]);\n      }\n\n      // increment position, if escaped increment twice to skip the escape\n      position++;\n      if (escaped) {\n        position++;\n      }\n\n      return {\n        escaped,\n        char: ePasaString[position - 1],\n        next: ePasaString[position]\n      };\n    };\n\n    // current char info in the loop\n    let curr;\n\n    // loop the epasa string\n    while ((curr = next(state.inAccount, state.inPayload)) !== false) {\n\n      // we are in the account, now check for an payload open identifier\n      // and toggle the position\n      if (state.inAccount) {\n        if (curr.escaped === false && ['[', '(', '{', '<'].indexOf(curr.char) > -1) {\n          state.inAccount = false;\n          state.inPayload = true;\n        }\n      }\n\n      // if we are in the payload, no encryption was determined\n      // and the character is an encryption type open tag\n      if (state.encryption === null && curr.escaped === false && state.inPayload &&\n                ['[', '(', '{', '<'].indexOf(curr.char) > -1\n      ) {\n        if (curr.char === '[') {\n          state.encryption = EPasa.ENC_PUBLIC;\n        } else if (curr.char === '(') {\n          state.encryption = EPasa.ENC_RECEIVER;\n        } else if (curr.char === '<') {\n          state.encryption = EPasa.ENC_SENDER;\n        } else if (curr.char === '{') {\n          state.encryption = EPasa.ENC_PASSWORD;\n        }\n\n        state.encOpen = curr.char;\n        // we omit the character\n        continue;\n      }\n\n      // when we are in the payload or the account and find a \":\" it is an\n      // password identifier but only if its a password encryption, otherwise it identifies the\n      // checksum\n      if (curr.escaped === false && (state.inPayload || state.inAccount) && curr.char === ':') {\n        if (state.encryption === EPasa.ENC_PASSWORD) {\n          state.inPassword = true;\n        } else {\n          state.inPassword = false;\n          state.inChecksum = true;\n          state.inAccount = false;\n          state.checksumIdentFound = true;\n        }\n\n        // we ignore it then\n        continue;\n      }\n\n      // determine the format, a \" identifies ascii, 0x hex, otherwise its probably base58\n      if (curr.escaped === false && curr.char === '\"' && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_ASCII;\n        state.asciiOpen = true;\n        continue;\n      } else if (curr.escaped === false && curr.char === '0' && curr.next === 'x' &&\n                state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_HEX;\n      } else if (curr.escaped === false && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_BASE58;\n      } else if (curr.escaped === false && curr.char === '\"' && state.inPayload &&\n                state.format === EPasa.FORMAT_ASCII) {\n        state.asciiClosed = true;\n        continue;\n      }\n\n      // check closing encryption\n      if (curr.escaped === false && state.inPayload && [']', ')', '}', '>'].indexOf(curr.char) > -1) {\n        state.inPayload = false;\n        state.inChecksum = true;\n        state.encClosed = curr.char;\n        // omit\n        continue;\n      }\n\n      // append to account\n      if (state.inAccount) {\n        state.account += curr.char;\n        continue;\n      }\n\n      // if (state.inPayload && curr.escaped === false && curr.char === ':') {\n      //  state.inPassword = true;\n      // }\n\n      // payload\n      if (state.inPayload && !state.inPassword) {\n        state.payload += curr.char;\n      }\n      // password\n      if (state.inPayload && state.inPassword) {\n        state.password += curr.char;\n      }\n\n      // checksum\n      if (state.inChecksum && curr.char !== ':') {\n        state.checksum += curr.char;\n      }\n    }\n\n    if (state.asciiOpen && !state.asciiClosed) {\n      throw new Error('Invalid EPasa - missing closing ascii');\n    }\n\n    if (state.encOpen !== false && state.encClosed === false) {\n      throw new Error('Invalid EPasa - missing closing encryption identifier');\n    }\n\n    if ((state.encOpen === '[' && state.encClosed !== ']') ||\n            (state.encOpen === '(' && state.encClosed !== ')') ||\n            (state.encOpen === '<' && state.encClosed !== '>') ||\n            (state.encOpen === '{' && state.encClosed !== '}')) {\n      throw new Error('Invalid EPasa - wrong closing encryption identifier');\n    }\n\n    if (state.inChecksum && state.checksum.length < 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too short checksum');\n    }\n\n    if (state.inChecksum && state.checksum.length > 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too long checksum');\n    }\n\n    if (state.format === EPasa.FORMAT_HEX && state.payload.substr(2).length > 0 &&\n            /^[0-9a-f]+$/.test(state.payload.substr(2)) === false) {\n      throw new Error('Invalid EPasa - only lowercase hex allowed.');\n    }\n\n    // create a new epasa and trigger the validation\n    let epasa = new EPasa();\n\n    try {\n      epasa.accountNumber = state.account;\n    } catch (exAccNumber) {\n      try {\n        epasa.accountName = state.account;\n      } catch (exAccName) {\n        throw new Error(\n          `Bad account for epasa: ${exAccNumber.message} - ${exAccName.message}`\n        );\n      }\n    }\n\n    if (state.encryption === EPasa.ENC_PASSWORD) {\n      epasa.password = state.password;\n    }\n\n    if (state.format === EPasa.FORMAT_BASE58 && state.payload !== '') {\n      epasa.format = state.format;\n    }\n    epasa.encryption = state.encryption;\n\n    if (state.format === EPasa.FORMAT_HEX) {\n      epasa.payload = BC.fromHex(state.payload.substr(2));\n    } else if (state.format !== null) {\n      epasa.payload = BC.fromString(state.payload);\n    }\n\n    // validate checksum\n    if (state.checksum !== '' && EPasa.calculateChecksum(epasa.compile(true)) !== state.checksum) {\n      throw new Error('Invalid checksum provided');\n    }\n\n    return epasa;\n  }\n}\n\nmodule.exports = Parser;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AbstractType: require('./AbstractType'),\n  CompositeType: require('./CompositeType'),\n  Repeating: require('./Repeating'),\n  Decissive: require('./Decissive'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    StringWithLength: require('./Core/StringWithLength'),\n    StringWithoutLength: require('./Core/StringWithoutLength'),\n    BytesWithLength: require('./Core/BytesWithLength'),\n    BytesWithoutLength: require('./Core/BytesWithoutLength'),\n    BytesFixedLength: require('./Core/BytesFixedLength')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey'),\n      PrivateKey: require('./Pascal/Keys/PrivateKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    AccountName: require('./Pascal/AccountName'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType'),\n    OperationHash: require('./Pascal/OperationHash')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_REPEAT_LIMIT = Symbol('repeat_limit');\nconst P_REPEAT_MARKER = Symbol('repeat_marker');\nconst P_TYPE = Symbol('type');\n\n/**\n * A Type that itself is made up of multiple other types.\n */\nclass Repeating extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, type, repeatLimit = -1, repeatMarker = null) {\n    super(id || 'repeating');\n    super.description('A type that itself has one repeating type that will ' +\n      'be written / read until the limit is reached or data is empty.');\n    this[P_TYPE] = type;\n    this[P_REPEAT_LIMIT] = repeatLimit;\n    this[P_REPEAT_MARKER] = repeatMarker;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let result = [];\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    let limit = this[P_REPEAT_MARKER] !== null ? all[this[P_REPEAT_MARKER]] : this[P_REPEAT_LIMIT];\n    let counter = limit;\n\n    while ((limit > -1 && counter > 0) || (limit === -1 && bc.length > offset)) {\n      const decoded = this[P_TYPE].decodeFromBytes(bc.slice(offset));\n\n      result.push(decoded);\n      offset += this[P_TYPE].encodedSize;\n      counter--;\n    }\n\n    this[P_SIZE_ENCODED] = offset;\n\n    return result;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(arr) {\n    let bc = BC.empty();\n\n    arr.forEach((item, idx) => {\n      if (idx >= this[P_REPEAT_LIMIT] && this[P_REPEAT_LIMIT] > -1) {\n        return;\n      }\n      bc = bc.append(this[P_TYPE].encodeToBytes(item));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  get repeatingType() {\n    return this[P_TYPE];\n  }\n}\n\nmodule.exports = Repeating;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CompositeType = require('./CompositeType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_SUBTYPE_RESOLVER = Symbol('subtype_resolver');\nconst P_MARKER_FIELD = Symbol('marker_field');\n\n/**\n * A Type that itself is made up of multiple other types. The types are selected dynamically\n * depending on the given resolver.\n */\nclass Decissive extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor(id, markerField, subTypeResolver) {\n    super(id || 'decissive');\n    super.description('A type that itself has many sub types but only some are triggere based on a marker.');\n    this[P_SUBTYPE_RESOLVER] = subTypeResolver;\n    this[P_MARKER_FIELD] = markerField;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n\n    this[P_SIZE_ENCODED] = subType.encodedSize;\n    return subType.decodeFromBytes(bc, options, all);\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray, all) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n    let bc = subType.encodeToBytes(objOrArray);\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = Decissive;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to encode and decode bytes with a fixed length.\n */\nclass BytesFixedLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Number} length\n   */\n  constructor(id, length) {\n    super(id || 'bytes_fixed_length_' + length);\n    this.description('Bytes with a fixed length of ' + length);\n    this[P_SIZE] = length;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE];\n  }\n\n  /**\n   * Returns the values of the given bc in the configured length.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    return value.slice(0, this[P_SIZE]);\n  }\n}\n\nmodule.exports = BytesFixedLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst BytesWithoutLength = require('../../Core/BytesWithoutLength');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PublicKeyType = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A Public Key value.\n */\nclass PublicKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} omitXYLenghts\n   */\n  constructor(id = null, omitXYLenghts = false) {\n    super(id || 'public_key');\n    this.addSubType(new Curve('curve'));\n\n    // oh come on..\n    if (omitXYLenghts) {\n      this.addSubType(\n        new BytesWithoutLength('x')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(new BytesWithoutLength('y'));\n    } else {\n      this.addSubType(\n        new BytesWithLength('x', 2, 'x_length', 'Length of X value')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(\n        new BytesWithLength('y', 2, 'y_length', 'Length of Y value')\n          .description('The X value of the public key.')\n      );\n    }\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PublicKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PublicKeyType(decoded.x, decoded.y, decoded.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst PrivateKeyType = require('./../../../../src/Types/Keys/PrivateKey');\n\n/**\n * A coder for a private key.\n */\nclass PrivateKey extends CompositeType {\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'private_key');\n    this.addSubType(new Curve('curve'));\n    this.addSubType(new BytesWithLength('key', 2));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PrivateKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PrivateKeyType(decoded.key, decoded.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {PrivateKeyType} value\n   * @returns {PrivateKeyType}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNameType = require('./../../Types/AccountName');\nconst StringWithLength = require('../Core/StringWithLength');\n\n/**\n * A pascal related type that can de/encode an account name.\n */\nclass AccountName extends StringWithLength {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null, byteSize = 2) {\n    super(id || 'account_name', byteSize);\n    this.description('An account name');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNameType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNameType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNameType} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.toString());\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Int64 = require('./../Core/Int64');\nconst CurrencyType = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends Int64 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'currency', true, Endian.LITTLE_ENDIAN);\n    this.description('A type for currency values.');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurrencyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return CurrencyType.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurrencyType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.bn);\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_INT_TYPE = Symbol('int_type');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize) {\n    super(id || `optype_int${byteSize * 8}`);\n    switch (byteSize) {\n      case 1:\n        this[P_INT_TYPE] = new Int8('OpType[Int8]', true);\n        break;\n      case 2:\n        this[P_INT_TYPE] = new Int16('OpType[Int16]', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_INT_TYPE] = new Int32('OpType[Int32]', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n    this.description(`Operation type in ${byteSize * 8} bits`);\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_INT_TYPE].encodedSize;\n  }\n\n  /**\n   * Decodes and returns the optype.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Number}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return this[P_INT_TYPE].decodeFromBytes(bc);\n  }\n\n  /**\n   * Encodes the given optype to bytes.\n   *\n   * @param {Number} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    return this[P_INT_TYPE].encodeToBytes(value);\n  }\n}\n\nmodule.exports = OpType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst CompositeType = require('./../CompositeType');\nconst Int32 = require('./../Core/Int32');\nconst AccountNumber = require('./AccountNumber');\nconst BytesWithoutLength = require('./../Core/BytesWithoutLength');\nconst NOperation = require('./NOperation');\nconst OperationHashType = require('./../../Types/OperationHash');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass OperationHash extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'ophash');\n    this.description('A pascalCoin operation hash');\n\n    this.addSubType(new Int32('block', true, Endian.LITTLE_ENDIAN));\n    this.addSubType(new AccountNumber('account'));\n    this.addSubType(new NOperation('nOperation', 4));\n    this.addSubType(new BytesWithoutLength('md160'));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {OperationHash}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new OperationHashType(decoded.block, decoded.account, decoded.nOperation, decoded.md160);\n  }\n\n  /**\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {OperationHash} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = OperationHash;\n","'use strict';\n\nmodule.exports =  {\n  v3: require('./lib/v3')\n};\n\n// -- Test Code ---------------------------------------------------------\nif (require.main === module) {\n  (function () {\n    console.log(module.exports.v3);\n  })();\n}\n","'use strict';\n\nmodule.exports = require('./murmur');\n","// +----------------------------------------------------------------------+\n// | murmurHash3.js v2.1.2 (http://github.com/karanlyons/murmurHash.js)   |\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012 Karan Lyons                                       |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n\n;(function (root, undefined) {\n  'use strict';\n\n  // Create a local object that'll be exported or referenced globally.\n  var library = {\n    'version': '2.1.2',\n    'x86': {},\n    'x64': {}\n  };\n\n\n\n\n  // PRIVATE FUNCTIONS\n  // -----------------\n\n  function _x86Multiply(m, n) {\n    //\n    // Given two 32bit ints, returns the two multiplied together as a\n    // 32bit int.\n    //\n\n    return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n  }\n\n\n  function _x86Rotl(m, n) {\n    //\n    // Given a 32bit int and an int representing a number of bit positions,\n    // returns the 32bit int rotated left by that number of positions.\n    //\n\n    return (m << n) | (m >>> (32 - n));\n  }\n\n\n  function _x86Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x86 mix of that block.\n    //\n\n    h ^= h >>> 16;\n    h  = _x86Multiply(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h  = _x86Multiply(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n\n    return h;\n  }\n\n\n  function _x64Add(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // added together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Multiply(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // multiplied together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Rotl(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) rotated left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 32) {\n      return [m[1], m[0]];\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n    }\n\n    else {\n      n -= 32;\n      return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n    }\n  }\n\n\n  function _x64LeftShift(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) shifted left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 0) {\n      return m;\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n    }\n\n    else {\n      return [m[1] << (n - 32), 0];\n    }\n  }\n\n\n  function _x64Xor(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // xored together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n\n\n  function _x64Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x64 mix of that block.\n    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n    // only place where we need to right shift 64bit ints.)\n    //\n\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n\n    return h;\n  }\n\n\n\n\n  // PUBLIC FUNCTIONS\n  // ----------------\n\n  library.x86.hash32 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 32 bit hash\n    // using the x86 flavor of MurmurHash3, as an unsigned int.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 4;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n\n    var k1 = 0;\n\n    var c1 = 0xcc9e2d51;\n    var c2 = 0x1b873593;\n\n    for (var i = 0; i < bytes; i = i + 4) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n\n      h1 ^= k1;\n      h1 = _x86Rotl(h1, 13);\n      h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n      case 1:\n        k1 ^= (key.charCodeAt(i) & 0xff);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 = _x86Fmix(h1);\n\n    return h1 >>> 0;\n  };\n\n\n  library.x86.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n    var h2 = seed;\n    var h3 = seed;\n    var h4 = seed;\n\n    var k1 = 0;\n    var k2 = 0;\n    var k3 = 0;\n    var k4 = 0;\n\n    var c1 = 0x239b961b;\n    var c2 = 0xab0e9789;\n    var c3 = 0x38b34ae5;\n    var c4 = 0xa1e38b93;\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n      k2 = ((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24);\n      k3 = ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24);\n      k4 = ((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n\n      h1 = _x86Rotl(h1, 19);\n      h1 += h2;\n      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n\n      h2 = _x86Rotl(h2, 17);\n      h2 += h3;\n      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n\n      h3 = _x86Rotl(h3, 15);\n      h3 += h4;\n      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n\n      h4 = _x86Rotl(h4, 13);\n      h4 += h1;\n      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    }\n\n    k1 = 0;\n    k2 = 0;\n    k3 = 0;\n    k4 = 0;\n\n    switch (remainder) {\n      case 15:\n        k4 ^= key.charCodeAt(i + 14) << 16;\n\n      case 14:\n        k4 ^= key.charCodeAt(i + 13) << 8;\n\n      case 13:\n        k4 ^= key.charCodeAt(i + 12);\n        k4 = _x86Multiply(k4, c4);\n        k4 = _x86Rotl(k4, 18);\n        k4 = _x86Multiply(k4, c1);\n        h4 ^= k4;\n\n      case 12:\n        k3 ^= key.charCodeAt(i + 11) << 24;\n\n      case 11:\n        k3 ^= key.charCodeAt(i + 10) << 16;\n\n      case 10:\n        k3 ^= key.charCodeAt(i + 9) << 8;\n\n      case 9:\n        k3 ^= key.charCodeAt(i + 8);\n        k3 = _x86Multiply(k3, c3);\n        k3 = _x86Rotl(k3, 17);\n        k3 = _x86Multiply(k3, c4);\n        h3 ^= k3;\n\n      case 8:\n        k2 ^= key.charCodeAt(i + 7) << 24;\n\n      case 7:\n        k2 ^= key.charCodeAt(i + 6) << 16;\n\n      case 6:\n        k2 ^= key.charCodeAt(i + 5) << 8;\n\n      case 5:\n        k2 ^= key.charCodeAt(i + 4);\n        k2 = _x86Multiply(k2, c2);\n        k2 = _x86Rotl(k2, 16);\n        k2 = _x86Multiply(k2, c3);\n        h2 ^= k2;\n\n      case 4:\n        k1 ^= key.charCodeAt(i + 3) << 24;\n\n      case 3:\n        k1 ^= key.charCodeAt(i + 2) << 16;\n\n      case 2:\n        k1 ^= key.charCodeAt(i + 1) << 8;\n\n      case 1:\n        k1 ^= key.charCodeAt(i);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h2 ^= key.length;\n    h3 ^= key.length;\n    h4 ^= key.length;\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    h1 = _x86Fmix(h1);\n    h2 = _x86Fmix(h2);\n    h3 = _x86Fmix(h3);\n    h4 = _x86Fmix(h4);\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n  };\n\n\n  library.x64.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = [((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24), ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24)];\n      k2 = [((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24), ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24)];\n\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n\n      h1 = _x64Rotl(h1, 27);\n      h1 = _x64Add(h1, h2);\n      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n\n      h2 = _x64Rotl(h2, 31);\n      h2 = _x64Add(h2, h1);\n      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n\n    k1 = [0, 0];\n    k2 = [0, 0];\n\n    switch(remainder) {\n      case 15:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n\n      case 14:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n\n      case 13:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n\n      case 12:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n\n      case 11:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n\n      case 10:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n\n      case 9:\n        k2 = _x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = _x64Multiply(k2, c2);\n        k2 = _x64Rotl(k2, 33);\n        k2 = _x64Multiply(k2, c1);\n        h2 = _x64Xor(h2, k2);\n\n      case 8:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n\n      case 7:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n\n      case 6:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n\n      case 5:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n\n      case 4:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n\n      case 3:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n\n      case 2:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n\n      case 1:\n        k1 = _x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = _x64Multiply(k1, c1);\n        k1 = _x64Rotl(k1, 31);\n        k1 = _x64Multiply(k1, c2);\n        h1 = _x64Xor(h1, k1);\n    }\n\n    h1 = _x64Xor(h1, [0, key.length]);\n    h2 = _x64Xor(h2, [0, key.length]);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    h1 = _x64Fmix(h1);\n    h2 = _x64Fmix(h2);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n  };\n\n\n\n\n  // INITIALIZATION\n  // --------------\n\n  // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n  // of the global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = library;\n    }\n\n    exports.murmurHash3 = library;\n  }\n\n  else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return library;\n    });\n  }\n\n  else {\n    // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n    // original value. Returns a reference to the library object, to allow\n    // it to be used under a different name.\n    library._murmurHash3 = root.murmurHash3\n\n    library.noConflict = function () {\n      root.murmurHash3 = library._murmurHash3;\n      library._murmurHash3 = undefined;\n      library.noConflict = undefined;\n\n      return library;\n    };\n\n    root.murmurHash3 = library;\n  }\n})(this);\n"],"sourceRoot":""}