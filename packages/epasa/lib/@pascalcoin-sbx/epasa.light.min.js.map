{"version":3,"sources":["webpack://@pascalcoin-sbx/epasa/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/epasa/webpack/bootstrap","webpack://@pascalcoin-sbx/epasa/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/epasa/./src/Types/Ascii.js","webpack://@pascalcoin-sbx/epasa/./src/EPasa.js","webpack://@pascalcoin-sbx/epasa/./src/Types/Base58.js","webpack://@pascalcoin-sbx/epasa/./index.js","webpack://@pascalcoin-sbx/epasa/./src/Parser.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/index.js","webpack://@pascalcoin-sbx/epasa/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/index.js","webpack://@pascalcoin-sbx/epasa//home/ben/Code/crypto/pascalcoin/untitled/node_modules/murmur-hash/lib/v3/murmur.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Util","P_VALUE","CHARS_TO_ESCAPE","split","REGEX_TO_ESCAPE","map","escapeRegex","join","Ascii","constructor","toString","validate","[object Object]","length","pos","charCodeAt","Error","toStringEscaped","replace","RegExp","c1","c2","indexOf","AccountNumber","Types","AccountName","MurmurHash3","v3","Base58","BC","P_ACCOUNT_NUMBER","P_ACCOUNT_NAME","P_PAYLOAD","P_PAYLOAD_TYPE","P_PASSWORD","EPasa","NON_DETERMISTIC","ENC_PUBLIC","ENC_RECEIVER","ENC_SENDER","ENC_PASSWORD","FORMAT_ASCII","FORMAT_HEX","FORMAT_BASE58","ADDRESSED_BY_NAME","MAX_PUBLIC_ASCII","MAX_ECIES_ASCII","MAX_AES_ASCII","MAX_PUBLIC_HEX","MAX_ECIES_HEX","MAX_AES_HEX","MAX_PUBLIC_BASE58","MAX_ECIES_BASE58","MAX_AES_BASE58","accountNumber","undefined","accountName","hasFormat","isFormatBase58","isFormatAscii","isFormatHex","hasEncryption","isEncryptionPublic","isEncryptionPassword","isEncryptionSender","isEncryptionReceiver","isNonDetermistic","password","payload","checksum","calculateChecksum","compile","format","fromHex","fromString","validatePayloadLength","payloadCompare","typeIdent","toHex","maxIdent","encryption","omitChecksum","data","account","enc_marker_start","enc_marker_end","toLowerCase","asciiPayload","epasa","ePasaString","fromInt","x86","hash32","switchEndian","ALLOWED","Parser","state","inAccount","inPayload","inPassword","inChecksum","checksumIdentFound","asciiOpen","asciiClosed","encOpen","encClosed","position","next","escaped","isEscape","char","curr","substr","test","exAccNumber","exAccName","message","console","log","webpackPolyfill","deprecate","paths","children","library","version","x64","_x86Multiply","_x86Rotl","_x86Fmix","h","_x64Add","_x64Multiply","_x64Rotl","_x64LeftShift","_x64Xor","_x64Fmix","seed","remainder","bytes","h1","k1","hash128","h2","h3","h4","k2","k3","k4","c3","c4","slice","murmurHash3"],"mappings":"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","file":"@pascalcoin-sbx/epasa.light.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/epasa\", [\"@pascalcoin-sbx/common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/epasa\"] = factory(require(\"@pascalcoin-sbx/common\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/epasa\"] = factory(root[\"@pascalcoin-sbx/common\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('@pascalcoin-sbx/common').Util;\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '\"():<>[\\\\]{}'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\n/**\n * Small class that holds, validated and outputs an EPasa ascii string.\n */\nclass Ascii {\n  /**\n   * Constructor\n   *\n   * @param {String|Ascii} value\n   */\n  constructor(value) {\n    if (value instanceof Ascii) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Ascii.validate(value);\n    }\n  }\n\n  /**\n   * Validates an ascii string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (value.charCodeAt(pos) < 32 || value.charCodeAt(pos) > 126) {\n        throw new Error(`Invalid ascii - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value itself.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = Ascii;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\nconst MurmurHash3 = require('murmur-hash').v3;\nconst Ascii = require('./Types/Ascii');\nconst Base58 = require('./Types/Base58');\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_ACCOUNT_NUMBER = Symbol('account_number');\nconst P_ACCOUNT_NAME = Symbol('account_name');\nconst P_PAYLOAD = Symbol('payload');\nconst P_PAYLOAD_TYPE = Symbol('payload_type');\nconst P_PASSWORD = Symbol('password');\n\n/**\n * Represents an EPasa.\n */\nclass EPasa {\n\n  /**\n   * Payload encryption and encoding method not specified.\n   *\n   * @returns {number}\n   */\n  static get NON_DETERMISTIC() {\n    return 0;\n  }\n\n  /**\n   * Unencrypted, public payload.\n   *\n   * @returns {number}\n   */\n  static get ENC_PUBLIC() {\n    return 1;\n  }\n\n  /**\n   * ECIES encrypted using recipient accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_RECEIVER() {\n    return 2;\n  }\n\n  /**\n   * ECIES encrypted using sender accounts public key.\n   *\n   * @returns {number}\n   */\n  static get ENC_SENDER() {\n    return 4;\n  }\n\n  /**\n   * AES encrypted using pwd param\n   *\n   * @returns {number}\n   */\n  static get ENC_PASSWORD() {\n    return 8;\n  }\n\n  /**\n   * Payload data encoded in ASCII\n   *\n   * @returns {number}\n   */\n  static get FORMAT_ASCII() {\n    return 16;\n  }\n\n  /**\n   * Payload data encoded in HEX\n   *\n   * @returns {number}\n   */\n  static get FORMAT_HEX() {\n    return 32;\n  }\n\n  /**\n   * Payload data encoded in Base58\n   *\n   * @returns {number}\n   */\n  static get FORMAT_BASE58() {\n    return 64;\n  }\n\n  /**\n   * E-PASA addressed by account name (not number).\n   *\n   * @returns {number}\n   */\n  static get ADDRESSED_BY_NAME() {\n    return 128;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_ASCII() {\n    return 255;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_ASCII() {\n    return 144;\n  }\n\n  /**\n   * The max payload length for AES payloads in ASCII form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_ASCII() {\n    return 223;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_HEX() {\n    return 510;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_HEX() {\n    return 288;\n  }\n\n  /**\n   * The max payload length for AES payloads in HEX form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_HEX() {\n    return 446;\n  }\n\n  /**\n   * The max payload length for PUBLIC payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_PUBLIC_BASE58() {\n    return 348;\n  }\n\n  /**\n   * The max payload length for ECIES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_ECIES_BASE58() {\n    return 196;\n  }\n\n  /**\n   * The max payload length for AES payloads in BASE58 form.\n   *\n   * @returns {number}\n   */\n  static get MAX_AES_BASE58() {\n    return 304;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD_TYPE] = EPasa.NON_DETERMISTIC;\n  }\n\n  /**\n   * Sets the account number.\n   *\n   * @param accountNumber\n   */\n  set accountNumber(accountNumber) {\n    if (this[P_ACCOUNT_NAME] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NUMBER] = new AccountNumber(accountNumber);\n  }\n\n  /**\n   * Gets the account number if set.\n   *\n   * @returns {null|AccountNumber}\n   */\n  get accountNumber() {\n    return this[P_ACCOUNT_NUMBER];\n  }\n\n  /**\n   * Gets the account name if set.\n   *\n   * @returns {null|AccountName}\n   */\n  get accountName() {\n    return this[P_ACCOUNT_NAME];\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an assigned format.\n   */\n  hasFormat() {\n    return (this.isFormatBase58() || this.isFormatAscii() || this.isFormatHex());\n  }\n\n  /**\n   * Gets a value indicating whether the epasa has an encryption assigned.\n   */\n  hasEncryption() {\n    return (this.isEncryptionPublic() || this.isEncryptionPassword() ||\n        this.isEncryptionSender() || this.isEncryptionReceiver());\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatBase58() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatAscii() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII);\n  }\n\n  /**\n   * Gets a value indicating the the payload format is base58.\n   *\n   * @returns {boolean}\n   */\n  isFormatHex() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the receivers public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionReceiver() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is the senders public key.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionSender() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is aes.\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPassword() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD);\n  }\n\n  /**\n   * Gets a value indicating that there is no encryption (public payloads).\n   *\n   * @returns {boolean}\n   */\n  isEncryptionPublic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC);\n  }\n\n  /**\n   * Gets a value indicating that the encryption method is not set.\n   *\n   * @returns {boolean}\n   */\n  isNonDetermistic() {\n    return ((this[P_PAYLOAD_TYPE] & EPasa.NON_DETERMISTIC) === EPasa.NON_DETERMISTIC);\n  }\n\n  /**\n   * Gets the password of the epasa.\n   *\n   * @returns {null|String}\n   */\n  get password() {\n    return this[P_PASSWORD];\n  }\n\n  /**\n   * Gets the payload of the epasa.\n   *\n   * @returns {null|Payload}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the extended checksum.\n   *\n   * @returns {string}\n   */\n  get checksum() {\n    return EPasa.calculateChecksum(this.compile(true));\n  }\n\n  /**\n   * Sets the account name.\n   *\n   * @param {AccountName} accountName\n   */\n  set accountName(accountName) {\n    if (this[P_ACCOUNT_NUMBER] !== undefined) {\n      throw new Error('Either set the account name or the account number. Both is not possible.');\n    }\n\n    this[P_ACCOUNT_NAME] = new AccountName(accountName);\n    this[P_PAYLOAD_TYPE] |= EPasa.ADDRESSED_BY_NAME;\n  }\n\n  /**\n   * Sets the payload.\n   *\n   * @param {BC} payload\n   */\n  set payload(payload) {\n\n    if (!this.hasFormat()) {\n      this.format = EPasa.FORMAT_ASCII;\n    }\n\n    if ((!this.hasFormat() || !this.hasEncryption()) && payload.toString() !== '') {\n      throw new Error('EPasa payloads can only be set when the encryption and format is defined.');\n    }\n\n    if (!(payload instanceof BC)) {\n      if (this.isFormatHex()) {\n        payload = BC.fromHex(payload);\n      } else {\n        payload = BC.fromString(payload);\n      }\n    }\n\n    this.validatePayloadLength(payload);\n    this[P_PAYLOAD] = payload;\n\n    return this;\n  }\n\n  /**\n   * Vaidates the length of an unencrypted payload.\n   *\n   * @param {BC} payload\n   * @returns {boolean}\n   */\n  validatePayloadLength(payload) {\n    // TODO: Oh yes, wanted to be smart, but now im unreadable.\n    let payloadCompare = '';\n    let typeIdent = 'ASCII';\n\n    if (this.isFormatAscii()) {\n      payloadCompare = payload.toString();\n    } else if (this.isFormatHex()) {\n      payloadCompare = payload.toHex();\n      typeIdent = 'HEX';\n    } else if (this.isFormatBase58()) {\n      payloadCompare = payload.toString();\n      typeIdent = 'BASE58';\n    }\n\n    let maxIdent = 'PUBLIC';\n\n    if (this.isEncryptionReceiver() || this.isEncryptionSender()) {\n      maxIdent = 'ECIES';\n    } else if (this.isEncryptionPassword()) {\n      maxIdent = 'AES';\n    }\n\n    if (payloadCompare.length > EPasa[`MAX_${maxIdent}_${typeIdent}`]) {\n      throw new Error(\n        `Invalid payload length ${payloadCompare.length} for ${maxIdent}_${typeIdent}. \n        Max is ${EPasa[`MAX_${maxIdent}_${typeIdent}`]}`\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {String} password\n   */\n  set password(password) {\n    this[P_PASSWORD] = password;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} encryption\n   */\n  set encryption(encryption) {\n    if (encryption === EPasa.ENC_PASSWORD && this[P_PASSWORD] === undefined) {\n      throw new Error('Set password before setting the password encryption flag.');\n    }\n\n    this[P_PAYLOAD_TYPE] |= encryption;\n  }\n\n  /**\n   * Sets the payload\n   *\n   * @param {Number} format\n   */\n  set format(format) {\n    this[P_PAYLOAD_TYPE] |= format;\n  }\n\n  /**\n   * Creates a new E-PASA string.\n   *\n   * @param {Boolean} omitChecksum\n   * @returns {string}\n   */\n  compile(omitChecksum = false) {\n    let data = {\n      account: null,\n      enc_marker_start: null,\n      enc_marker_end: null,\n      payload: ''\n    };\n\n    // determine and validate account info\n    if ((this[P_PAYLOAD_TYPE] & EPasa.ADDRESSED_BY_NAME) === EPasa.ADDRESSED_BY_NAME) {\n      data.account = this[P_ACCOUNT_NAME].toStringEscaped();\n    } else {\n      data.account = this[P_ACCOUNT_NUMBER].toString();\n    }\n\n    // if there is a payload, we need to format it\n    if (this[P_PAYLOAD] !== undefined) {\n      if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_HEX) === EPasa.FORMAT_HEX) {\n        data.payload = `0x${this[P_PAYLOAD].toHex().toLowerCase()}`;\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_BASE58) === EPasa.FORMAT_BASE58) {\n        data.payload = new Base58(this[P_PAYLOAD].toString()).toString();\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.FORMAT_ASCII) === EPasa.FORMAT_ASCII) {\n        let asciiPayload = new Ascii(this[P_PAYLOAD].toString()).toStringEscaped();\n\n        if (asciiPayload.length > 0) {\n          data.payload = `\"${asciiPayload}\"`;\n        }\n      }\n\n      // now we need to determine the wanted encryption of the payload.\n      if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PUBLIC) === EPasa.ENC_PUBLIC) {\n        data.enc_marker_start = '[';\n        data.enc_marker_end = ']';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_RECEIVER) === EPasa.ENC_RECEIVER) {\n        data.enc_marker_start = '(';\n        data.enc_marker_end = ')';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_SENDER) === EPasa.ENC_SENDER) {\n        data.enc_marker_start = '<';\n        data.enc_marker_end = '>';\n      } else if ((this[P_PAYLOAD_TYPE] & EPasa.ENC_PASSWORD) === EPasa.ENC_PASSWORD) {\n        data.enc_marker_start = '{';\n        data.enc_marker_end = '}';\n        // append password\n        let password = new Ascii(this[P_PASSWORD]);\n\n        data.payload += `:${password.toStringEscaped()}`;\n      }\n    } else {\n      // no payload, no marker\n      data.payload = '';\n      data.enc_marker_start = '';\n      data.enc_marker_end = '';\n    }\n\n    // combine collected data\n    let epasa = `${data.account}${data.enc_marker_start}${data.payload}${data.enc_marker_end}`;\n\n    // no checksum\n    if (omitChecksum) {\n      return epasa;\n    }\n\n    // calculate the checksum\n    return `${epasa}:${EPasa.calculateChecksum(epasa)}`;\n  }\n\n  /**\n   * Calculates the checksum of the epasa.\n   *\n   * @param {String} ePasaString\n   * @returns {string}\n   */\n  static calculateChecksum(ePasaString) {\n    return BC.fromInt(MurmurHash3.x86.hash32(ePasaString) % 65536)\n      .switchEndian()\n      .toHex(true);\n  }\n}\n\nmodule.exports = EPasa;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_VALUE = Symbol('value');\n\nconst ALLOWED = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'.split('');\n\n/**\n * Small class to initialize and validate a base58 value.\n */\nclass Base58 {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof Base58) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = Base58.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n   */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (ALLOWED.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid base58 - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = {\n  Parser: require('./src/Parser'),\n  EPasa: require('./src/EPasa'),\n  Types: {\n    Ascii: require('./src/Types/Ascii'),\n    Base58: require('./src/Types/Base58')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst EPasa = require('./EPasa');\nconst Ascii = require('./Types/Ascii');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\n/**\n * A small parser for the EPASA format.\n */\nclass Parser {\n  /**\n   * Tries to parse an EPASA string.\n   *\n   * @param {String} ePasaString\n   * @returns {EPasa}\n   */\n  static parse(ePasaString) {\n    let state = {\n      inAccount: true,\n      inPayload: false,\n      inPassword: false,\n      inChecksum: false,\n      checksumIdentFound: false,\n      account: '',\n      payload: '',\n      format: null,\n      encryption: null,\n      checksum: '',\n      password: '',\n      asciiOpen: false,\n      asciiClosed: false,\n      encOpen: false,\n      encClosed: false\n    };\n\n    let position = 0;\n\n    /**\n         * Gets information of the current char in the loop as well as a flag\n         * identifiying an escaped character (position +2) and the next char.\n         *\n         * @param {Boolean} inAccount\n         * @param {Boolean} inPayload\n         * @returns {Object}\n         */\n    const next = function (inAccount, inPayload) {\n      // check if we are at the end\n      if (position > ePasaString.length - 1) {\n        return false;\n      }\n\n      // flag identifying an escaped character\n      let escaped = false;\n\n      if (inAccount) {\n        // account names have special escaping rules\n        escaped = AccountName.isEscape(ePasaString[position], ePasaString[position + 1]);\n      } else if (inPayload) {\n        // payload has special escaping rules\n        escaped = Ascii.isEscape(ePasaString[position], ePasaString[position + 1]);\n      }\n\n      // increment position, if escaped increment twice to skip the escape\n      position++;\n      if (escaped) {\n        position++;\n      }\n\n      return {\n        escaped,\n        char: ePasaString[position - 1],\n        next: ePasaString[position]\n      };\n    };\n\n    // current char info in the loop\n    let curr;\n\n    // loop the epasa string\n    while ((curr = next(state.inAccount, state.inPayload)) !== false) {\n\n      // we are in the account, now check for an payload open identifier\n      // and toggle the position\n      if (state.inAccount) {\n        if (curr.escaped === false && ['[', '(', '{', '<'].indexOf(curr.char) > -1) {\n          state.inAccount = false;\n          state.inPayload = true;\n        }\n      }\n\n      // if we are in the payload, no encryption was determined\n      // and the character is an encryption type open tag\n      if (state.encryption === null && curr.escaped === false && state.inPayload &&\n                ['[', '(', '{', '<'].indexOf(curr.char) > -1\n      ) {\n        if (curr.char === '[') {\n          state.encryption = EPasa.ENC_PUBLIC;\n        } else if (curr.char === '(') {\n          state.encryption = EPasa.ENC_RECEIVER;\n        } else if (curr.char === '<') {\n          state.encryption = EPasa.ENC_SENDER;\n        } else if (curr.char === '{') {\n          state.encryption = EPasa.ENC_PASSWORD;\n        }\n\n        state.encOpen = curr.char;\n        // we omit the character\n        continue;\n      }\n\n      // when we are in the payload or the account and find a \":\" it is an\n      // password identifier but only if its a password encryption, otherwise it identifies the\n      // checksum\n      if (curr.escaped === false && (state.inPayload || state.inAccount) && curr.char === ':') {\n        if (state.encryption === EPasa.ENC_PASSWORD) {\n          state.inPassword = true;\n        } else {\n          state.inPassword = false;\n          state.inChecksum = true;\n          state.inAccount = false;\n          state.checksumIdentFound = true;\n        }\n\n        // we ignore it then\n        continue;\n      }\n\n      // determine the format, a \" identifies ascii, 0x hex, otherwise its probably base58\n      if (curr.escaped === false && curr.char === '\"' && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_ASCII;\n        state.asciiOpen = true;\n        continue;\n      } else if (curr.escaped === false && curr.char === '0' && curr.next === 'x' &&\n                state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_HEX;\n      } else if (curr.escaped === false && state.inPayload && state.format === null) {\n        state.format = EPasa.FORMAT_BASE58;\n      } else if (curr.escaped === false && curr.char === '\"' && state.inPayload &&\n                state.format === EPasa.FORMAT_ASCII) {\n        state.asciiClosed = true;\n        continue;\n      }\n\n      // check closing encryption\n      if (curr.escaped === false && state.inPayload && [']', ')', '}', '>'].indexOf(curr.char) > -1) {\n        state.inPayload = false;\n        state.inChecksum = true;\n        state.encClosed = curr.char;\n        // omit\n        continue;\n      }\n\n      // append to account\n      if (state.inAccount) {\n        state.account += curr.char;\n        continue;\n      }\n\n      // if (state.inPayload && curr.escaped === false && curr.char === ':') {\n      //  state.inPassword = true;\n      // }\n\n      // payload\n      if (state.inPayload && !state.inPassword) {\n        state.payload += curr.char;\n      }\n      // password\n      if (state.inPayload && state.inPassword) {\n        state.password += curr.char;\n      }\n\n      // checksum\n      if (state.inChecksum && curr.char !== ':') {\n        state.checksum += curr.char;\n      }\n    }\n\n    if (state.asciiOpen && !state.asciiClosed) {\n      throw new Error('Invalid EPasa - missing closing ascii');\n    }\n\n    if (state.encOpen !== false && state.encClosed === false) {\n      throw new Error('Invalid EPasa - missing closing encryption identifier');\n    }\n\n    if ((state.encOpen === '[' && state.encClosed !== ']') ||\n            (state.encOpen === '(' && state.encClosed !== ')') ||\n            (state.encOpen === '<' && state.encClosed !== '>') ||\n            (state.encOpen === '{' && state.encClosed !== '}')) {\n      throw new Error('Invalid EPasa - wrong closing encryption identifier');\n    }\n\n    if (state.inChecksum && state.checksum.length < 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too short checksum');\n    }\n\n    if (state.inChecksum && state.checksum.length > 4 && state.checksumIdentFound) {\n      throw new Error('Invalid EPasa - missing or too long checksum');\n    }\n\n    if (state.format === EPasa.FORMAT_HEX && state.payload.substr(2).length > 0 &&\n            /^[0-9a-f]+$/.test(state.payload.substr(2)) === false) {\n      throw new Error('Invalid EPasa - only lowercase hex allowed.');\n    }\n\n    // create a new epasa and trigger the validation\n    let epasa = new EPasa();\n\n    try {\n      epasa.accountNumber = state.account;\n    } catch (exAccNumber) {\n      try {\n        epasa.accountName = state.account;\n      } catch (exAccName) {\n        throw new Error(\n          `Bad account for epasa: ${exAccNumber.message} - ${exAccName.message}`\n        );\n      }\n    }\n\n    if (state.encryption === EPasa.ENC_PASSWORD) {\n      epasa.password = state.password;\n    }\n\n    if (state.format === EPasa.FORMAT_BASE58 && state.payload !== '') {\n      epasa.format = state.format;\n    }\n    epasa.encryption = state.encryption;\n\n    if (state.format === EPasa.FORMAT_HEX) {\n      epasa.payload = BC.fromHex(state.payload.substr(2));\n    } else if (state.format !== null) {\n      epasa.payload = BC.fromString(state.payload);\n    }\n\n    // validate checksum\n    if (state.checksum !== '' && EPasa.calculateChecksum(epasa.compile(true)) !== state.checksum) {\n      throw new Error('Invalid checksum provided');\n    }\n\n    return epasa;\n  }\n}\n\nmodule.exports = Parser;\n","'use strict';\n\nmodule.exports =  {\n  v3: require('./lib/v3')\n};\n\n// -- Test Code ---------------------------------------------------------\nif (require.main === module) {\n  (function () {\n    console.log(module.exports.v3);\n  })();\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","'use strict';\n\nmodule.exports = require('./murmur');\n","// +----------------------------------------------------------------------+\n// | murmurHash3.js v2.1.2 (http://github.com/karanlyons/murmurHash.js)   |\n// | A javascript implementation of MurmurHash3's x86 hashing algorithms. |\n// |----------------------------------------------------------------------|\n// | Copyright (c) 2012 Karan Lyons                                       |\n// | Freely distributable under the MIT license.                          |\n// +----------------------------------------------------------------------+\n\n\n;(function (root, undefined) {\n  'use strict';\n\n  // Create a local object that'll be exported or referenced globally.\n  var library = {\n    'version': '2.1.2',\n    'x86': {},\n    'x64': {}\n  };\n\n\n\n\n  // PRIVATE FUNCTIONS\n  // -----------------\n\n  function _x86Multiply(m, n) {\n    //\n    // Given two 32bit ints, returns the two multiplied together as a\n    // 32bit int.\n    //\n\n    return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);\n  }\n\n\n  function _x86Rotl(m, n) {\n    //\n    // Given a 32bit int and an int representing a number of bit positions,\n    // returns the 32bit int rotated left by that number of positions.\n    //\n\n    return (m << n) | (m >>> (32 - n));\n  }\n\n\n  function _x86Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x86 mix of that block.\n    //\n\n    h ^= h >>> 16;\n    h  = _x86Multiply(h, 0x85ebca6b);\n    h ^= h >>> 13;\n    h  = _x86Multiply(h, 0xc2b2ae35);\n    h ^= h >>> 16;\n\n    return h;\n  }\n\n\n  function _x64Add(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // added together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Multiply(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // multiplied together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n\n    o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);\n    o[0] &= 0xffff;\n\n    return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];\n  }\n\n\n  function _x64Rotl(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) rotated left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 32) {\n      return [m[1], m[0]];\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];\n    }\n\n    else {\n      n -= 32;\n      return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];\n    }\n  }\n\n\n  function _x64LeftShift(m, n) {\n    //\n    // Given a 64bit int (as an array of two 32bit ints) and an int\n    // representing a number of bit positions, returns the 64bit int (as an\n    // array of two 32bit ints) shifted left by that number of positions.\n    //\n\n    n %= 64;\n\n    if (n === 0) {\n      return m;\n    }\n\n    else if (n < 32) {\n      return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];\n    }\n\n    else {\n      return [m[1] << (n - 32), 0];\n    }\n  }\n\n\n  function _x64Xor(m, n) {\n    //\n    // Given two 64bit ints (as an array of two 32bit ints) returns the two\n    // xored together as a 64bit int (as an array of two 32bit ints).\n    //\n\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n\n\n  function _x64Fmix(h) {\n    //\n    // Given a block, returns murmurHash3's final x64 mix of that block.\n    // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n    // only place where we need to right shift 64bit ints.)\n    //\n\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n    h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = _x64Xor(h, [0, h[0] >>> 1]);\n\n    return h;\n  }\n\n\n\n\n  // PUBLIC FUNCTIONS\n  // ----------------\n\n  library.x86.hash32 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 32 bit hash\n    // using the x86 flavor of MurmurHash3, as an unsigned int.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 4;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n\n    var k1 = 0;\n\n    var c1 = 0xcc9e2d51;\n    var c2 = 0x1b873593;\n\n    for (var i = 0; i < bytes; i = i + 4) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n\n      h1 ^= k1;\n      h1 = _x86Rotl(h1, 13);\n      h1 = _x86Multiply(h1, 5) + 0xe6546b64;\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n      case 3:\n        k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n\n      case 2:\n        k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n\n      case 1:\n        k1 ^= (key.charCodeAt(i) & 0xff);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h1 = _x86Fmix(h1);\n\n    return h1 >>> 0;\n  };\n\n\n  library.x86.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x86 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = seed;\n    var h2 = seed;\n    var h3 = seed;\n    var h4 = seed;\n\n    var k1 = 0;\n    var k2 = 0;\n    var k3 = 0;\n    var k4 = 0;\n\n    var c1 = 0x239b961b;\n    var c2 = 0xab0e9789;\n    var c3 = 0x38b34ae5;\n    var c4 = 0xa1e38b93;\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24);\n      k2 = ((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24);\n      k3 = ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24);\n      k4 = ((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24);\n\n      k1 = _x86Multiply(k1, c1);\n      k1 = _x86Rotl(k1, 15);\n      k1 = _x86Multiply(k1, c2);\n      h1 ^= k1;\n\n      h1 = _x86Rotl(h1, 19);\n      h1 += h2;\n      h1 = _x86Multiply(h1, 5) + 0x561ccd1b;\n\n      k2 = _x86Multiply(k2, c2);\n      k2 = _x86Rotl(k2, 16);\n      k2 = _x86Multiply(k2, c3);\n      h2 ^= k2;\n\n      h2 = _x86Rotl(h2, 17);\n      h2 += h3;\n      h2 = _x86Multiply(h2, 5) + 0x0bcaa747;\n\n      k3 = _x86Multiply(k3, c3);\n      k3 = _x86Rotl(k3, 17);\n      k3 = _x86Multiply(k3, c4);\n      h3 ^= k3;\n\n      h3 = _x86Rotl(h3, 15);\n      h3 += h4;\n      h3 = _x86Multiply(h3, 5) + 0x96cd1c35;\n\n      k4 = _x86Multiply(k4, c4);\n      k4 = _x86Rotl(k4, 18);\n      k4 = _x86Multiply(k4, c1);\n      h4 ^= k4;\n\n      h4 = _x86Rotl(h4, 13);\n      h4 += h1;\n      h4 = _x86Multiply(h4, 5) + 0x32ac3b17;\n    }\n\n    k1 = 0;\n    k2 = 0;\n    k3 = 0;\n    k4 = 0;\n\n    switch (remainder) {\n      case 15:\n        k4 ^= key.charCodeAt(i + 14) << 16;\n\n      case 14:\n        k4 ^= key.charCodeAt(i + 13) << 8;\n\n      case 13:\n        k4 ^= key.charCodeAt(i + 12);\n        k4 = _x86Multiply(k4, c4);\n        k4 = _x86Rotl(k4, 18);\n        k4 = _x86Multiply(k4, c1);\n        h4 ^= k4;\n\n      case 12:\n        k3 ^= key.charCodeAt(i + 11) << 24;\n\n      case 11:\n        k3 ^= key.charCodeAt(i + 10) << 16;\n\n      case 10:\n        k3 ^= key.charCodeAt(i + 9) << 8;\n\n      case 9:\n        k3 ^= key.charCodeAt(i + 8);\n        k3 = _x86Multiply(k3, c3);\n        k3 = _x86Rotl(k3, 17);\n        k3 = _x86Multiply(k3, c4);\n        h3 ^= k3;\n\n      case 8:\n        k2 ^= key.charCodeAt(i + 7) << 24;\n\n      case 7:\n        k2 ^= key.charCodeAt(i + 6) << 16;\n\n      case 6:\n        k2 ^= key.charCodeAt(i + 5) << 8;\n\n      case 5:\n        k2 ^= key.charCodeAt(i + 4);\n        k2 = _x86Multiply(k2, c2);\n        k2 = _x86Rotl(k2, 16);\n        k2 = _x86Multiply(k2, c3);\n        h2 ^= k2;\n\n      case 4:\n        k1 ^= key.charCodeAt(i + 3) << 24;\n\n      case 3:\n        k1 ^= key.charCodeAt(i + 2) << 16;\n\n      case 2:\n        k1 ^= key.charCodeAt(i + 1) << 8;\n\n      case 1:\n        k1 ^= key.charCodeAt(i);\n        k1 = _x86Multiply(k1, c1);\n        k1 = _x86Rotl(k1, 15);\n        k1 = _x86Multiply(k1, c2);\n        h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n    h2 ^= key.length;\n    h3 ^= key.length;\n    h4 ^= key.length;\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    h1 = _x86Fmix(h1);\n    h2 = _x86Fmix(h2);\n    h3 = _x86Fmix(h3);\n    h4 = _x86Fmix(h4);\n\n    h1 += h2;\n    h1 += h3;\n    h1 += h4;\n    h2 += h1;\n    h3 += h1;\n    h4 += h1;\n\n    return (\"00000000\" + (h1 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h3 >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h4 >>> 0).toString(16)).slice(-8);\n  };\n\n\n  library.x64.hash128 = function (key, seed) {\n    //\n    // Given a string and an optional seed as an int, returns a 128 bit\n    // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n    //\n\n    key = key || '';\n    seed = seed || 0;\n\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n\n    for (var i = 0; i < bytes; i = i + 16) {\n      k1 = [((key.charCodeAt(i + 4) & 0xff)) | ((key.charCodeAt(i + 5) & 0xff) << 8) | ((key.charCodeAt(i + 6) & 0xff) << 16) | ((key.charCodeAt(i + 7) & 0xff) << 24), ((key.charCodeAt(i) & 0xff)) | ((key.charCodeAt(i + 1) & 0xff) << 8) | ((key.charCodeAt(i + 2) & 0xff) << 16) | ((key.charCodeAt(i + 3) & 0xff) << 24)];\n      k2 = [((key.charCodeAt(i + 12) & 0xff)) | ((key.charCodeAt(i + 13) & 0xff) << 8) | ((key.charCodeAt(i + 14) & 0xff) << 16) | ((key.charCodeAt(i + 15) & 0xff) << 24), ((key.charCodeAt(i + 8) & 0xff)) | ((key.charCodeAt(i + 9) & 0xff) << 8) | ((key.charCodeAt(i + 10) & 0xff) << 16) | ((key.charCodeAt(i + 11) & 0xff) << 24)];\n\n      k1 = _x64Multiply(k1, c1);\n      k1 = _x64Rotl(k1, 31);\n      k1 = _x64Multiply(k1, c2);\n      h1 = _x64Xor(h1, k1);\n\n      h1 = _x64Rotl(h1, 27);\n      h1 = _x64Add(h1, h2);\n      h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n\n      k2 = _x64Multiply(k2, c2);\n      k2 = _x64Rotl(k2, 33);\n      k2 = _x64Multiply(k2, c1);\n      h2 = _x64Xor(h2, k2);\n\n      h2 = _x64Rotl(h2, 31);\n      h2 = _x64Add(h2, h1);\n      h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n\n    k1 = [0, 0];\n    k2 = [0, 0];\n\n    switch(remainder) {\n      case 15:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n\n      case 14:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n\n      case 13:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n\n      case 12:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n\n      case 11:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n\n      case 10:\n        k2 = _x64Xor(k2, _x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n\n      case 9:\n        k2 = _x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = _x64Multiply(k2, c2);\n        k2 = _x64Rotl(k2, 33);\n        k2 = _x64Multiply(k2, c1);\n        h2 = _x64Xor(h2, k2);\n\n      case 8:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n\n      case 7:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n\n      case 6:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n\n      case 5:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n\n      case 4:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n\n      case 3:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n\n      case 2:\n        k1 = _x64Xor(k1, _x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n\n      case 1:\n        k1 = _x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = _x64Multiply(k1, c1);\n        k1 = _x64Rotl(k1, 31);\n        k1 = _x64Multiply(k1, c2);\n        h1 = _x64Xor(h1, k1);\n    }\n\n    h1 = _x64Xor(h1, [0, key.length]);\n    h2 = _x64Xor(h2, [0, key.length]);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    h1 = _x64Fmix(h1);\n    h2 = _x64Fmix(h2);\n\n    h1 = _x64Add(h1, h2);\n    h2 = _x64Add(h2, h1);\n\n    return (\"00000000\" + (h1[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h1[1] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[0] >>> 0).toString(16)).slice(-8) + (\"00000000\" + (h2[1] >>> 0).toString(16)).slice(-8);\n  };\n\n\n\n\n  // INITIALIZATION\n  // --------------\n\n  // Export murmurHash3 for CommonJS, either as an AMD module or just as part\n  // of the global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = library;\n    }\n\n    exports.murmurHash3 = library;\n  }\n\n  else if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return library;\n    });\n  }\n\n  else {\n    // Use murmurHash3.noConflict to restore `murmurHash3` back to its\n    // original value. Returns a reference to the library object, to allow\n    // it to be used under a different name.\n    library._murmurHash3 = root.murmurHash3\n\n    library.noConflict = function () {\n      root.murmurHash3 = library._murmurHash3;\n      library._murmurHash3 = undefined;\n      library.noConflict = undefined;\n\n      return library;\n    };\n\n    root.murmurHash3 = library;\n  }\n})(this);\n"],"sourceRoot":""}