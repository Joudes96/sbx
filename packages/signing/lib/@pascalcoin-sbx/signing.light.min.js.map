{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/./src/Coding/PublicKeyWithLength.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/RawAndDigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Operation.js","webpack://@pascalcoin-sbx/signing/./src/RawOperationsCoder.js","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/crypto\"","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Receiver/Receiver.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Sender/Sender.js","webpack://@pascalcoin-sbx/signing/./src/RawOperations.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__26__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BC","Currency","Types","PascalCoinInfo","P_PAYLOAD","P_S","P_R","P_FEE","P_N_OPERATION","constructor","fromString","withPayload","payload","withFee","fee","withMinFee","lastKnownBlock","MIN_FEE","withNOperation","nOperation","withSign","isSigned","usesDigestToSign","PublicKey","Coding","Pascal","Keys","BytesWithLength","Core","PascalPublicKey","publicKeyCoding","id","super","decodeFromBytes","bc","options","all","pubKey","parsed","x","y","curve","encodeToBytes","Endian","CompositeType","ChangeKey","RawAndDigestCoder","description","addSubType","Int16","withFixedValue","LITTLE_ENDIAN","Repeating","typeInfo","info","hierarchy","push","decoded","op","signer","newPublicKey","Sha","Operations","sign","keyPair","operation","digest","digestCoderFor","opType","signResult","signWithDigest","hash","sha256","signWithHash","signMultiOperation","Items","Operation","RawCoder","DigestCoder","ChangeKeySigned","ChangeAccountInfo","Data","Transaction","ListAccountForSale","DeListAccountForSale","BuyAccount","MultiOperation","Abstract","AccountNumber","P_SIGNER","P_NEW_PUBLIC_KEY","accountSigner","PublicKeyWithLength","NOperation","empty","P_TARGET","accountTarget","target","AccountName","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_NEW_NAME","P_NEW_TYPE","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","newName","newType","changeType","withNewPublicKey","publicKey","withNewName","withNewType","Int8","type","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","P_AMOUNT","sender","withDataType","dataType","parseInt","withDataSequence","dataSequence","withAmount","amount","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","price","accountToPay","lockedUntilBlock","asPrivateSale","ListOperation","OpType","Int32","DeList","P_SENDER","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","seller","Receiver","Sender","P_OPERATIONS","P_CHANGERS","P_SENDERS","P_RECEIVERS","P_RECEIVERS_UQ","P_KEYPAIRS","addTransaction","receiverPayload","undefined","addAmount","receiver","uq","toHex","toStringOpt","Error","senders","values","sendersCount","length","receivers","receiversCount","changers","changersCount","TransactionRawCoder","DataRawCoder","ListRawCoder","DeListRawCoder","BuyRawCoder","ChangeKeyRawCoder","ChangeKeySignedRawCoder","ChangeAccountInfoRawCoder","MultiOperationRawCoder","operationType","Decissive","markerValue","Signer","RawOperations","RawOperationsCoder","BytesWithoutLength","Curve","canDecode","StringWithoutLength","P_ACCOUNT","account","add","OperationListCoder","P_CODER","addOperation","optype","operations","count"],"mappings":"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","file":"@pascalcoin-sbx/signing.light.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [\"@pascalcoin-sbx/common\", \"@pascalcoin-sbx/crypto\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory(root[\"@pascalcoin-sbx/common\"], root[\"@pascalcoin-sbx/crypto\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__26__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst PascalCoinInfo = require('@pascalcoin-sbx/common').PascalCoinInfo;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n  }\n\n  /**\n   * Sets the payload of the transaction instance.\n   *\n   * @param {BC} payload\n   *\n   * @returns {Abstract}\n   */\n  withPayload(payload) {\n    this[P_PAYLOAD] = payload;\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee(lastKnownBlock = null) {\n    this[P_FEE] = PascalCoinInfo.MIN_FEE(lastKnownBlock);\n    return this;\n  }\n\n  withNOperation(nOperation) {\n    this[P_N_OPERATION] = nOperation;\n    return this;\n  }\n\n  withSign(r, s) {\n    this[P_R] = r;\n    this[P_S] = s;\n  }\n\n  /**\n   * Gets the prepared payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the r value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n   * Gets the s value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n   * Gets the fee.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the n operation.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n\n  usesDigestToSign() {\n    return false;\n  }\n\n}\n\nmodule.exports = Abstract;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PublicKey;\nconst BytesWithLength = require('@pascalcoin-sbx/common').Coding.Core.BytesWithLength;\nconst PascalPublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst publicKeyCoding = new PublicKey();\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKeyWithLength extends BytesWithLength {\n\n  constructor(id = null) {\n    super(id || 'pubkey', 2);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const pubKey = super.decodeFromBytes(bc);\n    const parsed = publicKeyCoding.decodeFromBytes(pubKey);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {*} value\n   * @returns {PascalPublicKey}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(publicKeyCoding.encodeToBytes(value));\n  }\n}\n\nmodule.exports = PublicKeyWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst ChangeKey = require('./Operation');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawAndDigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_op_raw');\n    this.description('The coder for the raw representation of a ChangeKey operation');\n    this.addSubType(\n      new Coding.Core.Int16('protocol')\n        .description('The protocol version (3).')\n        .withFixedValue(3)\n    );\n    this.addSubType(\n      new Coding.Core.Int16('sendersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of senders')\n    );\n    this.addSubType(\n      new Coding.Repeating('senders', new RawAndDigestCoder())\n        .description('Senders of the multi-operation')\n    );\n\n    this.addSubType(\n      new Coding.Core.Int16('receiversCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of receivers')\n    );\n    this.addSubType(\n      new Coding.Repeating('receivers', new RawAndDigestCoder())\n        .description('Receivers of the multi-operation')\n    );\n\n    this.addSubType(\n      new Coding.Core.Int16('changersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of changers')\n    );\n    this.addSubType(\n      new Coding.Repeating('changers', new RawAndDigestCoder())\n        .description('Changers of the multi-operation')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKey operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKey(\n      decoded.signer,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawAndDigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\nconst Operations = require('./Operations');\n\n/**\n * Signs the given digest with the given keypair and returns the r and s\n * values (because thats all that is needed).\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n */\nfunction signWithHash(keyPair, digest) {\n  const hash = Sha.sha256(digest);\n\n  return Keys.sign(keyPair, hash);\n}\n\n/**\n * Signs the digest.\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n * @return {{r: BC, s: BC}}\n */\nfunction signWithDigest(keyPair, digest) {\n  return Keys.sign(keyPair, digest);\n}\n\nclass Signer {\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, operation) {\n    const DigestCoder = Operations.digestCoderFor(operation);\n    const digest = new DigestCoder(operation.opType).encodeToBytes(operation);\n    let signResult;\n\n    if (operation.usesDigestToSign() === true) {\n      signResult = signWithDigest(keyPair, digest);\n    } else {\n      signResult = signWithHash(keyPair, digest);\n    }\n\n    // save results\n    return signResult;\n  }\n\n  /**\n   * TODO\n   * @param operation\n   */\n  signMultiOperation(operation) {\n    // const DigestCoder = Operations.digestCoderFor(operation);\n    // const digest = new DigestCoder(operation.opType).encodeToBytes(operation);\n  }\n}\n\nmodule.exports = Signer;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet Items = {\n  ChangeKey: {\n    Operation: require('./ChangeKey/Operation'),\n    RawCoder: require('./ChangeKey/RawCoder'),\n    DigestCoder: require('./ChangeKey/DigestCoder')\n  },\n  ChangeKeySigned: {\n    Operation: require('./ChangeKeySigned/Operation'),\n    RawCoder: require('./ChangeKeySigned/RawCoder'),\n    DigestCoder: require('./ChangeKeySigned/DigestCoder')\n  },\n  ChangeAccountInfo: {\n    Operation: require('./ChangeAccountInfo/Operation'),\n    RawCoder: require('./ChangeAccountInfo/RawCoder'),\n    DigestCoder: require('./ChangeAccountInfo/DigestCoder')\n  },\n  Data: {\n    Operation: require('./Data/Operation'),\n    RawCoder: require('./Data/RawCoder'),\n    DigestCoder: require('./Data/DigestCoder')\n  },\n  Transaction: {\n    Operation: require('./Transaction/Operation'),\n    RawCoder: require('./Transaction/RawCoder'),\n    DigestCoder: require('./Transaction/DigestCoder')\n  },\n  ListAccountForSale: {\n    Operation: require('./ListAccountForSale/Operation'),\n    RawCoder: require('./ListAccountForSale/RawCoder'),\n    DigestCoder: require('./ListAccountForSale/DigestCoder')\n  },\n  DeListAccountForSale: {\n    Operation: require('./DeListAccountForSale/Operation'),\n    RawCoder: require('./DeListAccountForSale/RawCoder'),\n    DigestCoder: require('./DeListAccountForSale/DigestCoder')\n  },\n  BuyAccount: {\n    Operation: require('./BuyAccount/Operation'),\n    RawCoder: require('./BuyAccount/RawCoder'),\n    DigestCoder: require('./BuyAccount/DigestCoder')\n  },\n  MultiOperation: {\n    Operation: require('./MultiOperation/Operation'),\n    RawCoder: require('./MultiOperation/RawAndDigestCoder'),\n    DigestCoder: require('./MultiOperation/RawAndDigestCoder')\n  }\n};\n\nItems.digestCoderFor = operation => {\n  return Items[operation.constructor.name].DigestCoder;\n};\nmodule.exports = Items;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SIGNER = Symbol('signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass ChangeKey extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 2;\n  }\n\n  /**\n   * Constructor.\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the account number of the signer and the account to be changed.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_SIGNER];\n  }\n\n  /**\n   * Gets the new public key of the account.\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeKey = require('./Operation');\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_op_raw');\n    this.description('The coder for the raw representation of a ChangeKey operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKey operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKey(\n      decoded.signer,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SIGNER = Symbol('signer');\nconst P_TARGET = Symbol('target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable ChangeKeySigned operation.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 7;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {Account|AccountNumber|Number|String} accountTarget\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_SIGNER] = new AccountNumber(accountSigner);\n    this[P_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the account number of the signer.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_SIGNER];\n  }\n\n  /**\n   * Gets the account number of the account to be changed.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the new public key of the target account.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeKeySigned = require('./Operation');\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_signed_op_raw');\n    this.description('The coder for the raw representation of a ChangeKeySigned operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to be changed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Signed Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKeySigned operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKeySigned(\n      decoded.signer,\n      decoded.target,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * Representation of a signable ChangeAccountInfo operation.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 8;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {Account|AccountNumber|Number|String} accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  /**\n   * Gets the signer account of the operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the target account to change.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the new public key of the target.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the new name of the target.\n   *\n   * @return {AccountName}\n   */\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  /**\n   * Gets the new type of the target account.\n   *\n   * @return {Number}\n   */\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the change type of the op.\n   *\n   * @returns {number}\n   */\n  get changeType() {\n    let changeType = 0;\n\n    if (this[P_WITH_NEW_PUBKEY] === true) {\n      changeType |= 1;\n    }\n    if (this[P_WITH_NEW_NAME] === true) {\n      changeType |= 2;\n    }\n    if (this[P_WITH_NEW_TYPE] === true) {\n      changeType |= 4;\n    }\n\n    return changeType;\n  }\n\n  /**\n   * Will set the new public key.\n   *\n   * @param {PublicKey} publicKey\n   * @returns {ChangeAccountInfo}\n   */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeAccountInfo = require('./Operation');\n\n/**\n * The raw coder for a ChangeAccountInfo operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_account_info_op_raw');\n    this.description('The coder for the raw representation of a ChangeAccountInfo operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Account Info Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeAccountInfo operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeAccountInfo}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeAccountInfo(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withNewType(decoded.type);\n    op.withNewName(decoded.name);\n    op.withNewPublicKey(decoded.newPublicKey);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable DATA operation.\n */\nclass Data extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Forces the signer to use the digest instead of the hash of the digest\n   * to sign the operation.\n   *\n   * @return {boolean}\n   */\n  usesDigestToSign() {\n    return true;\n  }\n}\n\nmodule.exports = Data;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst Data = require('./Operation');\n\n/**\n * The raw coder for a DATA operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_operation_raw');\n    this.description('The coder for the raw representation of a Data operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Data Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Data operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Data}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Data(\n      decoded.signer,\n      decoded.sender,\n      decoded.target\n    );\n\n    op.withDataType(decoded.dataType);\n    op.withDataSequence(decoded.dataSequence);\n    op.withAmount(decoded.amount);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SENDER = Symbol('sender');\nconst P_ACCOUNT_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable Transaction operation.\n */\nclass Transaction extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 1;\n  }\n\n  /**\n   * Creates a new Transaction instance with the given data. The payload is\n   * empty by default and not encoded.\n   *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super();\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Transaction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst Transaction = require('./Operation');\n\n/**\n * The raw coder for a Transaction operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_operation_raw');\n    this.description('The coder for the raw representation of a Transaction operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Transaction Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Transaction operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ListOperation}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Transaction(\n      decoded.sender,\n      decoded.target,\n      decoded.amount\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * Representation of a signable List operation.\n */\nclass ListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 4;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Number|AccountNumber} accountSigner\n   * @param {Number|AccountNumber} accountTarget\n   * @param {Currency} price\n   * @param {Number|AccountNumber} accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  /**\n   * Gets the signer of the list operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the account that should be listed.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the price of the listed account (target)\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account where the money should be send to on sale.\n   *\n   * @return {AccountNumber}\n   */\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  /**\n   * Gets the new public key in case its a private sale.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the block number until when the account is locked in case of a\n   * private sale.\n   *\n   * @return {Number}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n}\n\nmodule.exports = ListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\nconst CompositeType = Coding.CompositeType;\nconst ListOperation = require('./Operation');\n\n/**\n * The raw coder for a List operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('list_operation_raw');\n    this.description('The coder for the raw representation of a List Account operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(4)\n        .description('The optype of the operation (4)')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'List Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded List operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ListOperation}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ListOperation(\n      decoded.signer,\n      decoded.target,\n      decoded.price,\n      decoded.accountToPay\n    );\n\n    op.asPrivateSale(decoded.newPublicKey, decoded.lockedUntilBlock);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * Representation of a signable Delist operation.\n */\nclass DeListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 5;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Number|AccountNumber} accountSigner\n   * @param {Number|AccountNumber} accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n\n  }\n\n  /**\n   * Gets the signer of the delist operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the account that should be delisted.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the price of the account (defaulted to 0).\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account that should have received the amount on sale (defaulted to 0)\n   *\n   * @return {Currency}\n   */\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  /**\n   * Gets the new public key in case of a private sale (defaulted to an empty pubkey).\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the value until when the account is locked (defaulted to 0).\n   *\n   * @return {Number}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n}\n\nmodule.exports = DeListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst DeList = require('./Operation');\n\n/**\n * The raw coder for a Delist operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('delist_operation_raw');\n    this.description('The coder for the raw representation of a Delist Account operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(5)\n        .description('The optype of the operation (5)')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Delist Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Delist operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Data}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new DeList(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable BuyAccount operation.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the buyer account.\n   *\n   * @return {AccountNumber}\n   */\n  get sender() {\n    return this[P_SENDER];\n  }\n\n  /**\n   * Gets the account to buy.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the amount to be transferred.\n   *\n   * @return {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the price of the account.\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_ACCOUNT_PRICE];\n  }\n\n  /**\n   * Gets the account of the seller.\n   *\n   * @return {AccountNumber}\n   */\n  get seller() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  /**\n   * Gets the new public key of the bought account.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst BuyAccount = require('./Operation');\n\n/**\n * The raw coder for a BuyAccount operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('buy_op_raw');\n    this.description('The coder for the raw representation of a BuyAccount operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount to pay for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('type', true, Endian.LITTLE_ENDIAN)\n        .description('Fixed type for a \"Buy account\" transaction.')\n        .withFixedValue(2)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key that will own the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded BuyAccount operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {BuyAccount}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new BuyAccount(\n      decoded.sender,\n      decoded.target,\n      decoded.amount,\n      decoded.price,\n      decoded.seller,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Receiver = require('./Receiver/Receiver');\nconst Sender = require('./Sender/Sender');\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_CHANGERS = Symbol('changers');\nconst P_SENDERS = Symbol('senders');\nconst P_RECEIVERS = Symbol('receivers');\nconst P_RECEIVERS_UQ = Symbol('receivers_uq');\nconst P_KEYPAIRS = Symbol('keypairs');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass MultiOperation extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 9;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super();\n    this[P_OPERATIONS] = [];\n    this[P_SENDERS] = {};\n    this[P_RECEIVERS] = [];\n    this[P_CHANGERS] = {};\n    this[P_RECEIVERS_UQ] = {};\n    this[P_KEYPAIRS] = {};\n  }\n\n  addTransaction(keyPair, operation, receiverPayload = null) {\n    // transaction operation, first create a single sender\n    if (this[P_SENDERS][operation.sender] === undefined) {\n      let sender = new Sender(\n        operation.sender,\n        operation.amount\n      );\n\n      sender.withNOperation(operation.nOperation);\n      sender.withPayload(operation.payload);\n      this[P_SENDERS][operation.sender] = sender;\n    } else {\n      this[P_SENDERS][operation.sender].addAmount(operation.amount);\n    }\n    this[P_KEYPAIRS][operation.sender] = keyPair;\n\n    let receiver = new Receiver(\n      operation.target,\n      operation.amount\n    );\n\n    receiver.withPayload(receiverPayload || operation.payload);\n    const uq = receiver.payload.toHex() + receiver.amount.toStringOpt();\n\n    if (this[P_RECEIVERS_UQ][uq] !== undefined) {\n      throw new Error('Receivers must have unique amount and payload.');\n    }\n    this[P_RECEIVERS_UQ][uq] = uq;\n    this[P_RECEIVERS].push(receiver);\n  }\n\n  get senders() {\n    return Object.values(this[P_SENDERS]);\n  }\n  get sendersCount() {\n    return this.senders.length;\n  }\n\n  get receivers() {\n    return this[P_RECEIVERS];\n  }\n  get receiversCount() {\n    return this[P_RECEIVERS].length;\n  }\n\n  get changers() {\n    return Object.values(this[P_CHANGERS]);\n  }\n  get changersCount() {\n    return this.changers.length;\n  }\n}\n\nmodule.exports = MultiOperation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst TransactionRawCoder = require('./Operations/Transaction/RawCoder');\nconst DataRawCoder = require('./Operations/Data/RawCoder');\nconst ListRawCoder = require('./Operations/ListAccountForSale/RawCoder');\nconst DeListRawCoder = require('./Operations/DeListAccountForSale/RawCoder');\nconst BuyRawCoder = require('./Operations/BuyAccount/RawCoder');\nconst ChangeKeyRawCoder = require('./Operations/ChangeKey/RawCoder');\nconst ChangeKeySignedRawCoder = require('./Operations/ChangeKeySigned/RawCoder');\nconst ChangeAccountInfoRawCoder = require('./Operations/ChangeAccountInfo/RawCoder');\nconst MultiOperationRawCoder = require('./Operations/MultiOperation/RawAndDigestCoder');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawOperationsCoder extends CompositeType {\n  constructor() {\n    super('combined signed operations');\n    super.description('Coder to combine multiple operations');\n    this.addSubType(new Coding.Core.Int32('count', true, Endian.LITTLE_ENDIAN));\n    const operationType = new CompositeType('operation');\n\n    operationType.addSubType(new Coding.Pascal.OpType('optype', 4));\n    operationType.addSubType(new Coding.Decissive('operation', 'optype', (markerValue) => {\n      switch (markerValue) {\n        case 1:\n          return new TransactionRawCoder();\n        case 2:\n          return new ChangeKeyRawCoder();\n        case 4:\n          return new ListRawCoder();\n        case 5:\n          return new DeListRawCoder();\n        case 6:\n          return new BuyRawCoder();\n        case 7:\n          return new ChangeKeySignedRawCoder();\n        case 8:\n          return new ChangeAccountInfoRawCoder();\n        case 9:\n          return new MultiOperationRawCoder();\n        case 10:\n          return new DataRawCoder();\n        default:\n          throw new Error('Unable to map marker to a coder.');\n      }\n    }));\n    this.addSubType(new Coding.Repeating('operations', operationType));\n  }\n}\n\nmodule.exports = RawOperationsCoder;\n","module.exports = {\n  Signer: require('./src/Signer'),\n  RawOperations: require('./src/RawOperations'),\n  RawOperationsCoder: require('./src/RawOperationsCoder'),\n  Coding: {\n    PublicKeyWithLength: require('./src/Coding/PublicKeyWithLength')\n  },\n  Operations: require('./src/Operations')\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__26__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeKey Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_op_digest');\n    this.description('Digest encoder for a ChangeKey operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(2)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeKey Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_signed_op_digest');\n    this.description('Digest encoder for a ChangeKeySigned operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that should be changed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(7)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Signed Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeAccountInfo Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_info_op_digest');\n    this.description('Digest encoder for a ChangeAccountInfo operation.');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(8)\n        .description('The change account info optype as 8 bit int8')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Account Info Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a DATA Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_op_digest');\n    this.description('Digest encoder for a DATA operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated with the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(10)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Data Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a Transaction Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('tx_op_digest');\n    this.description('Digest encoder for a Transaction operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .description('Operation type.')\n        .withFixedValue(1)\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Transaction Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a List Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('list_op_digest');\n    this.description('Digest encoder for a List operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.StringWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(4)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'List Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a Delist Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('delist_op_digest');\n    this.description('Digest encoder for a Delist operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be de-listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock')\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(5)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Delist Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a BuyAccount Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('buy_op_digest');\n    super.description('Digest encoder for a BuyAccount operation.');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount paid for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey', true)\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(6)\n        .description('The buy account optype as 8 bit int8')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass Receiver extends Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor(account, amount) {\n    super();\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Receiver;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass Sender extends Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor(account, amount) {\n    super();\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  addAmount(amount) {\n    this[P_AMOUNT] = this[P_AMOUNT].add(new Currency(amount));\n  }\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Sender;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Signer = require('./Signer');\nconst OperationListCoder = require('./RawOperationsCoder');\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_CODER = Symbol('coder');\nconst P_SIGNER = Symbol('signer');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass RawOperations {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n    this[P_CODER] = new OperationListCoder();\n    this[P_SIGNER] = new Signer();\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {RawOperations}\n   */\n  addOperation(keyPair, operation) {\n    if (operation.isSigned) {\n      throw new Error('Operation should not be signed.');\n    }\n\n    let sign = this[P_SIGNER].sign(keyPair, operation);\n\n    operation.withSign(sign.r, sign.s);\n    this[P_OPERATIONS].push({\n      optype: operation.opType,\n      operation: operation\n    });\n    return this;\n  }\n\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  get count() {\n    return this[P_OPERATIONS].length;\n  }\n}\n\nmodule.exports = RawOperations;\n"],"sourceRoot":""}