{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/./src/Coding/StringWithoutLength.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/./src/Coding/PublicKeyWithLength.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing/./src/OperationsBuilder.js","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/crypto\"","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/Operation.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__16__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Signer","BC","Currency","Types","PascalCoinInfo","P_PAYLOAD","P_S","P_R","P_FEE","P_N_OPERATION","P_RAW_CODER","P_DIGEST_CODER","constructor","digestCoder","rawCoder","fromString","withPayload","payload","withFee","fee","withMinFee","lastKnownBlock","MIN_FEE","digest","encodeToBytes","sign","keyPair","nOperation","useDigest","signResult","signWithDigest","signWithHash","toRaw","toRawDebug","[object Object]","Error","bcFromInt","size","fromInt","switchEndian","bcFromStringWithSize","concat","length","bcFromString","bcFromBcWithSize","offset","data","slice","toInt","bcFromSign","isSigned","AbstractType","Coding","P_SIZE","decodeFromBytes","bc","from","Sha","Keys","hash","sha256","PublicKey","Pascal","VariableString","Core","PascalPublicKey","publicKeyCoding","id","super","pubKey","parsed","x","y","curve","Endian","CompositeType","opType","addField","OpType","setFixedValue","AccountNumber","NOperation","Int16","LITTLE_ENDIAN","empty","StringWithoutLength","Curve","PublicKeyWithLength","Int32","OperationsBuilder","Operations","P_OPERATIONS","addOperation","operation","push","build","forEach","op","parse","raw","BuyAccount","ChangeAccountInfo","ChangeKey","ChangeKeySigned","Data","Operation","RawCoder","DigestCoder","Transaction","ListAccountForSale","DeListAccountForSale","Abstract","P_SENDER","P_TARGET","P_AMOUNT","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","P_NEW_PUBLIC_KEY","OPTYPE","sender","target","amount","price","seller","newPublicKey","account","toMolina","encode","AccountName","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_NEW_NAME","P_NEW_TYPE","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","getChangeType","changeType","accountSigner","accountTarget","withNewPublicKey","publicKey","withNewName","newName","withNewType","newType","toString","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","signer","withDataType","dataType","parseInt","withDataSequence","dataSequence","withAmount","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","accountToPay","lockedUntilBlock","asPrivateSale","digest2","toRaw2"],"mappings":"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","file":"@pascalcoin-sbx/signing.light.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [\"@pascalcoin-sbx/common\", \"@pascalcoin-sbx/crypto\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory(root[\"@pascalcoin-sbx/common\"], root[\"@pascalcoin-sbx/crypto\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__16__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst Signer = require('./Signer');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst PascalCoinInfo = require('@pascalcoin-sbx/common').PascalCoinInfo;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_RAW_CODER = Symbol('raw_coder');\nconst P_DIGEST_CODER = Symbol('digest_coder');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n\n  /**\n   * Constructor.\n   *\n   * @param {CompositeType} digestCoder\n   * @param {CompositeType} rawCoder\n   */\n  constructor(digestCoder, rawCoder) {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n    this[P_DIGEST_CODER] = digestCoder;\n    this[P_RAW_CODER] = rawCoder;\n  }\n\n  /**\n     * Sets the payload of the transaction instance.\n     *\n     * @param {BC} payload\n     *\n     * @returns {Abstract}\n     */\n  withPayload(payload) {\n    this[P_PAYLOAD] = payload;\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee(lastKnownBlock = null) {\n    this[P_FEE] = PascalCoinInfo.MIN_FEE(lastKnownBlock);\n    return this;\n  }\n\n  /**\n     * Returns a BC with the digest that needs to be hashed.\n     *\n     * @return {BC}\n     */\n  digest() {\n    return this[P_DIGEST_CODER].encodeToBytes(this);\n  }\n\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, nOperation, useDigest = false) {\n    this[P_N_OPERATION] = nOperation;\n    const digest = this.digest();\n\n    let signResult;\n\n    if (useDigest === true) {\n      signResult = Signer.signWithDigest(keyPair, digest);\n    } else {\n      signResult = Signer.signWithHash(keyPair, digest);\n    }\n\n    // save results\n    this[P_R] = signResult.r;\n    this[P_S] = signResult.s;\n\n    return this;\n  }\n\n  /**\n   * Returns the BC for a rawoperations info.\n   *\n   * @return {BC}\n   */\n  toRaw() { // eslint-disable-line class-methods-use-this\n    const raw = this[P_RAW_CODER].encodeToBytes(this);\n\n    return raw;\n  }\n\n  /**\n   * Returns the BC for a rawoperations info.\n   *\n   * @return {BC}\n   */\n  toRawDebug() { // eslint-disable-line class-methods-use-this\n    return this[P_RAW_CODER].encodeToBytes(this, true);\n  }\n\n  /**\n     * Returns a new instance of the derived class based on the given raw\n     * string.\n     *\n     * @return {Abstract}\n     */\n  // eslint-disable-next-line class-methods-use-this\n  static fromRaw() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n     * Gets a BC from the given int value.\n     *\n     * @param {Number} value\n     * @param {Number|undefined} size\n     * @returns {BC}\n     */\n  // eslint-disable-next-line class-methods-use-this\n  bcFromInt(value, size = null) {\n    return (size === null ?\n      BC.fromInt(value) :\n      BC.fromInt(value, size)).switchEndian();\n  }\n\n  /**\n     * Gets the given string as a byte collection with the size of the string\n     * prepended.\n     *\n     * @param {String} value\n     * @returns {BC}\n     */\n  bcFromStringWithSize(value) {\n    return BC.concat(\n      this.bcFromInt(value.length, 2),\n      this.bcFromString(value),\n    );\n  }\n\n  /**\n   * Gets the given BC as a byte collection with the size of\n   * the BC prepended.\n   *\n   * @param {BC} value\n   * @returns {BC}\n   */\n  bcFromBcWithSize(value) {\n    return BC.concat(\n      this.bcFromInt(value.length, 2),\n      value,\n    );\n  }\n\n  /**\n   * Extracts a BC with size from the given BC.\n   *\n   * @param {BC} value\n   * @param {Number} offset\n   * @returns {BC}\n   */\n  static readBCWithSize(value, offset) {\n    const data = {\n      size: value.slice(offset, offset + 2).switchEndian().toInt()\n    };\n\n    data.value = value.slice(offset + 2, offset + 2 + data.size);\n    return data;\n  }\n\n  /**\n     * Gets the BC from the given string.\n     *\n     * @param {String} value\n     * @returns {BC}\n     */\n  bcFromString(value) { // eslint-disable-line class-methods-use-this\n    return BC.fromString(value);\n  }\n\n  /**\n     * Returns the BC for an r and s signing result.\n     *\n     * @param {BC} r\n     * @param {BC} s\n     * @returns {BC}\n     */\n  bcFromSign(r, s) {\n    return BC.concat(\n      this.bcFromBcWithSize(r),\n      this.bcFromBcWithSize(s),\n    );\n  }\n\n  /**\n     * Gets the prepared payload.\n     *\n     * @returns {BC}\n     */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n     * Gets the r value of the sign result.\n     *\n     * @returns {BC|null}\n     */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n     * Gets the s value of the sign result.\n     *\n     * @returns {BC|null}\n     */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n     * Gets the fee.\n     *\n     * @returns {Currency}\n     */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n     * Gets the n operation.\n     *\n     * @returns {Number}\n     */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n}\n\nmodule.exports = Abstract;\n","const AbstractType = require('@pascalcoin-sbx/common').Coding.AbstractType;\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Reads the string from the BC.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    return bc;\n  }\n\n  /**\n   * Appends the string to the BC.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE] = BC.from(value).length;\n    return BC.from(value);\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return this[P_SIZE];\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\n\nclass Signer {\n  /**\n   * Signs the given digest with the given keypair and returns the r and s\n   * values (because thats all that is needed).\n   *\n   * @param {KeyPair} keyPair\n   * @param {BC} digest\n   */\n  static signWithHash(keyPair, digest) {\n    const hash = Sha.sha256(digest);\n\n    return Keys.sign(keyPair, hash);\n  }\n\n  static signWithDigest(keyPair, digest) {\n    return Keys.sign(keyPair, digest);\n  }\n}\n\nmodule.exports = Signer;\n","const PublicKey = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PublicKey;\nconst VariableString = require('@pascalcoin-sbx/common').Coding.Core.VariableString;\nconst PascalPublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst publicKeyCoding = new PublicKey();\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKeyWithLength extends VariableString {\n\n  constructor(id = null) {\n    super(id || 'pubkey');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc) {\n    const pubKey = super.decodeFromBytes(bc);\n    const parsed = publicKeyCoding.decodeFromBytes(pubKey);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {*} value\n   * @returns {PascalPublicKey}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(publicKeyCoding.encodeToBytes(value));\n  }\n}\n\nmodule.exports = PublicKeyWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.NOperation('nOperation'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Pascal.Keys.PublicKey('v2_pubkey').setFixedValue(PublicKey.empty()));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst StringWithoutLength = require('./../../Coding/StringWithoutLength');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('tx_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.NOperation('nOperation'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new StringWithoutLength('payload'));\n    this.addField(new Coding.Pascal.Keys.Curve('v2_pubkey_curve').setFixedValue(PublicKey.empty().curve));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('list_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.OpType(2).setFixedValue(opType));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('price'));\n    this.addField(new Coding.Pascal.AccountNumber('accountToPay'));\n    this.addField(new Coding.Pascal.Keys.PublicKey('v2_pubkey').setFixedValue(PublicKey.empty()));\n    this.addField(new PublicKeyWithLength('newPublicKey'));\n    this.addField(new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst StringWithoutLength = require('./../../Coding/StringWithoutLength');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('price'));\n    this.addField(new Coding.Pascal.AccountNumber('accountToPay'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new StringWithoutLength('payload'));\n    this.addField(new Coding.Pascal.Keys.Curve('v2_pubkey_curve').setFixedValue(PublicKey.empty().curve));\n    this.addField(new Coding.Pascal.Keys.PublicKey('newPublicKey'));\n    this.addField(new Coding.Core.Int32('lockedUntilBlock'));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.OpType(2).setFixedValue(opType));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst StringWithoutLength = require('./../../Coding/StringWithoutLength');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('price'));\n    this.addField(new Coding.Pascal.AccountNumber('accountToPay'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new StringWithoutLength('payload'));\n    this.addField(new Coding.Pascal.Keys.Curve('v2_pubkey_curve').setFixedValue(PublicKey.empty().curve));\n    this.addField(new Coding.Pascal.Keys.PublicKey('newPublicKey'));\n    this.addField(new Coding.Core.Int32('lockedUntilBlock'));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","module.exports = {\n  OperationsBuilder: require('./src/OperationsBuilder'),\n  Signer: require('./src/Signer'),\n  Coding: {\n    PublicKeyWithLength: require('./src/Coding/PublicKeyWithLength'),\n    StringWithoutLength: require('./src/Coding/StringWithoutLength')\n  },\n  Operations: require('./src/Operations')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_OPERATIONS = Symbol('operations');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass OperationsBuilder {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {OperationsBuilder}\n   */\n  addOperation(operation) {\n    if (!operation.isSigned) {\n      throw new Error('Operation needs to be signed.');\n    }\n\n    this[P_OPERATIONS].push(operation);\n    return this;\n  }\n\n  /**\n   * Builds the operations.\n   *\n   * @returns {BC}\n   */\n  build() {\n    let bc = BC.fromInt(this[P_OPERATIONS].length, 4).switchEndian();\n\n    this[P_OPERATIONS].forEach((op) => {\n      bc = BC.concat(bc, op.toRaw());\n    });\n\n    return bc;\n  }\n\n  parse(raw) {\n\n    // let numOperations = raw.slice(0, 3);\n    let bc = BC.fromInt(this[P_OPERATIONS].length, 4).switchEndian();\n\n    this[P_OPERATIONS].forEach((op) => {\n      bc = BC.concat(bc, op.toRaw());\n    });\n\n    return bc;\n  }\n}\n\nmodule.exports = OperationsBuilder;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__16__;","module.exports = {\n  BuyAccount: require('./BuyAccount'),\n  ChangeAccountInfo: require('./ChangeAccountInfo'),\n  ChangeKey: require('./ChangeKey'),\n  ChangeKeySigned: require('./ChangeKeySigned'),\n  Data: {\n    Operation: require('./Data/Operation'),\n    RawCoder: require('./Data/RawCoder'),\n    DigestCoder: require('./Data/DigestCoder')\n  },\n  Transaction: {\n    Operation: require('./Transaction/Operation'),\n    RawCoder: require('./Transaction/RawCoder'),\n    DigestCoder: require('./Transaction/DigestCoder')\n  },\n  ListAccountForSale: {\n    Operation: require('./ListAccountForSale/Operation'),\n    RawCoder: require('./ListAccountForSale/RawCoder'),\n    DigestCoder: require('./ListAccountForSale/DigestCoder')\n  },\n  DeListAccountForSale: {\n    Operation: require('./DeListAccountForSale/Operation'),\n    RawCoder: require('./DeListAccountForSale/RawCoder'),\n    DigestCoder: require('./DeListAccountForSale/DigestCoder')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this.bcFromInt(this[P_ACCOUNT_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_SELLER_ACCOUNT].account, 4),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      BC.fromInt(BuyAccount.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the signed raw operations.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(BuyAccount.OPTYPE, 4),\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(2, 1), // buy account\n      this.bcFromInt(this[P_ACCOUNT_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_SELLER_ACCOUNT].account, 4),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n\n  /**\n   * Gets a new Operation object from the given signed operation.\n   *\n   * @param {BC|Buffer|String|Uint8Array} raw\n   * @returns {BC}\n   */\n  static fromRaw(raw) {\n    /*\n    raw = BC.from(raw);\n    const sender = raw.slice(4, 8).switchEndian().toInt();\n    const target = raw.slice(12, 16).switchEndian().toInt();\n    const amount = raw.slice(16, 24).switchEndian().toInt();\n    const fee = raw.slice(24, 32).switchEndian().toInt();\n    const payload = Abstract.readBCWithSize(raw, 32).value;\n    const publicKey = Abstract.readBCWithSize(raw, 34 + payload.length).value;\n    const price = raw.slice(36 + payload.length + publicKey.length, 8).switchEndian().toInt();\n    const seller = raw.slice(44 + payload.length + publicKey.length, 4).switchEndian().toInt();\n    const newPublicKey = Abstract.readBCWithSize(raw, 48 + payload.length + publicKey.length).value;\n\n    const op = new BuyAccount(sender, target, amount, price, seller, newPublicKey);\n\n    //op.withFee(dataType, dataSequence, amount);\n    //op.withFee(fee);\n    //op.withPayload(payload);\n\n    return op;*/\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * Gets the change type of the op.\n *\n * @param {ChangeAccountInfo} op\n * @returns {number}\n */\nfunction getChangeType(op) {\n  let changeType = 0;\n\n  if (op[P_WITH_NEW_PUBKEY] === true) {\n    changeType |= 1;\n  }\n  if (op[P_WITH_NEW_NAME] === true) {\n    changeType |= 2;\n  }\n  if (op[P_WITH_NEW_TYPE] === true) {\n    changeType |= 4;\n  }\n\n  return changeType;\n}\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 8;\n  }\n\n  /**\n     * Constructor.\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  /**\n     * Will set the new public key.\n     *\n     * @param {PublicKey} publicKey\n     * @returns {ChangeAccountInfo}\n     */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(getChangeType(this)),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromBcWithSize(BC.fromString(this[P_NEW_NAME].toString())),\n      this.bcFromInt(this[P_NEW_TYPE], 2),\n      this.bcFromInt(ChangeAccountInfo.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeAccountInfo.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(getChangeType(this)),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromBcWithSize(BC.fromString(this[P_NEW_NAME].toString())),\n      this.bcFromInt(this[P_NEW_TYPE], 2),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKey extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 2;\n  }\n\n  /**\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {PublicKey} newPublicKey\n     */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKey.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKey.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 7;\n  }\n\n  /**\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKeySigned.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the raw implementation.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKeySigned.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Data ops are signed with the digest, not the hash of the digest.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   */\n  sign(keyPair, nOperation) {\n    super.sign(keyPair, nOperation, true);\n  }\n}\n\nmodule.exports = Operation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SENDER = Symbol('sender');\nconst P_ACCOUNT_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A transaction object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 1;\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n     * Creates a new Transaction instance with the given data. The payload is\n     * empty by default and not encoded.\n     *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n}\n\nmodule.exports = Operation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 4;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   * @param price\n   * @param accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest2() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_ACCOUNT_TO_PAY].account, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      // this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(this[P_LOCKED_UNTIL_BLOCK], 4),\n      this.bcFromInt(Operation.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw2() {\n    return BC.concat(\n      this.bcFromInt(Operation.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(4, 2), // list account for sale\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_ACCOUNT_TO_PAY].account, 4),\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this.bcFromInt(0, 2), // x length\n      this.bcFromInt(0, 2), // y length\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(this[P_LOCKED_UNTIL_BLOCK], 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = Operation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 5;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n}\n\nmodule.exports = Operation;\n"],"sourceRoot":""}