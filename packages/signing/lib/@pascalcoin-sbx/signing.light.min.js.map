{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Coding/PublicKeyWithLength.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/Operation.js","webpack://@pascalcoin-sbx/signing/./src/RawOperationsCoder.js","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/crypto\"","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/RawOperations.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BC","Currency","Types","PascalCoinInfo","P_PAYLOAD","P_S","P_R","P_FEE","P_N_OPERATION","constructor","fromString","withPayload","payload","withFee","fee","withMinFee","lastKnownBlock","MIN_FEE","withNOperation","nOperation","withSign","isSigned","usesDigestToSign","Sha","Keys","Operations","sign","keyPair","operation","digest","digestCoderFor","opType","encodeToBytes","signResult","signWithDigest","hash","sha256","signWithHash","Items","ChangeKey","ChangeKeySigned","ChangeAccountInfo","Operation","RawCoder","DigestCoder","Data","Transaction","ListAccountForSale","DeListAccountForSale","BuyAccount","Abstract","PublicKey","AccountNumber","AccountName","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_NEW_PUBLIC_KEY","P_NEW_NAME","P_NEW_TYPE","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","accountSigner","accountTarget","super","empty","signer","target","newPublicKey","newName","newType","changeType","withNewPublicKey","publicKey","withNewName","withNewType","Coding","CompositeType","description","addSubType","Pascal","NOperation","Core","BytesWithLength","withFixedValue","Int8","Int16","decodeFromBytes","bc","decoded","op","type","signFromDecoded","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","P_AMOUNT","sender","withDataType","dataType","parseInt","withDataSequence","dataSequence","withAmount","amount","Endian","LITTLE_ENDIAN","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","price","accountToPay","lockedUntilBlock","asPrivateSale","PublicKeyWithLength","OpType","Int32","PascalPublicKey","publicKeyCoding","id","pubKey","parsed","x","y","curve","P_SENDER","P_TARGET","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","seller","TransactionRawCoder","DataRawCoder","ListRawCoder","DeListRawCoder","ChangeAccountInfoRawCoder","operationType","Decissive","markerValue","Error","Repeating","Signer","RawOperations","RawOperationsCoder","OPTYPE","concat","bcFromInt","account","toMolina","encode","toRaw","bcFromBcWithSize","length","bcFromSign","BytesWithoutLength","Curve","StringWithoutLength","typeInfo","info","hierarchy","push","OperationListCoder","P_OPERATIONS","P_CODER","P_SIGNER","addOperation","optype","operations","count"],"mappings":"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","file":"@pascalcoin-sbx/signing.light.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [\"@pascalcoin-sbx/common\", \"@pascalcoin-sbx/crypto\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory(root[\"@pascalcoin-sbx/common\"], root[\"@pascalcoin-sbx/crypto\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst PascalCoinInfo = require('@pascalcoin-sbx/common').PascalCoinInfo;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n  }\n\n  /**\n   * Sets the payload of the transaction instance.\n   *\n   * @param {BC} payload\n   *\n   * @returns {Abstract}\n   */\n  withPayload(payload) {\n    this[P_PAYLOAD] = payload;\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee(lastKnownBlock = null) {\n    this[P_FEE] = PascalCoinInfo.MIN_FEE(lastKnownBlock);\n    return this;\n  }\n\n  withNOperation(nOperation) {\n    this[P_N_OPERATION] = nOperation;\n    return this;\n  }\n\n  withSign(r, s) {\n    this[P_R] = r;\n    this[P_S] = s;\n  }\n\n  /**\n   * Gets the prepared payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the r value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n   * Gets the s value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n   * Gets the fee.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the n operation.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n\n  usesDigestToSign() {\n    return false;\n  }\n\n}\n\nmodule.exports = Abstract;\n","const Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\nconst Operations = require('./Operations');\n\n/**\n * Signs the given digest with the given keypair and returns the r and s\n * values (because thats all that is needed).\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n */\nfunction signWithHash(keyPair, digest) {\n  const hash = Sha.sha256(digest);\n\n  return Keys.sign(keyPair, hash);\n}\n\nfunction signWithDigest(keyPair, digest) {\n  return Keys.sign(keyPair, digest);\n}\n\nclass Signer {\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, operation) {\n    const DigestCoder = Operations.digestCoderFor(operation);\n    const digest = new DigestCoder(operation.opType).encodeToBytes(operation);\n    let signResult;\n\n    // TODO: check DATA operation\n    if (operation.usesDigestToSign() === true) {\n      signResult = signWithDigest(keyPair, digest);\n    } else {\n      signResult = signWithHash(keyPair, digest);\n    }\n\n    // save results\n    return signResult;\n  }\n}\n\nmodule.exports = Signer;\n","let Items = {\n  ChangeKey: require('./ChangeKey'),\n  ChangeKeySigned: require('./ChangeKeySigned'),\n  ChangeAccountInfo: {\n    Operation: require('./ChangeAccountInfo/Operation'),\n    RawCoder: require('./ChangeAccountInfo/RawCoder'),\n    DigestCoder: require('./ChangeAccountInfo/DigestCoder')\n  },\n  Data: {\n    Operation: require('./Data/Operation'),\n    RawCoder: require('./Data/RawCoder'),\n    DigestCoder: require('./Data/DigestCoder')\n  },\n  Transaction: {\n    Operation: require('./Transaction/Operation'),\n    RawCoder: require('./Transaction/RawCoder'),\n    DigestCoder: require('./Transaction/DigestCoder')\n  },\n  ListAccountForSale: {\n    Operation: require('./ListAccountForSale/Operation'),\n    RawCoder: require('./ListAccountForSale/RawCoder'),\n    DigestCoder: require('./ListAccountForSale/DigestCoder')\n  },\n  DeListAccountForSale: {\n    Operation: require('./DeListAccountForSale/Operation'),\n    RawCoder: require('./DeListAccountForSale/RawCoder'),\n    DigestCoder: require('./DeListAccountForSale/DigestCoder')\n  },\n  BuyAccount: {\n    Operation: require('./BuyAccount/Operation'),\n    RawCoder: require('./BuyAccount/RawCoder'),\n    DigestCoder: require('./BuyAccount/DigestCoder')\n  }\n};\n\nItems.digestCoderFor = operation => {\n  return Items[operation.constructor.name].DigestCoder;\n};\nItems.rawCoderFor = operation => {\n  return Items[operation.constructor.name].RawCoder;\n};\n\nmodule.exports = Items;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 8;\n  }\n\n  /**\n     * Constructor.\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the change type of the op.\n   *\n   * @returns {number}\n   */\n  get changeType() {\n    let changeType = 0;\n\n    if (this[P_WITH_NEW_PUBKEY] === true) {\n      changeType |= 1;\n    }\n    if (this[P_WITH_NEW_NAME] === true) {\n      changeType |= 2;\n    }\n    if (this[P_WITH_NEW_TYPE] === true) {\n      changeType |= 4;\n    }\n\n    return changeType;\n  }\n\n  /**\n     * Will set the new public key.\n     *\n     * @param {PublicKey} publicKey\n     * @returns {ChangeAccountInfo}\n     */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('buy_operation_raw');\n    this.description('Encoded BuyAccount Operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withNewType(decoded.type);\n    op.withNewName(decoded.name);\n    op.withNewPublicKey(decoded.newPublicKey);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass Data extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  usesDigestToSign() {\n    return true;\n  }\n}\n\nmodule.exports = Data;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.sender,\n      decoded.target\n    );\n\n    op.withDataType(decoded.dataType);\n    op.withDataSequence(decoded.dataSequence);\n    op.withAmount(decoded.amount);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SENDER = Symbol('sender');\nconst P_ACCOUNT_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A transaction object that can be signed.\n */\nclass Transaction extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 1;\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n     * Creates a new Transaction instance with the given data. The payload is\n     * empty by default and not encoded.\n     *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super();\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n}\n\nmodule.exports = Transaction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor() {\n    super('data_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.sender,\n      decoded.target,\n      decoded.amount\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass ListAccountForSale extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 4;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   * @param price\n   * @param accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n}\n\nmodule.exports = ListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('list_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(opType)\n        .description(`The optype of the operation (${opType})`)\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.target,\n      decoded.price,\n      decoded.accountToPay\n    );\n\n    op.asPrivateSale(decoded.newPublicKey, decoded.lockedUntilBlock);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","const PublicKey = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PublicKey;\nconst BytesWithLength = require('@pascalcoin-sbx/common').Coding.Core.BytesWithLength;\nconst PascalPublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst publicKeyCoding = new PublicKey();\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKeyWithLength extends BytesWithLength {\n\n  constructor(id = null) {\n    super(id || 'pubkey', 16);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc) {\n    const pubKey = super.decodeFromBytes(bc);\n    const parsed = publicKeyCoding.decodeFromBytes(pubKey);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {*} value\n   * @returns {PascalPublicKey}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(publicKeyCoding.encodeToBytes(value));\n  }\n}\n\nmodule.exports = PublicKeyWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass DeListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 5;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n}\n\nmodule.exports = DeListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(opType)\n        .description(`The optype of the operation (${opType})`)\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  get sender() {\n    return this[P_SENDER];\n  }\n\n  get target() {\n    return this[P_TARGET];\n  }\n\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  get price() {\n    return this[P_ACCOUNT_PRICE];\n  }\n\n  get seller() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst TransactionRawCoder = require('./Operations/Transaction/RawCoder');\nconst DataRawCoder = require('./Operations/Data/RawCoder');\nconst ListRawCoder = require('./Operations/ListAccountForSale/RawCoder');\nconst DeListRawCoder = require('./Operations/DeListAccountForSale/RawCoder');\nconst ChangeAccountInfoRawCoder = require('./Operations/ChangeAccountInfo/RawCoder');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawOperationsCoder extends CompositeType {\n  constructor() {\n    super('combined signed operations');\n    super.description('Coder to combine multiple operations');\n    this.addSubType(new Coding.Core.Int32('count', true, Endian.LITTLE_ENDIAN));\n    const operationType = new CompositeType('operation');\n\n    operationType.addSubType(new Coding.Pascal.OpType('optype', 4));\n    operationType.addSubType(new Coding.Decissive('operation', 'optype', (markerValue) => {\n      switch (markerValue) {\n        case 1:\n          return new TransactionRawCoder(1);\n        case 4:\n          return new ListRawCoder(4);\n        case 5:\n          return new DeListRawCoder(5);\n        case 8:\n          return new ChangeAccountInfoRawCoder(8);\n        case 10:\n          return new DataRawCoder(10);\n        default:\n          throw new Error('Unable to map marker to a coder.');\n      }\n    }));\n    this.addSubType(new Coding.Repeating('operations', operationType));\n  }\n}\n\nmodule.exports = RawOperationsCoder;\n","module.exports = {\n  Signer: require('./src/Signer'),\n  RawOperations: require('./src/RawOperations'),\n  RawOperationsCoder: require('./src/RawOperationsCoder'),\n  Coding: {\n    PublicKeyWithLength: require('./src/Coding/PublicKeyWithLength')\n  },\n  Operations: require('./src/Operations')\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKey extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 2;\n  }\n\n  /**\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {PublicKey} newPublicKey\n     */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKey.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKey.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 7;\n  }\n\n  /**\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKeySigned.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the raw implementation.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKeySigned.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('change_info_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The buy account optype as 8 bit int8')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated with the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The optype as 8bit int.')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n\n    super('tx_operation_digest');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .description('Operation type.')\n        .withFixedValue(opType)\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.StringWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The optype as 8bit int.')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be de-listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock')\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The optype as 8bit int.')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  constructor(opType) {\n    super('buy_operation_raw');\n    this.description('The coder for the raw representation of a BuyAccount operation');\n    this.description('Encoded BuyAccount Operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount to pay for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('type', true, Endian.LITTLE_ENDIAN)\n        .description('Fixed type for a \"Buy account\" transaction.')\n        .withFixedValue(2)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key that will own the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.sender,\n      decoded.target,\n      decoded.amount,\n      decoded.price,\n      decoded.seller,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('buy_operation_digest');\n    super.description('Digest for buy account operation');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount paid for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The buy account optype as 8 bit int8')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Signer = require('./Signer');\nconst OperationListCoder = require('./RawOperationsCoder');\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_CODER = Symbol('coder');\nconst P_SIGNER = Symbol('signer');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass RawOperations {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n    this[P_CODER] = new OperationListCoder();\n    this[P_SIGNER] = new Signer();\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {RawOperations}\n   */\n  addOperation(keyPair, operation) {\n    if (operation.isSigned) {\n      throw new Error('Operation should not be signed.');\n    }\n\n    let sign = this[P_SIGNER].sign(keyPair, operation);\n\n    operation.withSign(sign.r, sign.s);\n    this[P_OPERATIONS].push({\n      optype: operation.opType,\n      operation: operation\n    });\n    return this;\n  }\n\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  get count() {\n    return this[P_OPERATIONS].length;\n  }\n}\n\nmodule.exports = RawOperations;\n"],"sourceRoot":""}