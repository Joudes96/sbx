{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing/./src/OperationsBuilder.js","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/crypto\"","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DelistAccountForSale.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__6__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Signer","BC","Currency","Types","P_PAYLOAD","P_S","P_R","P_FEE","P_N_OPERATION","constructor","fromString","withPayload","payload","withFee","fee","withMinFee","MIN_FEE","digest","Error","sign","keyPair","nOperation","useDigest","signResult","signWithDigest","signWithHash","toRaw","[object Object]","bcFromInt","size","fromInt","switchEndian","bcFromStringWithSize","concat","length","bcFromString","bcFromBcWithSize","offset","data","slice","toInt","bcFromSign","isSigned","Sha","Keys","hash","sha256","OperationsBuilder","Operations","P_OPERATIONS","addOperation","operation","push","build","bc","forEach","op","parse","raw","BuyAccount","ChangeAccountInfo","ChangeKey","ChangeKeySigned","Data","DelistAccountForSale","ListAccountForSale","Transaction","Abstract","PublicKey","AccountNumber","P_SENDER","P_TARGET","P_AMOUNT","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","P_NEW_PUBLIC_KEY","OPTYPE","sender","target","amount","price","seller","newPublicKey","super","account","toMolina","empty","curve","id","encode","AccountName","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_NEW_NAME","P_NEW_TYPE","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","getChangeType","changeType","accountSigner","accountTarget","withNewPublicKey","publicKey","withNewName","newName","withNewType","newType","toString","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","signer","withDataType","dataType","parseInt","withDataSequence","dataSequence","withAmount","from","readBCWithSize","fromMolina","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","accountToPay","asPrivateSale","lockedUntilBlock"],"mappings":"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","file":"@pascalcoin-sbx/signing.light.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [\"@pascalcoin-sbx/common\", \"@pascalcoin-sbx/crypto\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory(root[\"@pascalcoin-sbx/common\"], root[\"@pascalcoin-sbx/crypto\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__6__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst Signer = require('./Signer');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n  constructor() {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n  }\n\n  /**\n     * Sets the payload of the transaction instance.\n     *\n     * @param {BC} payload\n     *\n     * @returns {Abstract}\n     */\n  withPayload(payload) {\n    this[P_PAYLOAD] = payload;\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee() {\n    this[P_FEE] = Currency.MIN_FEE;\n    return this;\n  }\n\n  /**\n     * Returns a BC with the digest that needs to be hashed.\n     *\n     * @return {BC}\n     */\n  // eslint-disable-next-line class-methods-use-this\n  digest() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, nOperation, useDigest = false) {\n    this[P_N_OPERATION] = nOperation;\n    const digest = this.digest();\n\n    let signResult;\n\n    if (useDigest === true) {\n      signResult = Signer.signWithDigest(keyPair, digest);\n    } else {\n      signResult = Signer.signWithHash(keyPair, digest);\n    }\n\n    // save results\n    this[P_R] = signResult.r;\n    this[P_S] = signResult.s;\n\n    return this;\n  }\n\n  /**\n     * Returns the BC for a rawoperations info.\n     *\n     * @return {BC}\n     */\n  toRaw() { // eslint-disable-line class-methods-use-this\n    throw new Error('Not implemented');\n  }\n\n  /**\n     * Returns a new instance of the derived class based on the given raw\n     * string.\n     *\n     * @return {Abstract}\n     */\n  // eslint-disable-next-line class-methods-use-this\n  static fromRaw() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n     * Gets a BC from the given int value.\n     *\n     * @param {Number} value\n     * @param {Number|undefined} size\n     * @returns {BC}\n     */\n  // eslint-disable-next-line class-methods-use-this\n  bcFromInt(value, size = null) {\n    return (size === null ?\n      BC.fromInt(value) :\n      BC.fromInt(value, size)).switchEndian();\n  }\n\n  /**\n     * Gets the given string as a byte collection with the size of the string\n     * prepended.\n     *\n     * @param {String} value\n     * @returns {BC}\n     */\n  bcFromStringWithSize(value) {\n    return BC.concat(\n      this.bcFromInt(value.length, 2),\n      this.bcFromString(value),\n    );\n  }\n\n  /**\n   * Gets the given BC as a byte collection with the size of\n   * the BC prepended.\n   *\n   * @param {BC} value\n   * @returns {BC}\n   */\n  bcFromBcWithSize(value) {\n    return BC.concat(\n      this.bcFromInt(value.length, 2),\n      value,\n    );\n  }\n\n  /**\n   * Extracts a BC with size from the given BC.\n   *\n   * @param {BC} value\n   * @param {Number} offset\n   * @returns {BC}\n   */\n  static readBCWithSize(value, offset) {\n    const data = {\n      size: value.slice(offset, offset + 2).switchEndian().toInt()\n    };\n\n    data.value = value.slice(offset + 2, offset + 2 + data.size);\n    return data;\n  }\n\n  /**\n     * Gets the BC from the given string.\n     *\n     * @param {String} value\n     * @returns {BC}\n     */\n  bcFromString(value) { // eslint-disable-line class-methods-use-this\n    return BC.fromString(value);\n  }\n\n  /**\n     * Returns the BC for an r and s signing result.\n     *\n     * @param {BC} r\n     * @param {BC} s\n     * @returns {BC}\n     */\n  bcFromSign(r, s) {\n    return BC.concat(\n      this.bcFromBcWithSize(r),\n      this.bcFromBcWithSize(s),\n    );\n  }\n\n  /**\n     * Gets the prepared payload.\n     *\n     * @returns {BC}\n     */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n     * Gets the r value of the sign result.\n     *\n     * @returns {BC|null}\n     */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n     * Gets the s value of the sign result.\n     *\n     * @returns {BC|null}\n     */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n     * Gets the fee.\n     *\n     * @returns {Currency}\n     */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n     * Gets the n operation.\n     *\n     * @returns {Number}\n     */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n}\n\nmodule.exports = Abstract;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\n\nclass Signer {\n  /**\n   * Signs the given digest with the given keypair and returns the r and s\n   * values (because thats all that is needed).\n   *\n   * @param {KeyPair} keyPair\n   * @param {BC} digest\n   */\n  static signWithHash(keyPair, digest) {\n    const hash = Sha.sha256(digest);\n\n    return Keys.sign(keyPair, hash);\n  }\n\n  static signWithDigest(keyPair, digest) {\n    return Keys.sign(keyPair, digest);\n  }\n}\n\nmodule.exports = Signer;\n","module.exports = {\n  OperationsBuilder: require('./src/OperationsBuilder'),\n  Signer: require('./src/Signer'),\n  Operations: require('./src/Operations')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_OPERATIONS = Symbol('operations');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass OperationsBuilder {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {OperationsBuilder}\n   */\n  addOperation(operation) {\n    if (!operation.isSigned) {\n      throw new Error('Operation needs to be signed.');\n    }\n\n    this[P_OPERATIONS].push(operation);\n    return this;\n  }\n\n  /**\n   * Builds the operations.\n   *\n   * @returns {BC}\n   */\n  build() {\n    let bc = BC.fromInt(this[P_OPERATIONS].length, 4).switchEndian();\n\n    this[P_OPERATIONS].forEach((op) => {\n      bc = BC.concat(bc, op.toRaw());\n    });\n\n    return bc;\n  }\n\n  parse(raw) {\n\n    // let numOperations = raw.slice(0, 3);\n    let bc = BC.fromInt(this[P_OPERATIONS].length, 4).switchEndian();\n\n    this[P_OPERATIONS].forEach((op) => {\n      bc = BC.concat(bc, op.toRaw());\n    });\n\n    return bc;\n  }\n}\n\nmodule.exports = OperationsBuilder;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = {\n  BuyAccount: require('./BuyAccount'),\n  ChangeAccountInfo: require('./ChangeAccountInfo'),\n  ChangeKey: require('./ChangeKey'),\n  ChangeKeySigned: require('./ChangeKeySigned'),\n  Data: require('./Data'),\n  DelistAccountForSale: require('./DelistAccountForSale'),\n  ListAccountForSale: require('./ListAccountForSale'),\n  Transaction: require('./Transaction')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this.bcFromInt(this[P_ACCOUNT_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_SELLER_ACCOUNT].account, 4),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      BC.fromInt(BuyAccount.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the signed raw operations.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(BuyAccount.OPTYPE, 4),\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(2, 1), // buy account\n      this.bcFromInt(this[P_ACCOUNT_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_SELLER_ACCOUNT].account, 4),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n\n  /**\n   * Gets a new Operation object from the given signed operation.\n   *\n   * @param {BC|Buffer|String|Uint8Array} raw\n   * @returns {BC}\n   */\n  static fromRaw(raw) {\n    /*\n    raw = BC.from(raw);\n    const sender = raw.slice(4, 8).switchEndian().toInt();\n    const target = raw.slice(12, 16).switchEndian().toInt();\n    const amount = raw.slice(16, 24).switchEndian().toInt();\n    const fee = raw.slice(24, 32).switchEndian().toInt();\n    const payload = Abstract.readBCWithSize(raw, 32).value;\n    const publicKey = Abstract.readBCWithSize(raw, 34 + payload.length).value;\n    const price = raw.slice(36 + payload.length + publicKey.length, 8).switchEndian().toInt();\n    const seller = raw.slice(44 + payload.length + publicKey.length, 4).switchEndian().toInt();\n    const newPublicKey = Abstract.readBCWithSize(raw, 48 + payload.length + publicKey.length).value;\n\n    const op = new BuyAccount(sender, target, amount, price, seller, newPublicKey);\n\n    //op.withFee(dataType, dataSequence, amount);\n    //op.withFee(fee);\n    //op.withPayload(payload);\n\n    return op;*/\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * Gets the change type of the op.\n *\n * @param {ChangeAccountInfo} op\n * @returns {number}\n */\nfunction getChangeType(op) {\n  let changeType = 0;\n\n  if (op[P_WITH_NEW_PUBKEY] === true) {\n    changeType |= 1;\n  }\n  if (op[P_WITH_NEW_NAME] === true) {\n    changeType |= 2;\n  }\n  if (op[P_WITH_NEW_TYPE] === true) {\n    changeType |= 4;\n  }\n\n  return changeType;\n}\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 8;\n  }\n\n  /**\n     * Constructor.\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  /**\n     * Will set the new public key.\n     *\n     * @param {PublicKey} publicKey\n     * @returns {ChangeAccountInfo}\n     */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(getChangeType(this)),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromBcWithSize(BC.fromString(this[P_NEW_NAME].toString())),\n      this.bcFromInt(this[P_NEW_TYPE], 2),\n      this.bcFromInt(ChangeAccountInfo.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeAccountInfo.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(getChangeType(this)),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromBcWithSize(BC.fromString(this[P_NEW_NAME].toString())),\n      this.bcFromInt(this[P_NEW_TYPE], 2),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKey extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 2;\n  }\n\n  /**\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {PublicKey} newPublicKey\n     */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKey.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKey.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 7;\n  }\n\n  /**\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKeySigned.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the raw implementation.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKeySigned.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass Data extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_SENDER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_DATA_TYPE], 2),\n      this.bcFromInt(this[P_DATA_SEQUENCE], 2),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      this.bcFromInt(Data.OPTYPE, 1),\n    );\n  }\n\n  /**\n   * Gets the raw implementation.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(Data.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_SENDER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_DATA_TYPE], 2),\n      this.bcFromInt(this[P_DATA_SEQUENCE], 2),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n\n  /**\n   * Gets a new Operation object from the given signed operation.\n   *\n   * @param {BC|Buffer|String|Uint8Array} raw\n   * @returns {BC}\n   */\n  static fromRaw(raw) {\n    raw = BC.from(raw);\n    const signer = raw.slice(4, 8).switchEndian().toInt();\n    const sender = raw.slice(8, 12).switchEndian().toInt();\n    const target = raw.slice(12, 16).switchEndian().toInt();\n    const dataType = raw.slice(20, 22).switchEndian().toInt();\n    const dataSequence = raw.slice(22, 24).switchEndian().toInt();\n    const amount = raw.slice(24, 32).switchEndian().toInt();\n    const fee = raw.slice(32, 40).switchEndian().toInt();\n    const payload = Data.readBCWithSize(raw, 40).value;\n\n    const op = new Data(signer, sender, target);\n\n    op.withDataType(dataType);\n    op.withDataSequence(dataSequence);\n    op.withAmount(Currency.fromMolina(amount));\n    op.withFee(Currency.fromMolina(fee));\n    op.withPayload(payload);\n\n    return op;\n  }\n\n  /**\n   * Data ops are signed with the digest, not the hash of the digest.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   */\n  sign(keyPair, nOperation) {\n    super.sign(keyPair, nOperation, true);\n  }\n}\n\nmodule.exports = Data;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass DelistAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 5;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_ACCOUNT_TO_PAY].account, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(this[P_LOCKED_UNTIL_BLOCK], 4),\n      this.bcFromInt(DelistAccountForSale.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the raw implementation.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(DelistAccountForSale.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(5, 2), // list account for sale\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = DelistAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass ListAccountForSale extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 4;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   * @param price\n   * @param accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_ACCOUNT_TO_PAY].account, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(this[P_LOCKED_UNTIL_BLOCK], 4),\n      this.bcFromInt(ListAccountForSale.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ListAccountForSale.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(4, 2), // list account for sale\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_ACCOUNT_TO_PAY].account, 4),\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this.bcFromInt(0, 2), // x length\n      this.bcFromInt(0, 2), // y length\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(this[P_LOCKED_UNTIL_BLOCK], 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A transaction object that can be signed.\n */\nclass Transaction extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 1;\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_SENDER];\n  }\n\n  /**\n     * Creates a new Transaction instance with the given data. The payload is\n     * empty by default and not encoded.\n     *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      BC.fromInt(0, 2),\n      BC.fromInt(Transaction.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the signed raw operations.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(Transaction.OPTYPE, 4),\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = Transaction;\n"],"sourceRoot":""}