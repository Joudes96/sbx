{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/../common/index.js","webpack://@pascalcoin-sbx/signing/../common/src/BC.js","webpack://@pascalcoin-sbx/signing/../common/src/Endian.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic.js","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/utils.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/minimalistic-assert/index.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/Abstract.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/common.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/BytesWithoutLength.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/aes.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/inherits/inherits.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/curve/index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/crypto-js/core.js","webpack://@pascalcoin-sbx/signing/./src/Coding/PublicKeyWithLength.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Sender/Sender.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/BytesWithLength.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/ec/index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/Pascal/KDF.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Receiver/Receiver.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Changer/Changer.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/../common/src/Base58.js","webpack://@pascalcoin-sbx/signing/external \"buffer\"","webpack://@pascalcoin-sbx/signing/../common/src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/signing/../common/src/Sha.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/signing/../common/src/Util.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/StringWithLength.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/StringWithoutLength.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/ECDH.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/AES/CBCZeroPadding.js","webpack://@pascalcoin-sbx/signing/../crypto/src/mipher/AES_CBC_ZeroPadding.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/padding.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/sha/common.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/sha/256.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/sha/512.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/minimalistic-crypto-utils/lib/utils.js","webpack://@pascalcoin-sbx/signing/external \"crypto\"","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/AES/CBCPKCS7.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/Pascal/ECIES/Data.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/random.js","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Receiver/RawAndDigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/RawOperationsCoder.js","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/signing/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/index.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/signing/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/index.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Repeating.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Decissive.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Core/BytesFixedLength.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/AccountName.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/signing/../common/src/Coding/Pascal/OperationHash.js","webpack://@pascalcoin-sbx/signing/../crypto/index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/blockmode.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hmac-drbg/lib/hmac-drbg.js","webpack://@pascalcoin-sbx/signing/external \"util\"","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/inherits/inherits_browser.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/sha.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/sha/1.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/sha/224.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/sha/384.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/ripemd.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/hash.js/lib/hash/hmac.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/utils.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/brorand/index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/curve/base.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/curve/short.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/curve/mont.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/curve/edwards.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/curves.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/eddsa/index.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/eddsa/key.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/eddsa/signature.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/ec/key.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/elliptic/lib/elliptic/ec/signature.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/Pascal/ECIES.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/Pascal/ECIES/Coding.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/crypto-js/enc-hex.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/crypto-js/hmac-md5.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/crypto-js/md5.js","webpack://@pascalcoin-sbx/signing//home/ben/Code/crypto/pascalcoin/untitled/node_modules/crypto-js/hmac.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/Pascal/Password.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Encryption/Pascal/PrivateKey.js","webpack://@pascalcoin-sbx/signing/../crypto/src/Keys.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Sender/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Changer/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Sender/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Changer/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/RawOperations.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Base58","require","BC","Endian","PascalCoinInfo","Sha","Util","Types","Coding","P_BUFFER","constructor","buffer","Buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","e","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","detect","method","readInt32","buf","allocUnsafe","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","assert","val","msg","inherits","ctor","superCtor","super_","TempCtor","BN","number","base","isBN","negative","words","red","_init","wordSize","parseHex","len","Math","min","charCodeAt","parseBase","mul","num","Array","isArray","max","left","right","cmp","_initNumber","_initArray","replace","_parseHex","_parseBase","strip","toArray","ceil","j","w","off","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","dest","clone","_expand","size","_normSign","inspect","zeros","groupSizes","groupBases","smallMulTo","out","lo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","ret","toJSON","toBuffer","toArrayLike","ArrayType","byteLength","reqLength","littleEndian","res","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","add","sub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","x","y","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","split","imulK","input","output","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","elliptic","version","utils","rand","curve","curves","ec","eddsa","Currency","P_PAYLOAD","P_S","P_R","P_FEE","P_N_OPERATION","withPayload","payload","withFee","fee","withMinFee","lastKnownBlock","MIN_FEE","withNOperation","nOperation","withSign","isSigned","usesDigestToSign","P_ID","P_FIXED_VALUE","P_HAS_FIXED_VALUE","P_DESCRIPTION","id","hasFixedValue","fixedValue","encodedSize","decodeFromBytes","options","all","encodeToBytes","withFixedValue","description","undefined","push","canDecode","isSurrogatePair","htonl","zero2","zero8","enc","toHex32","join32","split32","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","pos","ah","al","bh","sum64_hi","bl","sum64_lo","sum64_4_hi","ch","cl","dh","dl","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","AbstractInt","super","fromInt32","equal","AbstractType","P_SUBTYPES","P_SIZE_ENCODED","subTypes","addSubType","field","obj","forEach","subType","values","objOrArray","empty","idx","subTypeValue","P_ENDIAN","P_UNSIGNED","fromInt16","BlockHash","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","update","_update","digest","_pad","_digest","Convert","str2bin","bin","subarray","hex2bin","indexOf","substr","int2bin","integer","number2bin","floor","f","Float64Array","set","base642bin","base64","strlen","charAt","atob","map","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c2","c3","String","fromCharCode","bin2longbin","longbin","bin2number","bin2base64","url","btoa","apply","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","fill","ind","litteendian","fromInt8","encoded","base_1","blockmode_1","padding_1","AES","keylen","16","rounds","kc","24","32","Rcon","S","S5","T1","T2","T3","T4","T5","T6","T7","T8","U1","U2","U3","U4","B0","B1","B2","B3","F1","x0","x3","packBytes","octets","unpackBytes","packed","keyExpansion","keySched","tk","rconpointer","maxrk","temp","rk","prepare_decryption","rk2","encrypt","pt","t0","t1","t2","t3","r_1","decrypt","ct","selftest","tv_CBC_PKCS7","iv","aes","AES_CBC_PKCS7","ct2","pt2","AES_CBC","cipher","blockmode","CBC","AES_CTR","CTR","PKCS7","pad","AES_CTR_PKCS7","util","short","edwards","CryptoJS","F","subtype","C_lib","lib","Base","extend","overrides","mixIn","init","$super","arguments","properties","propertyName","WordArray","sigBytes","encoder","Hex","stringify","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","random","rcache","m_w","m_z","result","_r","C_enc","hexChars","bite","join","parse","hexStr","hexStrLength","Latin1","latin1Chars","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSizeBytes","nBlocksReady","nWordsReady","_minBufferSize","nBytesReady","_doProcessBlock","processedWords","splice","C_algo","Hasher","cfg","_doReset","messageUpdate","finalize","hash","_doFinalize","_createHelper","hasher","message","_createHmacHelper","HMAC","algo","PublicKey","Pascal","Keys","BytesWithLength","Core","PascalPublicKey","publicKeyCoding","pubKey","parsed","Abstract","AccountNumber","P_ACCOUNT","P_AMOUNT","account","amount","P_VALUE","toFixed","isNegative","pasc","substring","comps","whole","fraction","molina","isVague","toStringOpt","decimals","RegExp","toMolina","addValue","subValue","toPositive","lteq","gteq","bn","serialize","pascal","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","splitted","isNaN","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","keys","xylPublicKey","xOrY","lPrivateKey","supported","Int8","Int16","Int32","BytesWithoutLength","P_LENGTH_FIELD","P_BYTES_FIELD","byteSize","lengthId","lengthDesc","lengthField","CurveType","HmacDRBG","KeyPair","Signature","EC","PresetCurve","nh","precompute","keyPair","keyFromPrivate","priv","fromPrivate","keyFromPublic","pub","fromPublic","genKeyPair","drbg","pers","persEnc","entropy","entropyEnc","nonce","ns2","generate","_truncateToN","truncOnly","sign","bkey","getPrivate","ns1","iter","kp","isInfinity","kpX","getX","recoveryParam","getY","canonical","verify","signature","sinv","u1","u2","_maxwellTrick","jmulAdd","getPublic","eqXToP","mulAdd","recoverPubKey","isYOdd","isSecondKey","pointFromX","rInv","s1","s2","getKeyRecoveryParam","Q","Qprime","common","sha","ripemd","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","password","salt","P_CHANGERS","P_SENDERS","P_RECEIVERS","opType","addSender","sender","addReceiver","receiver","addChanger","changer","senders","sendersCount","receivers","receiversCount","changers","changersCount","AccountName","P_NEW_NAME","P_NEW_TYPE","P_NEW_PUBLIC_KEY","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","newPublicKey","newName","newType","changeType","withNewPublicKey","publicKey","withNewName","withNewType","Operations","signWithHash","operation","digestCoderFor","signResult","signWithDigest","signMultiOperation","keyPairs","console","log","signatures","bs58","encode","decode","block","fromMolina","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","buffers","SHA256","SHA512","hashSize","K","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","cumulative","toBeHashed","string","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","ALLOWED_ALL","ALLOWED_START","validate","toStringEscaped","c1","P_BLOCK","P_MD160","md160","P_KEY","P_CURVE","privateKeyLength","P_X","P_XL","P_Y","P_YL","yl","xl","ecdh","fromInt","validate64Bit","isUnsigned","StringWithoutLength","P_STRING_FIELD","AccountNumberType","CBCZeroPadding","ecCurve","tempKey","pubkey","sharedSecret","derive","secrectkey","privateKey","origMsgLength","ecPrivateKey","ecPublicKey","secrectKey","AES_CBC_ZeroPadding","mipherAES","mipherPadding","ZeroPadding","blocksize","PKCS5","pkcs7","ch32","maj32","p32","ft_1","s0_256","s1_256","g0_256","g1_256","shaCommon","sha256_K","W","sha512_K","ch64_hi","xh","yh","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","arr","mAES","P_PUBLIC_KEY","P_MAC","P_ORIGINAL_DATA_LENGTH","P_ORIGINAL_DATA_LENGTH_INC_PAD_LENGTH","P_ENCRYPTED_DATA","withPublicKey","withMac","mac","withOriginalDataLength","withOriginalDataLengthIncPadLength","withEncryptedData","encryptedData","publicKeyLength","originalDataLength","originalDataLengthIncPadLength","macLength","aes_1","sha256_1","Random","numPools","NUM_POOLS","RESEED_LIMIT","MILLISECONDS_PER_RESEED","gen","genKey","genCnt","poolData","poolEntropy","robin","kbd","mouse","scroll","touch","motion","time","rnd","dom","entropy_level","eventId","reseedCnt","lastReseed","active","stop","stopCollectors","getEntropy","addEntropy","addRandomEvent","collectorCryptoRandom","performance","now","process","hrtime","collectorDom","startCollectors","reseed","seed","Date","valueOf","generateBlocks","blocks","pseudoRandomData","strength","window","addEventListener","collectorClick","collectorKeyboard","collectorScroll","throttle","collectorMouse","collectorMotion","collectorTouch","collectorTime","document","timer","setInterval","removeEventListener","clearInterval","fn","threshold","scope","last","deferTimer","context","args","clearTimeout","setTimeout","pool_idx","ev","char","keyCode","timeStamp","clientX","offsetX","clientY","offsetY","touches","changedTouches","pageX","pageY","pageXOffset","scrollX","pageYOffset","scrollY","accelerationIncludingGravity","alpha","beta","gamma","orientation","documentElement","innerHTML","pid","randomBytes","crypto","getRandomValues","Items","ChangeKey","Operation","RawCoder","DigestCoder","ChangeKeySigned","ChangeAccountInfo","Data","Transaction","ListAccountForSale","DeListAccountForSale","BuyAccount","MultiOperation","Changer","Sender","Receiver","P_SIGNER","accountSigner","signer","CompositeType","PublicKeyWithLength","NOperation","typeInfo","info","hierarchy","decoded","op","P_TARGET","accountTarget","target","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","withDataType","dataType","withDataSequence","dataSequence","withAmount","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","price","accountToPay","lockedUntilBlock","asPrivateSale","ListOperation","OpType","DeList","P_SENDER","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","seller","SenderRawCoder","ReceiverCoder","ChangerRawCoder","Repeating","senderObj","receiverObj","changerObj","TransactionRawCoder","DataRawCoder","ListRawCoder","DeListRawCoder","BuyRawCoder","ChangeKeyRawCoder","ChangeKeySignedRawCoder","ChangeAccountInfoRawCoder","MultiOperationRawCoder","operationType","Decissive","markerValue","Signer","RawOperations","RawOperationsCoder","basex","ALPHABET","TypeError","BASE_MAP","xc","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","b256","it","vch","isBuffer","pbegin","pend","b58","copyProps","src","dst","SafeBuffer","arg","encodingOrOffset","allocUnsafeSlow","encoding","SlowBuffer","webpackPolyfill","deprecate","paths","children","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","OperationHash","PrivateKey","P_PRIVATE_KEY","Int64","StringWithLength","BytesFixedLength","P_REPEAT_LIMIT","P_REPEAT_MARKER","P_TYPE","type","repeatLimit","repeatMarker","limit","counter","item","repeatingType","P_SUBTYPE_RESOLVER","P_MARKER_FIELD","markerField","subTypeResolver","P_SIZE","PublicKeyType","omitXYLenghts","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","PrivateKeyType","AccountNameType","CurrencyType","P_INT_TYPE","OperationHashType","Encryption","ECDH","CBCPKCS7","KDF","ECIES","Password","mipher","ECB","blockcipher","bs","et","ctr","predResist","minEntropy","_reseed","reseedInterval","V","nonceEnc","_hmac","kmac","addEnc","writable","configurable","sha1_K","SHA1","SHA224","SHA384","RIPEMD160","Kh","E","Ah","Bh","Ch","Dh","Eh","T","sh","Hmac","Hash","inner","outer","minAssert","minUtils","getNAF","naf","getJSF","k1","k2","jsf","d1","d2","m8","m14","m24","cachedProperty","computer","parseBytes","intFromLE","Rand","_rand","getBytes","getByte","msCrypto","BaseCurve","conf","zero","two","pointFromJSON","gRed","_wnafT1","_wnafT2","_wnafT3","_wnafT4","adjustCount","redN","BasePoint","precomputed","point","_fixedNafMul","doubles","_getDoubles","I","step","repr","nafW","jpoint","mixedAdd","points","toP","_wnafMul","nafPoints","_getNAFPoints","dblp","_wnafMulAdd","defW","coeffs","jacobianResult","wndWidth","comb","toJ","index","ja","jb","decodePoint","encodeCompressed","_encode","compact","power","_getBeta","_hasDoubles","dbl","ShortCurve","tinv","zeroA","threeA","endo","_getEndomorphism","_endoWnafT1","_endoWnafT2","Point","isRed","inf","JPoint","zOne","lambda","betas","_getEndoRoots","lambdas","basis","vec","_getEndoBasis","ntinv","prevR","aprxSqrt","v","y1","y2","len1","_endoSplit","v1","v2","p1","p2","q1","q2","ax","rhs","_endoWnafMulAdd","npoints","ncoeffs","fromJSON","pre","endoMul","JSON","obj2point","nx","ny","ys1","dyinv","_precompute","negate","zinv","zinv2","ay","pz2","z2","nz","jx","jy","jz","jz4","jyd","jx2","jyd2","jyd4","dny","_zeroDbl","_threeDbl","_dbl","xx","yy","yyyy","yyyy8","c8","beta4","beta8","ggamma8","jy2","jxd4","jyd8","trpl","zz","mm","ee","yyu4","kbase","z3","pz3","zs","MontCurve","i4","a24","normalize","aa","bb","diffAdd","da","cb","jumlAdd","other","EdwardsCurve","twisted","mOneA","dd","oneC","_mulA","_mulC","lhs","pointFromY","_extDbl","nt","_projDbl","_extAdd","_projAdd","zi","defineCurve","EDDSA","pointClass","encodingLength","secret","keyFromSecret","hashInt","messagePrefix","R","Rencoded","encodePoint","s_","pubBytes","makeSignature","sig","SG","fromSecret","lastIx","normed","xIsOdd","encodeInt","decodeInt","isPoint","params","_secret","_pub","_pubBytes","privBytes","getSecret","_R","_S","_Rencoded","_Sencoded","Sencoded","toBytes","_importPrivate","privEnc","_importPublic","pubEnc","reason","_importDER","Position","place","getLength","initial","octetLen","rmPadding","constructLength","LN2","slen","toDER","backHalf","ECIESData","ECIESCoding","CryptoJSEncHex","CryptoJSHmacMd5","keyData","dec","CommonCoding","HmacMD5","MD5","_hash","M","offset_i","M_offset_i","M_offset_0","M_offset_1","M_offset_2","M_offset_3","M_offset_4","M_offset_5","M_offset_6","M_offset_7","M_offset_8","M_offset_9","M_offset_10","M_offset_11","M_offset_12","M_offset_13","M_offset_14","M_offset_15","FF","GG","HH","II","nBitsTotal","nBitsLeft","nBitsTotalH","nBitsTotalL","H_i","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","mipherRandom","randomGenerator","keyInfo","PascalCoin","encrypted","rest","privKeyCoder","PrivateKeyCoder","encData","privateKeyDecryptedAndEncoded","privateKeyEncoded","privateKeyEncrypted","getDefaultCurve","ecPair","SenderDigestCoder","ChangerDigestCoder","OperationListCoder","P_OPERATIONS","P_CODER","addMultiOperation","optype","addOperation","operations"],"mappings":"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xBupB,EAAA,WAIA,SAAAA,IAEAzpB,KAAAslB,UAAA,GACAtlB,KAAA0pB,OAAA,CACAC,GAAA,CAAiBC,OAAA,GAAAC,GAAA,GACjBC,GAAA,CAAiBF,OAAA,GAAAC,GAAA,GACjBE,GAAA,CAAiBH,OAAA,GAAAC,GAAA,IAGjB7pB,KAAAgqB,KAAA,IAAA3mB,WAAA,CACA,wGAGArD,KAAAiqB,EAAA,IAAA5mB,WAAA,CACA,iHACA,yGACA,wGACA,yGACA,0GACA,0GACA,8GACA,4GACA,2DAGArD,KAAAkqB,GAAA,IAAA7mB,WAAA,CACA,4GACA,yGACA,gHACA,uGACA,8GACA,0GACA,0GACA,8GACA,wDAEArD,KAAAmqB,GAAA,IAAA1jB,YAAA,CACA,4KACA,8KACA,2KACA,0KACA,6KACA,qKACA,4KACA,2KACA,2KACA,8KACA,6KACA,4KACA,6KACA,0KACA,2KACA,8KAEAzG,KAAAoqB,GAAA,IAAA3jB,YAAA,CACA,4KACA,gLACA,2KACA,uKACA,yKACA,qKACA,6KACA,6KACA,4KACA,4KACA,2KACA,6KACA,4KACA,2KACA,6KACA,8KAEAzG,KAAAqqB,GAAA,IAAA5jB,YAAA,CACA,4KACA,gLACA,2KACA,uKACA,yKACA,qKACA,6KACA,6KACA,4KACA,4KACA,2KACA,8KACA,4KACA,2KACA,6KACA,8KAEAzG,KAAAsqB,GAAA,IAAA7jB,YAAA,CACA,8KACA,8KACA,+KACA,wKACA,2KACA,uKACA,4KACA,4KACA,2KACA,4KACA,4KACA,6KACA,6KACA,2KACA,0KACA,2KAEAzG,KAAAuqB,GAAA,IAAA9jB,YAAA,CACA,+KACA,2KACA,6KACA,0KACA,2KACA,4KACA,mKACA,2KACA,6KACA,6KACA,4KACA,2KACA,0KACA,0KACA,8KACA,gLAEAzG,KAAAwqB,GAAA,IAAA/jB,YAAA,CACA,8KACA,6KACA,4KACA,4KACA,8KACA,4KACA,iKACA,2KACA,yKACA,0KACA,8KACA,6KACA,6KACA,2KACA,4KACA,8KAEAzG,KAAAyqB,GAAA,IAAAhkB,YAAA,CACA,yKACA,+KACA,6KACA,yKACA,2KACA,6KACA,iKACA,0KACA,4KACA,8KACA,6KACA,4KACA,6KACA,6KACA,6KACA,6KAEAzG,KAAA0qB,GAAA,IAAAjkB,YAAA,CACA,2KACA,4KACA,+KACA,2KACA,2KACA,4KACA,gKACA,yKACA,+KACA,2KACA,8KACA,8KACA,0KACA,8KACA,8KACA,6KAEAzG,KAAA2qB,GAAA,IAAAlkB,YAAA,CACA,gKACA,gLACA,wKACA,gLACA,gLACA,uKACA,gLACA,yKACA,gLACA,uKACA,gLACA,yKACA,uKACA,gLACA,wKACA,kLAEAzG,KAAA4qB,GAAA,IAAAnkB,YAAA,CACA,gKACA,gLACA,gLACA,uKACA,wKACA,gLACA,gLACA,yKACA,gLACA,yKACA,wKACA,gLACA,gLACA,uKACA,uKACA,kLAEAzG,KAAA6qB,GAAA,IAAApkB,YAAA,CACA,iKACA,gLACA,wKACA,gLACA,wKACA,+KACA,uKACA,+KACA,gLACA,wKACA,gLACA,wKACA,gLACA,wKACA,gLACA,0KAEAzG,KAAA8qB,GAAA,IAAArkB,YAAA,CACA,gKACA,gLACA,gLACA,wKACA,gLACA,wKACA,yKACA,gLACA,yKACA,gLACA,gLACA,wKACA,gLACA,uKACA,uKACA,kLAsPA,OAnPAgjB,EAAAznB,UAAA+oB,GAAA,SAAAnX,GACA,WAAAA,GAEA6V,EAAAznB,UAAAgpB,GAAA,SAAApX,GACA,OAAAA,IAAA,OAEA6V,EAAAznB,UAAAipB,GAAA,SAAArX,GACA,OAAAA,IAAA,QAEA6V,EAAAznB,UAAAkpB,GAAA,SAAAtX,GACA,OAAAA,IAAA,QAEA6V,EAAAznB,UAAAmpB,GAAA,SAAAC,EAAApR,EAAAC,EAAAoR,GACA,OAAArrB,KAAAgrB,GAAAhrB,KAAAmqB,GAAA,QACAnqB,KAAAgrB,GAAAhrB,KAAAmqB,GAAAnQ,IAAA,WACAha,KAAAgrB,GAAAhrB,KAAAmqB,GAAAlQ,IAAA,aACAja,KAAAgrB,GAAAhrB,KAAAmqB,GAAAkB,IAAA,cAEA5B,EAAAznB,UAAAspB,UAAA,SAAAC,GA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CA,2JAGA,8JAMAguC,EAAA,cACA1P,KAAA,OACAv6B,MAAA,SACApb,EAAA,sEACAsE,EAAA,QACAF,EAAA,IACAzE,EAAA,sEACA0wB,OAAAyJ,OACA0hB,MAAA,EACAnkC,EAAA,CACA,OAIAguC,EAAA,WACA1P,KAAA,UACAv6B,MAAA,SACApb,EAAA,sEACAsE,EAAA,KACA/F,EAAA,IAEAC,EAAA,sEACAmB,EAAA,sEACA0wB,OAAAyJ,OACA0hB,MAAA,EACAnkC,EAAA,CACA,mEAGA,sEAKA,IACAspC,EAAQ3iD,EAAQ,KACf,MAAAqD,GACDs/C,OAAAthC,EAGAgmC,EAAA,aACA1P,KAAA,QACAv6B,MAAA,OACApb,EAAA,0EACAsE,EAAA,IACAF,EAAA,IACAzE,EAAA,0EACAuV,EAAA,IACAmb,OAAAyJ,OAGAyR,KAAA,mEACAyT,OAAA,mEACAI,MAAA,CACA,CACA96C,EAAA,mCACAF,EAAA,qCAEA,CACAE,EAAA,oCACAF,EAAA,qCAIAo3C,MAAA,EACAnkC,EAAA,CACA,mEACA,mEACAspC,oBC1MAjjD,EAAAD,QAAA,CACA0+C,QAAA,CACAG,KAAA,EACAK,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,kEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,sEAIA3C,IAAA,CACAx9B,IAAA,EACAmgC,OAAA,CACA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,iEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,kEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,mEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,oEAEA,CACA,mEACA,qGCrwBA,IAAAtsB,EAAWryB,EAAQ,IACnB6e,EAAe7e,EAAQ,GACvB+e,EAAAF,EAAAE,MACAvY,EAAAuY,EAAAvY,OACAo2C,EAAA79B,EAAA69B,WACA3kB,EAAcj4B,EAAQ,KACtBk4B,EAAgBl4B,EAAQ,KAExB,SAAAsnD,EAAAroC,GAGA,GAFAzY,EAAA,YAAAyY,EAAA,qCAEAnf,gBAAAwnD,GACA,WAAAA,EAAAroC,GAEAA,EAAAJ,EAAAK,OAAAD,SACAnf,KAAAmf,QACAnf,KAAAuZ,EAAA4F,EAAA5F,EACAvZ,KAAAuZ,EAAAif,WAAArZ,EAAAtd,EAAAuK,YAAA,GAEApM,KAAAynD,WAAAtoC,EAAAg/B,QAAAr7C,YACA9C,KAAA0nD,eAAA7/C,KAAAmB,KAAAmW,EAAAtd,EAAAuK,YAAA,GACApM,KAAAuyB,OAAA4J,OAGAv8B,EAAAD,QAAA6nD,EAOAA,EAAAxlD,UAAA23B,KAAA,SAAAhH,EAAAg1B,GACAh1B,EAAAmqB,EAAAnqB,GACA,IAAAhxB,EAAA3B,KAAA4nD,cAAAD,GACAzmD,EAAAlB,KAAA6nD,QAAAlmD,EAAAmmD,gBAAAn1B,GACAo1B,EAAA/nD,KAAAuZ,EAAAtR,IAAA/G,GACA8mD,EAAAhoD,KAAAioD,YAAAF,GACAG,EAAAloD,KAAA6nD,QAAAG,EAAArmD,EAAAwmD,WAAAx1B,GACA1qB,IAAAtG,EAAAg3B,QACA1O,EAAA/oB,EAAAmN,IAAA65C,GAAAtvC,KAAA5Y,KAAAmf,MAAAtd,GACA,OAAA7B,KAAAooD,cAAA,CAA6BL,IAAA99B,IAAA+9B,cAS7BR,EAAAxlD,UAAAu4B,OAAA,SAAA5H,EAAA01B,EAAAvvB,GACAnG,EAAAmqB,EAAAnqB,GACA01B,EAAAroD,KAAAooD,cAAAC,GACA,IAAA1mD,EAAA3B,KAAA64B,cAAAC,GACA1hB,EAAApX,KAAA6nD,QAAAQ,EAAAL,WAAArmD,EAAAwmD,WAAAx1B,GACA21B,EAAAtoD,KAAAuZ,EAAAtR,IAAAogD,EAAAp+B,KAEA,OADAo+B,EAAAN,IAAA15C,IAAA1M,EAAAm3B,MAAA7wB,IAAAmP,IACA4D,GAAAstC,IAGAd,EAAAxlD,UAAA6lD,QAAA,WAEA,IADA,IAAAt1B,EAAAvyB,KAAAuyB,OACAnyB,EAAA,EAAiBA,EAAAsuB,UAAA/qB,OAAsBvD,IACvCmyB,EAAA3M,OAAA8I,UAAAtuB,IACA,OAAA6e,EAAA89B,UAAAxqB,EAAAzM,UAAAlN,KAAA5Y,KAAAmf,MAAAtd,IAGA2lD,EAAAxlD,UAAA62B,cAAA,SAAAC,GACA,OAAAX,EAAAY,WAAA/4B,KAAA84B,IAGA0uB,EAAAxlD,UAAA4lD,cAAA,SAAAD,GACA,OAAAxvB,EAAAowB,WAAAvoD,KAAA2nD,IAGAH,EAAAxlD,UAAAomD,cAAA,SAAAC,GACA,OAAAA,aAAAjwB,EACAiwB,EACA,IAAAjwB,EAAAp4B,KAAAqoD,IAWAb,EAAAxlD,UAAAimD,YAAA,SAAA9J,GACA,IAAAr8B,EAAAq8B,EAAA9jB,OAAAtxB,QAAA,KAAA/I,KAAA0nD,gBAEA,OADA5lC,EAAA9hB,KAAA0nD,eAAA,IAAAvJ,EAAAhkB,OAAAvgB,QAAA,MACAkI,GAGA0lC,EAAAxlD,UAAA69C,YAAA,SAAA76C,GAGA,IAAAwjD,GAFAxjD,EAAAia,EAAA69B,WAAA93C,IAEArB,OAAA,EACA8kD,EAAAzjD,EAAAH,MAAA,EAAA2jD,GAAAnjD,QAAA,IAAAL,EAAAwjD,IACAE,EAAA,QAAA1jD,EAAAwjD,IAEA30C,EAAAoL,EAAA89B,UAAA0L,GACA,OAAAzoD,KAAAmf,MAAA6nC,WAAAnzC,EAAA60C,IAGAlB,EAAAxlD,UAAA2mD,UAAA,SAAAzgD,GACA,OAAAA,EAAAa,QAAA,KAAA/I,KAAA0nD,iBAGAF,EAAAxlD,UAAA4mD,UAAA,SAAA5jD,GACA,OAAAia,EAAA89B,UAAA/3C,IAGAwiD,EAAAxlD,UAAA6mD,QAAA,SAAAliD,GACA,OAAAA,aAAA3G,KAAAynD,0CClHA,IACAxoC,EADe/e,EAAQ,GACvB+e,MACAvY,EAAAuY,EAAAvY,OACAo2C,EAAA79B,EAAA69B,WACAF,EAAA39B,EAAA29B,eAWA,SAAAzkB,EAAA7Y,EAAAwpC,GACA9oD,KAAAsf,QACAtf,KAAA+oD,QAAAjM,EAAAgM,EAAAnB,QACAroC,EAAAupC,QAAAC,EAAAhwB,KACA94B,KAAAgpD,KAAAF,EAAAhwB,IAEA94B,KAAAipD,UAAAnM,EAAAgM,EAAAhwB,KAGAX,EAAAY,WAAA,SAAAzZ,EAAAwZ,GACA,OAAAA,aAAAX,EACAW,EACA,IAAAX,EAAA7Y,EAAA,CAA6BwZ,SAG7BX,EAAAowB,WAAA,SAAAjpC,EAAAqoC,GACA,OAAAA,aAAAxvB,EACAwvB,EACA,IAAAxvB,EAAA7Y,EAAA,CAA6BqoC,YAG7BxvB,EAAAn2B,UAAA2lD,OAAA,WACA,OAAA3nD,KAAA+oD,SAGAnM,EAAAzkB,EAAA,sBACA,OAAAn4B,KAAAsf,MAAA2oC,YAAAjoD,KAAA84B,SAGA8jB,EAAAzkB,EAAA,iBACA,OAAAn4B,KAAAipD,UACAjpD,KAAAsf,MAAAugC,YAAA7/C,KAAAipD,WACAjpD,KAAAsf,MAAA/F,EAAAtR,IAAAjI,KAAA24B,UAGAikB,EAAAzkB,EAAA,uBACA,IAAA7Y,EAAAtf,KAAAsf,MACAiT,EAAAvyB,KAAAuyB,OACAi2B,EAAAlpC,EAAAooC,eAAA,EAEAlhD,EAAA+rB,EAAA1tB,MAAA,EAAAya,EAAAooC,gBAKA,OAJAlhD,EAAA,QACAA,EAAAgiD,IAAA,IACAhiD,EAAAgiD,IAAA,GAEAhiD,IAGAo2C,EAAAzkB,EAAA,kBACA,OAAAn4B,KAAAsf,MAAAspC,UAAA5oD,KAAAkpD,eAGAtM,EAAAzkB,EAAA,kBACA,OAAAn4B,KAAAsf,MAAAiT,OAAA3M,OAAA5lB,KAAA2nD,UAAA7hC,WAGA82B,EAAAzkB,EAAA,2BACA,OAAAn4B,KAAAuyB,OAAA1tB,MAAA7E,KAAAsf,MAAAooC,kBAGAvvB,EAAAn2B,UAAA23B,KAAA,SAAAhH,GAEA,OADAjsB,EAAA1G,KAAA+oD,QAAA,2BACA/oD,KAAAsf,MAAAqa,KAAAhH,EAAA3yB,OAGAm4B,EAAAn2B,UAAAu4B,OAAA,SAAA5H,EAAA01B,GACA,OAAAroD,KAAAsf,MAAAib,OAAA5H,EAAA01B,EAAAroD,OAGAm4B,EAAAn2B,UAAAmnD,UAAA,SAAArnC,GAEA,OADApb,EAAA1G,KAAA+oD,QAAA,0BACA9pC,EAAAigB,OAAAl/B,KAAA2nD,SAAA7lC,IAGAqW,EAAAn2B,UAAA84B,UAAA,SAAAhZ,GACA,OAAA7C,EAAAigB,OAAAl/B,KAAAmoD,WAAArmC,IAGAliB,EAAAD,QAAAw4B,gCC7FA,IAAAjxB,EAAShH,EAAQ,GAEjB+e,EADe/e,EAAQ,GACvB+e,MACAvY,EAAAuY,EAAAvY,OACAk2C,EAAA39B,EAAA29B,eACAE,EAAA79B,EAAA69B,WAUA,SAAA1kB,EAAA9Y,EAAA+oC,GACAroD,KAAAsf,QAEA,iBAAA+oC,IACAA,EAAAvL,EAAAuL,IAEAlgD,MAAAC,QAAAigD,KACAA,EAAA,CACAN,EAAAM,EAAAxjD,MAAA,EAAAya,EAAAooC,gBACAz9B,EAAAo+B,EAAAxjD,MAAAya,EAAAooC,kBAIAhhD,EAAA2hD,EAAAN,GAAAM,EAAAp+B,EAAA,4BAEA3K,EAAAupC,QAAAR,EAAAN,KACA/nD,KAAAopD,GAAAf,EAAAN,GACAM,EAAAp+B,aAAA/iB,IACAlH,KAAAqpD,GAAAhB,EAAAp+B,GAEAjqB,KAAAspD,UAAAnhD,MAAAC,QAAAigD,EAAAN,GAAAM,EAAAN,EAAAM,EAAAL,SACAhoD,KAAAupD,UAAAphD,MAAAC,QAAAigD,EAAAp+B,GAAAo+B,EAAAp+B,EAAAo+B,EAAAmB,SAGA5M,EAAAxkB,EAAA,eACA,OAAAp4B,KAAAsf,MAAAspC,UAAA5oD,KAAAwpD,cAGA5M,EAAAxkB,EAAA,eACA,OAAAp4B,KAAAsf,MAAAugC,YAAA7/C,KAAAgoD,cAGApL,EAAAxkB,EAAA,sBACA,OAAAp4B,KAAAsf,MAAA2oC,YAAAjoD,KAAA+nD,OAGAnL,EAAAxkB,EAAA,sBACA,OAAAp4B,KAAAsf,MAAAqpC,UAAA3oD,KAAAiqB,OAGAmO,EAAAp2B,UAAAynD,QAAA,WACA,OAAAzpD,KAAAgoD,WAAA3iD,OAAArF,KAAAwpD,aAGApxB,EAAAp2B,UAAAuC,MAAA,WACA,OAAA0a,EAAAigB,OAAAl/B,KAAAypD,UAAA,OAAA/kD,eAGA9E,EAAAD,QAAAy4B,gCC/DA,IAAAlxB,EAAShH,EAAQ,GAGjBwG,EAFexG,EAAQ,GACvB+e,MACAvY,OAEA,SAAAyxB,EAAA9Y,EAAA6B,GACAlhB,KAAAqf,KACArf,KAAA24B,KAAA,KACA34B,KAAA84B,IAAA,KAGA5X,EAAAyX,MACA34B,KAAA0pD,eAAAxoC,EAAAyX,KAAAzX,EAAAyoC,SACAzoC,EAAA4X,KACA94B,KAAA4pD,cAAA1oC,EAAA4X,IAAA5X,EAAA2oC,QAEAjqD,EAAAD,QAAAw4B,EAEAA,EAAAY,WAAA,SAAA1Z,EAAAyZ,EAAAhX,GACA,OAAAgX,aAAAX,EACAW,EAEA,IAAAX,EAAA9Y,EAAA,CACAyZ,MACA+wB,OAAA/nC,KAIAqW,EAAAS,YAAA,SAAAvZ,EAAAsZ,EAAA7W,GACA,OAAA6W,aAAAR,EACAQ,EAEA,IAAAR,EAAA9Y,EAAA,CACAsZ,OACAgxB,QAAA7nC,KAIAqW,EAAAn2B,UAAAo/B,SAAA,WACA,IAAAtI,EAAA94B,KAAA86B,YAEA,OAAAhC,EAAAmB,aACA,CAAYpK,QAAA,EAAAi6B,OAAA,sBACZhxB,EAAAsI,WAEAtI,EAAA7wB,IAAAjI,KAAAqf,GAAAF,MAAAtd,GAAAo4B,aAGA,CAAUpK,QAAA,EAAAi6B,OAAA,MAFV,CAAYj6B,QAAA,EAAAi6B,OAAA,uBAFZ,CAAYj6B,QAAA,EAAAi6B,OAAA,8BAOZ3xB,EAAAn2B,UAAA84B,UAAA,SAAAklB,EAAAl+B,GAUA,MARA,iBAAAk+B,IACAl+B,EAAAk+B,EACAA,EAAA,MAGAhgD,KAAA84B,MACA94B,KAAA84B,IAAA94B,KAAAqf,GAAA9F,EAAAtR,IAAAjI,KAAA24B,OAEA7W,EAGA9hB,KAAA84B,IAAAoG,OAAApd,EAAAk+B,GAFAhgD,KAAA84B,KAKAX,EAAAn2B,UAAA63B,WAAA,SAAA/X,GACA,cAAAA,EACA9hB,KAAA24B,KAAAz0B,SAAA,MAEAlE,KAAA24B,MAGAR,EAAAn2B,UAAA0nD,eAAA,SAAA/nD,EAAAmgB,GACA9hB,KAAA24B,KAAA,IAAAzxB,EAAAvF,EAAAmgB,GAAA,IAIA9hB,KAAA24B,KAAA34B,KAAA24B,KAAA/f,KAAA5Y,KAAAqf,GAAAF,MAAAtd,IAGAs2B,EAAAn2B,UAAA4nD,cAAA,SAAAjoD,EAAAmgB,GACA,GAAAngB,EAAAiS,GAAAjS,EAAAkS,EAWA,MAPA,SAAA7T,KAAAqf,GAAAF,MAAA04B,KACAnxC,EAAA/E,EAAAiS,EAAA,qBACK,UAAA5T,KAAAqf,GAAAF,MAAA04B,MACL,YAAA73C,KAAAqf,GAAAF,MAAA04B,MACAnxC,EAAA/E,EAAAiS,GAAAjS,EAAAkS,EAAA,qCAEA7T,KAAA84B,IAAA94B,KAAAqf,GAAAF,MAAAg/B,MAAAx8C,EAAAiS,EAAAjS,EAAAkS,IAGA7T,KAAA84B,IAAA94B,KAAAqf,GAAAF,MAAA0gC,YAAAl+C,EAAAmgB,IAIAqW,EAAAn2B,UAAA+gC,OAAA,SAAAjK,GACA,OAAAA,EAAA7wB,IAAAjI,KAAA24B,MAAAwB,QAIAhC,EAAAn2B,UAAA23B,KAAA,SAAA/yB,EAAAkb,EAAAZ,GACA,OAAAlhB,KAAAqf,GAAAsa,KAAA/yB,EAAA5G,KAAA8hB,EAAAZ,IAGAiX,EAAAn2B,UAAAu4B,OAAA,SAAA3zB,EAAA4zB,GACA,OAAAx6B,KAAAqf,GAAAkb,OAAA3zB,EAAA4zB,EAAAx6B,OAGAm4B,EAAAn2B,UAAAkI,QAAA,WACA,qBAAAlK,KAAA24B,MAAA34B,KAAA24B,KAAAz0B,SAAA,OACA,UAAAlE,KAAA84B,KAAA94B,KAAA84B,IAAA5uB,WAAA,oCCnHA,IAAAhD,EAAShH,EAAQ,GAGjB+e,EADe/e,EAAQ,GACvB+e,MACAvY,EAAAuY,EAAAvY,OAEA,SAAA0xB,EAAAlX,EAAAY,GACA,GAAAZ,aAAAkX,EACA,OAAAlX,EAEAlhB,KAAA+pD,WAAA7oC,EAAAY,KAGApb,EAAAwa,EAAAhgB,GAAAggB,EAAA/e,EAAA,4BACAnC,KAAAkB,EAAA,IAAAgG,EAAAga,EAAAhgB,EAAA,IACAlB,KAAAmC,EAAA,IAAA+E,EAAAga,EAAA/e,EAAA,SACAof,IAAAL,EAAAkZ,cACAp6B,KAAAo6B,cAAA,KAEAp6B,KAAAo6B,cAAAlZ,EAAAkZ,eAIA,SAAA4vB,IACAhqD,KAAAiqD,MAAA,EAGA,SAAAC,EAAAjkD,EAAA/D,GACA,IAAAioD,EAAAlkD,EAAA/D,EAAA+nD,SACA,SAAAE,GACA,OAAAA,EAIA,IAFA,IAAAC,EAAA,GAAAD,EACAxjD,EAAA,EACAvG,EAAA,EAAA+I,EAAAjH,EAAA+nD,MAAgC7pD,EAAAgqD,EAAchqD,IAAA+I,IAC9CxC,IAAA,EACAA,GAAAV,EAAAkD,GAGA,OADAjH,EAAA+nD,MAAA9gD,EACAxC,EAGA,SAAA0jD,EAAApkD,GAGA,IAFA,IAAA7F,EAAA,EACAwH,EAAA3B,EAAAtC,OAAA,GACAsC,EAAA7F,MAAA,IAAA6F,EAAA7F,EAAA,KAAAA,EAAAwH,GACAxH,IAEA,WAAAA,EACA6F,EAEAA,EAAApB,MAAAzE,GAyCA,SAAAkqD,EAAAxjB,EAAAl/B,GACA,GAAAA,EAAA,IACAk/B,EAAAtlB,KAAA5Z,OADA,CAIA,IAAA2jB,EAAA,GAAA1jB,KAAAk3B,IAAAn3B,GAAAC,KAAA0iD,MAAA,GAEA,IADAzjB,EAAAtlB,KAAA,IAAA+J,KACAA,GACAub,EAAAtlB,KAAA5Z,KAAA2jB,GAAA,QAEAub,EAAAtlB,KAAA5Z,IAjFAhI,EAAAD,QAAAy4B,EAiCAA,EAAAp2B,UAAA+nD,WAAA,SAAA5mD,EAAA2e,GACA3e,EAAA8b,EAAAlW,QAAA5F,EAAA2e,GACA,IAAA5f,EAAA,IAAA8nD,EACA,QAAA7mD,EAAAjB,EAAA+nD,SACA,SAGA,GADAC,EAAA/mD,EAAAjB,GACAA,EAAA+nD,QAAA9mD,EAAAQ,OACA,SAEA,OAAAR,EAAAjB,EAAA+nD,SACA,SAEA,IAAApsC,EAAAqsC,EAAA/mD,EAAAjB,GACAhB,EAAAiC,EAAA0B,MAAA3C,EAAA+nD,MAAApsC,EAAA3b,EAAA+nD,OAEA,GADA/nD,EAAA+nD,OAAApsC,EACA,IAAA1a,EAAAjB,EAAA+nD,SACA,SAEA,IAAAO,EAAAN,EAAA/mD,EAAAjB,GACA,GAAAiB,EAAAQ,SAAA6mD,EAAAtoD,EAAA+nD,MACA,SAEA,IAAA9nD,EAAAgB,EAAA0B,MAAA3C,EAAA+nD,MAAAO,EAAAtoD,EAAA+nD,OAYA,OAXA,IAAA/oD,EAAA,QAAAA,EAAA,KACAA,IAAA2D,MAAA,IAEA,IAAA1C,EAAA,QAAAA,EAAA,KACAA,IAAA0C,MAAA,IAGA7E,KAAAkB,EAAA,IAAAgG,EAAAhG,GACAlB,KAAAmC,EAAA,IAAA+E,EAAA/E,GACAnC,KAAAo6B,cAAA,MAEA,GAgBAhC,EAAAp2B,UAAAyoD,MAAA,SAAA3oC,GACA,IAAA5gB,EAAAlB,KAAAkB,EAAA6H,UACA5G,EAAAnC,KAAAmC,EAAA4G,UAYA,IATA,IAAA7H,EAAA,KACAA,EAAA,IAAAmE,OAAAnE,IAEA,IAAAiB,EAAA,KACAA,EAAA,IAAAkD,OAAAlD,IAEAjB,EAAAmpD,EAAAnpD,GACAiB,EAAAkoD,EAAAloD,KAEAA,EAAA,QAAAA,EAAA,KACAA,IAAA0C,MAAA,GAEA,IAAAiiC,EAAA,IACAwjB,EAAAxjB,EAAA5lC,EAAAyC,SACAmjC,IAAAzhC,OAAAnE,IACAsgB,KAAA,GACA8oC,EAAAxjB,EAAA3kC,EAAAwB,QACA,IAAA+mD,EAAA5jB,EAAAzhC,OAAAlD,GACA0J,EAAA,KAGA,OAFAy+C,EAAAz+C,EAAA6+C,EAAA/mD,QACAkI,IAAAxG,OAAAqlD,GACAzrC,EAAAigB,OAAArzB,EAAAiW,kCC5HA,MAAM0R,EAAWnxB,EAAQ,IACnBC,EAAKD,EAAQ,GAA0BC,GACvCi3C,EAAOl3C,EAAQ,IACfsoD,EAAYtoD,EAAQ,IACpBuoD,EAAcvoD,EAAQ,KACtBwoD,EAAiBxoD,EAAQ,KACzByoD,EAAkBzoD,EAAQ,KAyEhCzC,EAAOD,QApEP,cAAoB6zB,EASlBtwB,eAAe7B,EAAO6f,EAAU,CAACuX,QAAS,OAExC,IAAIsyB,GAAU,IAAIH,GAAc3pC,gBAAgB5f,GAEhD,MAAM2pD,EAAMzR,EAAK7sB,QACfq+B,EAAQpjB,cAAe,CACrB1E,WAAY/hB,EAAQuX,QAAQwK,WAC5B9E,UAAW4sB,EAAQ5sB,UACnB+E,cAAe6nB,EAAQljB,qBAIrBN,EAAMjlC,EAAGgB,QAAQwnD,EACrBD,EAAe16B,MAAM46B,EAAQpjB,cAAcpjC,SAC3CsmD,EAAe16B,MAAM66B,EAAIrpD,IAAI4C,UAC7BL,YAIF,GAAI6mD,EAAQxjB,IAAIjiC,OAAOiiC,GACrB,OAAOyjB,EAAI7nD,KAGb,MAAM,IAAIS,MAAM,4BAUlBV,eAAe7B,EAAO6f,EAAU,CAACid,UAAW,OAC1C98B,EAAQiB,EAAGW,KAAK5B,GAChB,MAAMygB,EAAMy3B,EAAKptB,QAAQ9qB,EAAO6f,GAG1BqmB,EAAMjlC,EAAGgB,QAAQwnD,EACrBD,EAAe16B,MAAMrO,EAAI3e,KAAKoB,SAC9BsmD,EAAe16B,MAAMrO,EAAIngB,IAAI4C,UAC7BL,YAEI2jC,EAAqBxmC,EAAMsC,OAC3BmkC,EAAkCD,EAAqB,IAAQ,EACnE,EAAI,GAAMA,EAAqB,GAEjC,IAAIkjB,EAAU,IAAIJ,EAQlB,OANAI,EAAQ1jB,cAAcvlB,EAAIqc,WAC1B4sB,EAAQzjB,QAAQC,GAChBwjB,EAAQrjB,kBAAkB5lB,EAAI3e,MAC9B4nD,EAAQvjB,uBAAuBK,GAC/BkjB,EAAQtjB,mCAAmCK,IAEpC,IAAI8iB,GAAcxpC,cAAc2pC,sBCpF3C,MAAMxoD,EAASF,EAAQ,GAA0BE,OAC3C0oD,EAAe5oD,EAAQ,GAA0BO,OACjDysC,EAAgBhtC,EAAQ,GAA0BO,OAAOysC,cACzDZ,EAAOpsC,EAAQ,IAyCrBzC,EAAOD,QAvCP,cAAqB0vC,EACnBvsC,cACEihB,MAAM,oBACN/jB,KAAKshB,YAAY,oDAEjBthB,KAAKskB,WAAW,IAAI2mC,EAAa93B,KAAKoE,KAAK,mBAAmB,IAC9Dv3B,KAAKskB,WAAW,IAAI2mC,EAAa93B,KAAKoE,KAAK,aAAa,IACxDv3B,KAAKskB,WAAW,IAAI2mC,EAAa93B,KAAKqE,MAAM,sBAAsB,EAAMj1B,EAAO8D,gBAC/ErG,KAAKskB,WAAW,IAAI2mC,EAAa93B,KAAKqE,MAAM,kCAAkC,EAAMj1B,EAAO8D,gBAC3FrG,KAAKskB,WAAW,IAAI2mC,EAAaxY,UAAU,YAAa,kBAAmB,SAAU7K,GACnF,OAAO,IAAIqjB,EAAa93B,KAAKskB,iBAAiB,YAAa7P,MAE7D5nC,KAAKskB,WAAW,IAAI2mC,EAAaxY,UAAU,MAAO,YAAa,SAAU1K,GACvE,OAAO,IAAIkjB,EAAa93B,KAAKskB,iBAAiB,MAAO1P,MAEvD/nC,KAAKskB,WAAW,IAAI2mC,EAAa93B,KAAKuE,mBAAmB,kBAU3DzW,gBAAgB1b,EAAI2b,EAAU,GAAIC,EAAM,MACtC,IAAIwuB,EAAU5rB,MAAM9C,gBAAgB1b,EAAI2b,EAASC,GAC7Che,EAAO,IAAIsrC,EAQf,OANAtrC,EAAKkkC,cAAcsI,EAAQxR,WAC3Bh7B,EAAKqkC,uBAAuBmI,EAAQ9H,oBACpC1kC,EAAKskC,mCAAmCkI,EAAQ7H,gCAChD3kC,EAAKmkC,QAAQqI,EAAQpI,KACrBpkC,EAAKukC,kBAAkBiI,EAAQhI,eAExBxkC,qBCxCV,IAaA4qB,EAVDnuB,EAAAD,SAUCouB,EAVoC7tB,EAAQ,IAY7C6tB,EAAAjM,IAAAkN,sBCfC,IAaAjB,EAVDnuB,EAAAD,SAUCouB,EAVoC7tB,EAAQ,IAAWA,EAAQ,KAAUA,EAAQ,KAYlF6tB,EAAAm9B,0BCfC,IAaAn9B,EAVDnuB,EAAAD,SAUCouB,EAVoC7tB,EAAQ,IAY7C,SAAA2H,GAEA,IAAAwR,EAAA0U,EACAG,EAAA7U,EAAA8U,IACAU,EAAAX,EAAAW,UACAqD,EAAAhE,EAAAgE,OACAD,EAAA5Y,EAAAyZ,KAGA2oB,EAAA,IAGA,WACA,QAAAr7C,EAAA,EAAwBA,EAAA,GAAQA,IAChCq7C,EAAAr7C,GAAA,WAAAyH,EAAA4E,IAAA5E,EAAAmN,IAAA5U,EAAA,MAFA,GASA,IAAA+qD,EAAAl5B,EAAAk5B,IAAAj5B,EAAA7D,OAAA,CACA+D,SAAA,WACApyB,KAAAorD,MAAA,IAAAv8B,EAAAL,KAAA,CACA,sBACA,wBAIAsD,gBAAA,SAAAu5B,EAAA3lD,GAEA,QAAAtF,EAAA,EAA4BA,EAAA,GAAQA,IAAA,CAEpC,IAAAkrD,EAAA5lD,EAAAtF,EACAmrD,EAAAF,EAAAC,GAEAD,EAAAC,GACA,UAAAC,GAAA,EAAAA,IAAA,IACA,YAAAA,GAAA,GAAAA,IAAA,GAKA,IAAAtrB,EAAAjgC,KAAAorD,MAAA7jD,MAEAikD,EAAAH,EAAA3lD,EAAA,GACA+lD,EAAAJ,EAAA3lD,EAAA,GACAgmD,EAAAL,EAAA3lD,EAAA,GACAimD,EAAAN,EAAA3lD,EAAA,GACAkmD,EAAAP,EAAA3lD,EAAA,GACAmmD,EAAAR,EAAA3lD,EAAA,GACAomD,EAAAT,EAAA3lD,EAAA,GACAqmD,EAAAV,EAAA3lD,EAAA,GACAsmD,EAAAX,EAAA3lD,EAAA,GACAumD,EAAAZ,EAAA3lD,EAAA,GACAwmD,EAAAb,EAAA3lD,EAAA,IACAymD,EAAAd,EAAA3lD,EAAA,IACA0mD,EAAAf,EAAA3lD,EAAA,IACA2mD,EAAAhB,EAAA3lD,EAAA,IACA4mD,EAAAjB,EAAA3lD,EAAA,IACA6mD,EAAAlB,EAAA3lD,EAAA,IAGAc,EAAAy5B,EAAA,GACA35B,EAAA25B,EAAA,GACAx/B,EAAAw/B,EAAA,GACAv/B,EAAAu/B,EAAA,GAGAz5B,EAAAgmD,EAAAhmD,EAAAF,EAAA7F,EAAAC,EAAA8qD,EAAA,EAAA/P,EAAA,IACA/6C,EAAA8rD,EAAA9rD,EAAA8F,EAAAF,EAAA7F,EAAAgrD,EAAA,GAAAhQ,EAAA,IACAh7C,EAAA+rD,EAAA/rD,EAAAC,EAAA8F,EAAAF,EAAAolD,EAAA,GAAAjQ,EAAA,IACAn1C,EAAAkmD,EAAAlmD,EAAA7F,EAAAC,EAAA8F,EAAAmlD,EAAA,GAAAlQ,EAAA,IACAj1C,EAAAgmD,EAAAhmD,EAAAF,EAAA7F,EAAAC,EAAAkrD,EAAA,EAAAnQ,EAAA,IACA/6C,EAAA8rD,EAAA9rD,EAAA8F,EAAAF,EAAA7F,EAAAorD,EAAA,GAAApQ,EAAA,IACAh7C,EAAA+rD,EAAA/rD,EAAAC,EAAA8F,EAAAF,EAAAwlD,EAAA,GAAArQ,EAAA,IACAn1C,EAAAkmD,EAAAlmD,EAAA7F,EAAAC,EAAA8F,EAAAulD,EAAA,GAAAtQ,EAAA,IACAj1C,EAAAgmD,EAAAhmD,EAAAF,EAAA7F,EAAAC,EAAAsrD,EAAA,EAAAvQ,EAAA,IACA/6C,EAAA8rD,EAAA9rD,EAAA8F,EAAAF,EAAA7F,EAAAwrD,EAAA,GAAAxQ,EAAA,IACAh7C,EAAA+rD,EAAA/rD,EAAAC,EAAA8F,EAAAF,EAAA4lD,EAAA,GAAAzQ,EAAA,KACAn1C,EAAAkmD,EAAAlmD,EAAA7F,EAAAC,EAAA8F,EAAA2lD,EAAA,GAAA1Q,EAAA,KACAj1C,EAAAgmD,EAAAhmD,EAAAF,EAAA7F,EAAAC,EAAA0rD,EAAA,EAAA3Q,EAAA,KACA/6C,EAAA8rD,EAAA9rD,EAAA8F,EAAAF,EAAA7F,EAAA4rD,EAAA,GAAA5Q,EAAA,KACAh7C,EAAA+rD,EAAA/rD,EAAAC,EAAA8F,EAAAF,EAAAgmD,EAAA,GAAA7Q,EAAA,KAGAj1C,EAAAimD,EAAAjmD,EAFAF,EAAAkmD,EAAAlmD,EAAA7F,EAAAC,EAAA8F,EAAA+lD,EAAA,GAAA9Q,EAAA,KAEAh7C,EAAAC,EAAA+qD,EAAA,EAAAhQ,EAAA,KACA/6C,EAAA+rD,EAAA/rD,EAAA8F,EAAAF,EAAA7F,EAAAqrD,EAAA,EAAArQ,EAAA,KACAh7C,EAAAgsD,EAAAhsD,EAAAC,EAAA8F,EAAAF,EAAA6lD,EAAA,GAAA1Q,EAAA,KACAn1C,EAAAmmD,EAAAnmD,EAAA7F,EAAAC,EAAA8F,EAAAglD,EAAA,GAAA/P,EAAA,KACAj1C,EAAAimD,EAAAjmD,EAAAF,EAAA7F,EAAAC,EAAAmrD,EAAA,EAAApQ,EAAA,KACA/6C,EAAA+rD,EAAA/rD,EAAA8F,EAAAF,EAAA7F,EAAAyrD,EAAA,EAAAzQ,EAAA,KACAh7C,EAAAgsD,EAAAhsD,EAAAC,EAAA8F,EAAAF,EAAAimD,EAAA,GAAA9Q,EAAA,KACAn1C,EAAAmmD,EAAAnmD,EAAA7F,EAAAC,EAAA8F,EAAAolD,EAAA,GAAAnQ,EAAA,KACAj1C,EAAAimD,EAAAjmD,EAAAF,EAAA7F,EAAAC,EAAAurD,EAAA,EAAAxQ,EAAA,KACA/6C,EAAA+rD,EAAA/rD,EAAA8F,EAAAF,EAAA7F,EAAA6rD,EAAA,EAAA7Q,EAAA,KACAh7C,EAAAgsD,EAAAhsD,EAAAC,EAAA8F,EAAAF,EAAAqlD,EAAA,GAAAlQ,EAAA,KACAn1C,EAAAmmD,EAAAnmD,EAAA7F,EAAAC,EAAA8F,EAAAwlD,EAAA,GAAAvQ,EAAA,KACAj1C,EAAAimD,EAAAjmD,EAAAF,EAAA7F,EAAAC,EAAA2rD,EAAA,EAAA5Q,EAAA,KACA/6C,EAAA+rD,EAAA/rD,EAAA8F,EAAAF,EAAA7F,EAAAirD,EAAA,EAAAjQ,EAAA,KACAh7C,EAAAgsD,EAAAhsD,EAAAC,EAAA8F,EAAAF,EAAAylD,EAAA,GAAAtQ,EAAA,KAGAj1C,EAAAkmD,EAAAlmD,EAFAF,EAAAmmD,EAAAnmD,EAAA7F,EAAAC,EAAA8F,EAAA4lD,EAAA,GAAA3Q,EAAA,KAEAh7C,EAAAC,EAAAmrD,EAAA,EAAApQ,EAAA,KACA/6C,EAAAgsD,EAAAhsD,EAAA8F,EAAAF,EAAA7F,EAAAurD,EAAA,GAAAvQ,EAAA,KACAh7C,EAAAisD,EAAAjsD,EAAAC,EAAA8F,EAAAF,EAAA6lD,EAAA,GAAA1Q,EAAA,KACAn1C,EAAAomD,EAAApmD,EAAA7F,EAAAC,EAAA8F,EAAA8lD,EAAA,GAAA7Q,EAAA,KACAj1C,EAAAkmD,EAAAlmD,EAAAF,EAAA7F,EAAAC,EAAA+qD,EAAA,EAAAhQ,EAAA,KACA/6C,EAAAgsD,EAAAhsD,EAAA8F,EAAAF,EAAA7F,EAAAmrD,EAAA,GAAAnQ,EAAA,KACAh7C,EAAAisD,EAAAjsD,EAAAC,EAAA8F,EAAAF,EAAAylD,EAAA,GAAAtQ,EAAA,KACAn1C,EAAAomD,EAAApmD,EAAA7F,EAAAC,EAAA8F,EAAA0lD,EAAA,GAAAzQ,EAAA,KACAj1C,EAAAkmD,EAAAlmD,EAAAF,EAAA7F,EAAAC,EAAA2rD,EAAA,EAAA5Q,EAAA,KACA/6C,EAAAgsD,EAAAhsD,EAAA8F,EAAAF,EAAA7F,EAAA+qD,EAAA,GAAA/P,EAAA,KACAh7C,EAAAisD,EAAAjsD,EAAAC,EAAA8F,EAAAF,EAAAqlD,EAAA,GAAAlQ,EAAA,KACAn1C,EAAAomD,EAAApmD,EAAA7F,EAAAC,EAAA8F,EAAAslD,EAAA,GAAArQ,EAAA,KACAj1C,EAAAkmD,EAAAlmD,EAAAF,EAAA7F,EAAAC,EAAAurD,EAAA,EAAAxQ,EAAA,KACA/6C,EAAAgsD,EAAAhsD,EAAA8F,EAAAF,EAAA7F,EAAA2rD,EAAA,GAAA3Q,EAAA,KACAh7C,EAAAisD,EAAAjsD,EAAAC,EAAA8F,EAAAF,EAAAimD,EAAA,GAAA9Q,EAAA,KAGAj1C,EAAAmmD,EAAAnmD,EAFAF,EAAAomD,EAAApmD,EAAA7F,EAAAC,EAAA8F,EAAAklD,EAAA,GAAAjQ,EAAA,KAEAh7C,EAAAC,EAAA8qD,EAAA,EAAA/P,EAAA,KACA/6C,EAAAisD,EAAAjsD,EAAA8F,EAAAF,EAAA7F,EAAAsrD,EAAA,GAAAtQ,EAAA,KACAh7C,EAAAksD,EAAAlsD,EAAAC,EAAA8F,EAAAF,EAAAgmD,EAAA,GAAA7Q,EAAA,KACAn1C,EAAAqmD,EAAArmD,EAAA7F,EAAAC,EAAA8F,EAAAqlD,EAAA,GAAApQ,EAAA,KACAj1C,EAAAmmD,EAAAnmD,EAAAF,EAAA7F,EAAAC,EAAA0rD,EAAA,EAAA3Q,EAAA,KACA/6C,EAAAisD,EAAAjsD,EAAA8F,EAAAF,EAAA7F,EAAAkrD,EAAA,GAAAlQ,EAAA,KACAh7C,EAAAksD,EAAAlsD,EAAAC,EAAA8F,EAAAF,EAAA4lD,EAAA,GAAAzQ,EAAA,KACAn1C,EAAAqmD,EAAArmD,EAAA7F,EAAAC,EAAA8F,EAAAilD,EAAA,GAAAhQ,EAAA,KACAj1C,EAAAmmD,EAAAnmD,EAAAF,EAAA7F,EAAAC,EAAAsrD,EAAA,EAAAvQ,EAAA,KACA/6C,EAAAisD,EAAAjsD,EAAA8F,EAAAF,EAAA7F,EAAA8rD,EAAA,GAAA9Q,EAAA,KACAh7C,EAAAksD,EAAAlsD,EAAAC,EAAA8F,EAAAF,EAAAwlD,EAAA,GAAArQ,EAAA,KACAn1C,EAAAqmD,EAAArmD,EAAA7F,EAAAC,EAAA8F,EAAA6lD,EAAA,GAAA5Q,EAAA,KACAj1C,EAAAmmD,EAAAnmD,EAAAF,EAAA7F,EAAAC,EAAAkrD,EAAA,EAAAnQ,EAAA,KACA/6C,EAAAisD,EAAAjsD,EAAA8F,EAAAF,EAAA7F,EAAA0rD,EAAA,GAAA1Q,EAAA,KACAh7C,EAAAksD,EAAAlsD,EAAAC,EAAA8F,EAAAF,EAAAolD,EAAA,GAAAjQ,EAAA,KACAn1C,EAAAqmD,EAAArmD,EAAA7F,EAAAC,EAAA8F,EAAAylD,EAAA,GAAAxQ,EAAA,KAGAxb,EAAA,GAAAA,EAAA,GAAAz5B,EAAA,EACAy5B,EAAA,GAAAA,EAAA,GAAA35B,EAAA,EACA25B,EAAA,GAAAA,EAAA,GAAAx/B,EAAA,EACAw/B,EAAA,GAAAA,EAAA,GAAAv/B,EAAA,GAGA8xB,YAAA,WAEA,IAAArvB,EAAAnD,KAAAkxB,MACAK,EAAApuB,EAAAoE,MAEAqlD,EAAA,EAAA5sD,KAAAmxB,YACA07B,EAAA,EAAA1pD,EAAA2rB,SAGAyC,EAAAs7B,IAAA,YAAAA,EAAA,GAEA,IAAAC,EAAAjlD,EAAA8e,MAAAimC,EAAA,YACAG,EAAAH,EACAr7B,EAAA,IAAAs7B,EAAA,YACA,UAAAC,GAAA,EAAAA,IAAA,IACA,YAAAA,GAAA,GAAAA,IAAA,GAEAv7B,EAAA,IAAAs7B,EAAA,YACA,UAAAE,GAAA,EAAAA,IAAA,IACA,YAAAA,GAAA,GAAAA,IAAA,GAGA5pD,EAAA2rB,SAAA,GAAAyC,EAAA5tB,OAAA,GAGA3D,KAAAqxB,WAOA,IAJA,IAAAkB,EAAAvyB,KAAAorD,MACAnrB,EAAA1N,EAAAhrB,MAGAnH,EAAA,EAA4BA,EAAA,EAAOA,IAAA,CAEnC,IAAA4sD,EAAA/sB,EAAA7/B,GAEA6/B,EAAA7/B,GAAA,UAAA4sD,GAAA,EAAAA,IAAA,IACA,YAAAA,GAAA,GAAAA,IAAA,GAIA,OAAAz6B,GAGAzoB,MAAA,WACA,IAAAA,EAAAooB,EAAApoB,MAAAvJ,KAAAP,MAGA,OAFA8J,EAAAshD,MAAAprD,KAAAorD,MAAAthD,QAEAA,KAIA,SAAA0iD,EAAAhmD,EAAAF,EAAA7F,EAAAC,EAAAkT,EAAAzR,EAAAb,GACA,IAAAO,EAAA2E,GAAAF,EAAA7F,GAAA6F,EAAA5F,GAAAkT,EAAAtS,EACA,OAAAO,GAAAM,EAAAN,IAAA,GAAAM,GAAAmE,EAGA,SAAAmmD,EAAAjmD,EAAAF,EAAA7F,EAAAC,EAAAkT,EAAAzR,EAAAb,GACA,IAAAO,EAAA2E,GAAAF,EAAA5F,EAAAD,GAAAC,GAAAkT,EAAAtS,EACA,OAAAO,GAAAM,EAAAN,IAAA,GAAAM,GAAAmE,EAGA,SAAAomD,EAAAlmD,EAAAF,EAAA7F,EAAAC,EAAAkT,EAAAzR,EAAAb,GACA,IAAAO,EAAA2E,GAAAF,EAAA7F,EAAAC,GAAAkT,EAAAtS,EACA,OAAAO,GAAAM,EAAAN,IAAA,GAAAM,GAAAmE,EAGA,SAAAqmD,EAAAnmD,EAAAF,EAAA7F,EAAAC,EAAAkT,EAAAzR,EAAAb,GACA,IAAAO,EAAA2E,GAAA/F,GAAA6F,GAAA5F,IAAAkT,EAAAtS,EACA,OAAAO,GAAAM,EAAAN,IAAA,GAAAM,GAAAmE,EAiBA+S,EAAA8xC,IAAAj5B,EAAAO,cAAA04B,GAgBA9xC,EAAA6xC,QAAAh5B,EAAAU,kBAAAu4B,GAtPA,CAuPEtjD,MAGFkmB,EAAAo9B,sBCzQC,IAaAp9B,EAID1U,EACA6U,EACAE,EACA2B,EACAW,EACAuB,EAnBAryB,EAAAD,SAUCouB,EAVoC7tB,EAAQ,IAe7CguB,GADA7U,EAAA0U,GACAI,IACAC,EAAAF,EAAAE,KACA2B,EAAA1W,EAAAyI,IACA4O,EAAAX,EAAAW,KACAuB,EAAA5Y,EAAAyZ,UAKAb,EAAAY,KAAAzE,EAAAC,OAAA,CAWAG,KAAA,SAAAkE,EAAA/wB,GAEA+wB,EAAA1yB,KAAAitD,QAAA,IAAAv6B,EAAAlE,KAGA,iBAAA7sB,IACAA,EAAA+uB,EAAAP,MAAAxuB,IAIA,IAAAurD,EAAAx6B,EAAApN,UACA6nC,EAAA,EAAAD,EAGAvrD,EAAAmtB,SAAAq+B,IACAxrD,EAAA+wB,EAAAJ,SAAA3wB,IAIAA,EAAA4tB,QAWA,IARA,IAAA69B,EAAAptD,KAAAqtD,MAAA1rD,EAAAmI,QACAwjD,EAAAttD,KAAAutD,MAAA5rD,EAAAmI,QAGA0jD,EAAAJ,EAAA7lD,MACAkmD,EAAAH,EAAA/lD,MAGAnH,EAAA,EAA4BA,EAAA8sD,EAAqB9sD,IACjDotD,EAAAptD,IAAA,WACAqtD,EAAArtD,IAAA,UAEAgtD,EAAAt+B,SAAAw+B,EAAAx+B,SAAAq+B,EAGAntD,KAAAixB,SAUAA,MAAA,WAEA,IAAAyB,EAAA1yB,KAAAitD,QAGAv6B,EAAAzB,QACAyB,EAAA9M,OAAA5lB,KAAAutD,QAeA3nC,OAAA,SAAAyM,GAIA,OAHAryB,KAAAitD,QAAArnC,OAAAyM,GAGAryB,MAiBAsyB,SAAA,SAAAD,GAEA,IAAAK,EAAA1yB,KAAAitD,QAGAS,EAAAh7B,EAAAJ,SAAAD,GACAK,EAAAzB,QACA,IAAA6K,EAAApJ,EAAAJ,SAAAtyB,KAAAqtD,MAAAvjD,QAAAzE,OAAAqoD,IAEA,OAAA5xB,qCC/HA,MAAMtI,EAAWnxB,EAAQ,IACnBC,EAAKD,EAAQ,GAA0BC,GACvCihC,EAAYlhC,EAAQ,IACpBsrD,EAAetrD,EAAQ,IACvBo3C,EAAMp3C,EAAQ,IA4DpBzC,EAAOD,QAtDP,cAAuB6zB,EASrBtwB,eAAe7B,EAAO6f,EAAU,CAACmb,SAAU,KACzCh7B,EAAQiB,EAAGW,KAAK5B,GAChB,IAAI0rB,EAAM,IAAIwW,EAAUvW,cAExB,MAAM4gC,EAAkB,IAAID,EAAazlB,OACnC5L,EAAO,IAAIh6B,EAAGU,OAAOC,KAAK2qD,EAAgB3sD,IAAI,KAGpD2sD,EAAgBlkB,OAEhB,MAAMmkB,EAAUpU,EAAIqU,WAAW5sC,EAAQmb,SAAUC,GAEjD,OAAOh6B,EAAG+C,OACR/C,EAAGkB,WAAW,YACd84B,EACA,IAAIh6B,EAAGyqB,EAAIZ,QAAQ0hC,EAAQlsD,IAAIoB,OAAQ1B,EAAM0B,OAAQ8qD,EAAQ/gC,GAAG/pB,UAYpEG,eAAe6qD,EAAW7sC,EAAU,CAACmb,SAAU,KAC7C0xB,EAAYzrD,EAAGW,KAAK8qD,GACpB,IAAIhhC,EAAM,IAAIwW,EAAUvW,cAExB,MAAMsP,EAAOyxB,EAAUlpD,MAAM,EAAG,IAC1BmpD,EAAOD,EAAUlpD,MAAM,IAEvBgpD,EAAUpU,EAAIqU,WAAW5sC,EAAQmb,SAAUC,GAEjD,IAAIzM,EAAS9C,EAAIL,QAAQmhC,EAAQlsD,IAAIoB,OAAQirD,EAAKjrD,OAAQ8qD,EAAQ/gC,GAAG/pB,QAErE,GAAsB,IAAlB8sB,EAAOlsB,OACT,MAAM,IAAIC,MAAM,4BAElB,OAAO,IAAItB,EAAGutB,sBCrElB,MAAM2D,EAAWnxB,EAAQ,IACnBo3C,EAAMp3C,EAAQ,IACdC,EAAKD,EAAQ,GAA0BC,GACvCk3C,EAAWn3C,EAAQ,IAEnB6lC,EAAS7lC,EAAQ,IAEjB4rD,EAAe,IAAIC,EADD7rD,EAAQ,GAA0BO,OAAOowB,OAAOC,KAAKokB,YAoD7Ez3C,EAAOD,QAjDP,cAAyB6zB,EASvBtwB,eAAe7B,EAAO6f,EAAU,CAACmb,SAAU,KAEzCh7B,EAAQiB,EAAGW,KAAK5B,GAChB,IAAIg7B,EAAW/5B,EAAGW,KAAKie,EAAQmb,SAAU,UACrCC,EAAOj7B,EAAMwD,MAAM,EAAG,IACtBlD,EAAM83C,EAAIqU,WAAWzxB,EAAUC,GAGnC,MAAM6xB,EAAU9sD,EAAMwD,MAAM,IAEtBupD,EAAgC5U,EAAS9sB,QAAQyhC,EAASxsD,GAEhE,OAAOssD,EAAahtC,gBAAgBmtC,GAUtClrD,eAAe7B,EAAO6f,EAAU,CAACmb,SAAU,KACzC,IAAIA,EAAW/5B,EAAGW,KAAKie,EAAQmb,SAAU,UACzC,MAAMgyB,EAAoBJ,EAAa7sC,cAAc/f,GAE/CusD,EAAkB,IAAI1lB,EAAOA,OAC7B5L,EAAO,IAAIh6B,EAAGU,OAAOC,KAAK2qD,EAAgB3sD,IAAI,KAGpD2sD,EAAgBlkB,OAEhB,MAAMmkB,EAAUpU,EAAIqU,WAAWzxB,EAAUC,GAEnCgyB,EAAsB9U,EAASrtB,QAAQkiC,EAAmBR,GAEhE,OAAOvrD,EAAG+C,OAAO/C,EAAGkB,WAAW,YAAa84B,EAAMgyB,mCC7CtD,MAAMvvC,EAAW1c,EAAQ,IAEnBo0B,EAAQp0B,EAAQ,GAA0BM,MAAMswB,KAAKwD,MACrD4gB,EAAah1C,EAAQ,GAA0BM,MAAMswB,KAAKokB,WAC1DtkB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDoF,EAAU91B,EAAQ,GAA0BM,MAAMswB,KAAKkF,QACvD71B,EAAKD,EAAQ,GAA0BC,GA+F7C1C,EAAOD,QA1FP,MAOEuD,gBAAgBic,GASd,QARcoC,IAAVpC,EAEFA,EAAQsX,EAAM83B,kBACHpvC,aAAiBsX,IAE5BtX,EAAQ,IAAIsX,EAAMtX,KAGI,IAApBA,EAAMmY,UACR,MAAM,IAAI1zB,MAAM,sBAAwBub,EAAMxe,MAKhD,MAAMq5B,EAAK,IAAIjb,EAASI,EAAMxe,MAAMq4B,aAEpC,OAAO,IAAIb,EACT,IAAIkf,EACF,IAAI/0C,EAAG03B,EAAGH,aAAa9wB,WACvBoW,GAEF,IAAI4T,EACF,IAAIzwB,EAAG03B,EAAGc,YAAYX,OAAOpxB,WAC7B,IAAIzG,EAAG03B,EAAGc,YAAYT,OAAOtxB,WAC7BoW,IAUNjc,sBAAsB+/B,GAEpB,IAAmC,IAA/BA,EAAW9jB,MAAMmY,UACnB,MAAM,IAAI1zB,MAAM,sBAAwBq/B,EAAW9jB,MAAMxe,MAG3D,MAAMq5B,EAAKjb,EAASkkB,EAAW9jB,MAAMxe,MAAM+3B,eAAeuK,EAAWthC,IAAIoB,QAEzE,IAAKkgC,EAAWthC,IAAI2D,OAAO,IAAIhD,EAAG03B,EAAGH,aAAa9wB,YAChD,MAAM,IAAInF,MAAM,kFAGlB,OAAO,IAAIu0B,EACT8K,EACA,IAAIlQ,EACF,IAAIzwB,EAAG03B,EAAGc,YAAYX,OAAOpxB,WAC7B,IAAIzG,EAAG03B,EAAGc,YAAYT,OAAOtxB,WAC7Bk6B,EAAW9jB,QAUjBjc,YAAYu1B,EAAS3S,GAEnB,MAAM0oC,EAASzvC,EAAS0Z,EAAQtZ,MAAMxe,MAAM+3B,eAAeD,EAAQwK,WAAWthC,IAAIoB,QAE5Ey3B,EAAYg0B,EAAO70B,KAAK7T,EAAO/iB,OAAQyrD,EAAO30B,WAAW,OAAQ,MAAO,CAC5ES,WAAW,IAIb,IAAwD,IAApDk0B,EAAOj0B,OAAOzU,EAAO/iB,OAAQy3B,EAAUiwB,SACzC,MAAM7mD,MAAM,qCAGd,MAAO,CACLzB,EAAG,IAAIG,EAAGU,OAAOC,KAAKu3B,EAAUr4B,EAAE4G,YAClC7H,EAAG,IAAIoB,EAAGU,OAAOC,KAAKu3B,EAAUt5B,EAAE6H,gCClGxC,MAAMnG,EAASP,EAAQ,GAA0BO,OAC3CmwB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDsc,EAAgBzsC,EAAOysC,cAiE7BzvC,EAAOD,QA5DP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,kBACN/jB,KAAKshB,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,6CAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,0CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKuE,mBAAmB,WAChCpW,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKwD,MAAM,mBAC1BnV,YAAY,4CACZD,eAAe0R,EAAUlO,QAAQ1F,QAEtCnf,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAC9BzR,YAAY,uCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,GACfC,YAAY,4BAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,gCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBC/DX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CmwB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDsc,EAAgBzsC,EAAOysC,cAqE7BzvC,EAAOD,QAhEP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,+BACN/jB,KAAKshB,YAAY,mDAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,wCAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,0CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKuE,mBAAmB,WAChCpW,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKwD,MAAM,mBAC1BnV,YAAY,4CACZD,eAAe0R,EAAUlO,QAAQ1F,QAEtCnf,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAC9BzR,YAAY,uCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,GACfC,YAAY,4BAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,uCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBCnEX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CmwB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDsc,EAAgBzsC,EAAOysC,cAkF7BzvC,EAAOD,QA7EP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,yBACN/jB,KAAKshB,YAAY,qDAGjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,iCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,0CAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,8CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,oCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,UAAW,GACxC5R,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,iBAC9BzR,YAAY,6DACZD,eAAe0R,EAAUlO,UAE9B7kB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKoE,KAAK,cAClBjW,YAAY,qBAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAC9BzR,YAAY,uCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOuK,YAAY,WAC3Bjc,YAAY,iCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,WACnBlW,YAAY,iCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,GACfC,YAAY,iDAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,yCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBChFX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CL,EAASF,EAAQ,GAA0BE,OAC3C8sC,EAAgBzsC,EAAOysC,cA4E7BzvC,EAAOD,QAvEP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,kBACN/jB,KAAKshB,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,0CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,iDAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,YAAY,EAAMj1B,EAAO8D,eAC5Cib,YAAY,oCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,gBAAgB,EAAMj1B,EAAO8D,eAChDib,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,UACxB+B,YAAY,8CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,0CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,UAAW,GACxC5R,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,IACfC,YAAY,4BAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,0BACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBC1EX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CmwB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDsc,EAAgBzsC,EAAOysC,cAqE7BzvC,EAAOD,QAhEP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,gBACN/jB,KAAKshB,YAAY,+CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,wBAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOuc,WAAW,cAC1BjuB,YAAY,8CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,2BAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,UACxB+B,YAAY,qDAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,uCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKuE,mBAAmB,WAChCpW,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKwD,MAAM,mBAC1BnV,YAAY,4CACZD,eAAe0R,EAAUlO,QAAQ1F,QAEtCnf,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC5vB,YAAY,mBACZD,eAAe,IAQtBmuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,iCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBCnEX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CmwB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDxwB,EAASF,EAAQ,GAA0BE,OAC3C8sC,EAAgBzsC,EAAOysC,cAiF7BzvC,EAAOD,QA5EP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,kBACN/jB,KAAKshB,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,qCAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,SACxB+B,YAAY,qCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,gBAC7BnS,YAAY,kEAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,0CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKoP,oBAAoB,WACjCjhB,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKwD,MAAM,mBAC1BpV,eAAe0R,EAAUlO,QAAQ1F,OACjCmC,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAC9BzR,YAAY,oDAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKsE,MAAM,oBAAoB,EAAMl1B,EAAO8D,eACpDib,YAAY,kDAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,GACfC,YAAY,4BAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,kCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBChFX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CmwB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDsc,EAAgBzsC,EAAOysC,cAiF7BzvC,EAAOD,QA5EP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,oBACN/jB,KAAKshB,YAAY,0CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,wCAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,wCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,SACxB+B,YAAY,qCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,gBAC7BnS,YAAY,kEAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,0CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKuE,mBAAmB,WAChCpW,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKwD,MAAM,mBAC1BpV,eAAe0R,EAAUlO,QAAQ1F,OACjCmC,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAC9BzR,YAAY,oDAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKsE,MAAM,oBACnBnW,YAAY,kDAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,GACfC,YAAY,4BAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,oCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBC/EX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CmwB,EAAY1wB,EAAQ,GAA0BM,MAAMswB,KAAKF,UACzDsc,EAAgBzsC,EAAOysC,cAkF7BzvC,EAAOD,QA7EP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,iBACNA,MAAMzC,YAAY,8CAGlBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,uBAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,6CAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,uBAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,UACxB+B,YAAY,qCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,OACxB+B,YAAY,oCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKuE,mBAAmB,WAChCpW,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKwD,MAAM,mBAC1BnV,YAAY,4CACZD,eAAe0R,EAAUlO,QAAQ1F,QAEtCnf,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,SACxB+B,YAAY,oCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,UAC7BnS,YAAY,qCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAAgB,GAC9CzR,YAAY,uCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,GACfC,YAAY,yCAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,iCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAMThuB,gBACE,OAAO,qBC/EX,MAAM7e,EAASP,EAAQ,GAA0BO,OAC3CysC,EAAgBzsC,EAAOysC,cACvBL,EAAS3sC,EAAQ,IA0EvBzC,EAAOD,QArEP,cAAuB0vC,EAIrBvsC,cACEihB,MAAM,sBACN/jB,KAAKshB,YAAY,mEACjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,WAC7BnS,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,UACxB+B,YAAY,mCAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,yCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,UAAW,GACxC5R,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,IAAK,GAClC5R,YAAY,mCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,IAAK,GAClC5R,YAAY,mCAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,8BACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAWTxuB,gBAAgB1b,EAAI2b,EAAU,GAAIC,EAAM,MACtC,MAAMwuB,EAAU5rB,MAAM9C,gBAAgB1b,GAChCq3B,EAAS,IAAIoS,EACjBW,EAAQ/b,QACR+b,EAAQ9b,QAOV,OAJA+I,EAAO/c,YAAY8vB,EAAQ7vB,SAC3B8c,EAAOxc,eAAeuvB,EAAQtvB,YAC9Buc,EAAOtc,SAASqvB,EAAQzuC,EAAGyuC,EAAQxtC,GAE5By6B,qBCvEX,MAAMh6B,EAASP,EAAQ,GAA0BO,OAC3CysC,EAAgBzsC,EAAOysC,cA2D7BzvC,EAAOD,QAtDP,cAAgC0vC,EAI9BvsC,cACEihB,MAAM,uBACN/jB,KAAKshB,YAAY,oEACjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,WAC7BnS,YAAY,kCAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,yCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKoE,KAAK,cAClBjW,YAAY,qBAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAC9BzR,YAAY,uCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOuK,YAAY,WAC3Bjc,YAAY,iCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,WACnBlW,YAAY,iCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,IAAK,GAClC5R,YAAY,mCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,IAAK,GAClC5R,YAAY,mCAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,+BACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,qBCxDX,MAAMltC,EAASF,EAAQ,GAA0BE,OAC3CK,EAASP,EAAQ,GAA0BO,OAC3CysC,EAAgBzsC,EAAOysC,cACvBP,EAAiBzsC,EAAQ,IACzB2sC,EAAS3sC,EAAQ,IACjB4sC,EAAW5sC,EAAQ,IACnB0sC,EAAU1sC,EAAQ,IAClBosD,EAAoBpsD,EAAQ,KAC5BqsD,EAAqBrsD,EAAQ,KAC7BovC,EAAgBpvC,EAAQ,IA0G9BzC,EAAOD,QArGP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,mBACN/jB,KAAKshB,YAAY,+DACjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,YACnBlW,YAAY,6BACZD,eAAe,IAEpBrhB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,gBAAgB,EAAMj1B,EAAO8D,eAChDib,YAAY,0BAEjBthB,KAAKskB,WACH,IAAI1hB,EAAO+uC,UAAU,UAAW,IAAI8c,GACjCntC,YAAY,mCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,kBAAkB,EAAMj1B,EAAO8D,eAClDib,YAAY,4BAEjBthB,KAAKskB,WACH,IAAI1hB,EAAO+uC,UAAU,YAAa,IAAIF,GACnCnwB,YAAY,qCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,iBAAiB,EAAMj1B,EAAO8D,eACjDib,YAAY,2BAEjBthB,KAAKskB,WACH,IAAI1hB,EAAO+uC,UAAU,WAAY,IAAI+c,GAClCptC,YAAY,oCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOke,OAAO,SAAU,GAChC7vB,eAAe,GACfC,YAAY,4BAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,0BACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,EAWTxuB,gBAAgB1b,EAAI2b,EAAU,GAAIC,EAAM,MACtC,MAAMwuB,EAAU5rB,MAAM9C,gBAAgB1b,GAChCqqC,EAAK,IAAId,EAgCf,OA9BAa,EAAQ1S,QAAQxY,QAASmY,IACvB,IAAIgV,EAAY,IAAI5C,EAAOpS,EAAOhJ,QAASgJ,EAAO/I,QAElD+d,EAAUxxB,eAAewc,EAAOvc,YAChCuxB,EAAU/xB,YAAY+c,EAAO9c,SAC7B8vB,EAAGjT,UAAUiV,KAGfjC,EAAQxS,UAAU1Y,QAASqY,IACzB,IAAI+U,EAAc,IAAI5C,EAASnS,EAASlJ,QAASkJ,EAAShd,SAE1D8vB,EAAG/S,YAAYgV,KAGjBlC,EAAQtS,SAAS5Y,QAASuY,IACxB,IAAI8U,EAAa,IAAI/C,EAAQ/R,EAAQpJ,SAErCke,EAAW1xB,eAAe4c,EAAQ3c,YACD,IAAP,EAArB2c,EAAQiB,aACX6T,EAAW5T,iBAAiBlB,EAAQc,cAEL,IAAP,EAArBd,EAAQiB,aACX6T,EAAW1T,YAAYpB,EAAQe,SAEA,IAAP,EAArBf,EAAQiB,aACX6T,EAAWzT,YAAYrB,EAAQgB,SAEjC4R,EAAG7S,WAAW+U,KAGTlC,qBC/GX,MAAMhtC,EAASP,EAAQ,GAA0BO,OAC3CysC,EAAgBzsC,EAAOysC,cA2C7BzvC,EAAOD,QAtCP,cAAuB0vC,EAIrBvsC,cACEihB,MAAM,yBACN/jB,KAAKshB,YAAY,sEACjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,WAC7BnS,YAAY,kCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOzT,SAAS,UACxB+B,YAAY,mCAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,yCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKD,gBAAgB,UAAW,GACxC5R,YAAY,kCAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,iCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,qBCxCX,MAAM7sC,EAASP,EAAQ,GAA0BO,OAC3CysC,EAAgBzsC,EAAOysC,cAmD7BzvC,EAAOD,QA9CP,cAA0B0vC,EAIxBvsC,cACEihB,MAAM,0BACN/jB,KAAKshB,YAAY,uEACjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOS,cAAc,WAC7BnS,YAAY,kCAEjBthB,KAAKskB,YACH,IAAI1hB,EAAOowB,OAAOuc,YACfjuB,YAAY,yCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKoE,KAAK,cAClBjW,YAAY,qBAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOC,KAAKF,UAAU,gBAC9BzR,YAAY,uCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOowB,OAAOuK,YAAY,UAAW,GACtCjc,YAAY,iCAEjBthB,KAAKskB,WACH,IAAI1hB,EAAOuwB,KAAKqE,MAAM,WACnBlW,YAAY,iCAQnBkuB,eACE,IAAIC,EAAO1rB,MAAMyrB,SAIjB,OAFAC,EAAK9uC,KAAO,kCACZ8uC,EAAKC,UAAUluB,KAAKiuB,EAAK9uC,MAClB8uC,qBChDX,MAAMkD,EAAStwC,EAAQ,IACjBssD,EAAqBtsD,EAAQ,IAE7BusD,EAAeztD,OAAO,cACtB0tD,EAAU1tD,OAAO,SACjB+tC,EAAW/tC,OAAO,UA8DxBvB,EAAOD,QAxDP,MAIEmD,cACE9C,KAAK4uD,GAAgB,GACrB5uD,KAAK6uD,GAAW,IAAIF,EACpB3uD,KAAKkvC,GAAY,IAAIyD,EASvBmc,kBAAkBtwB,EAAWK,EAAW,MAStC,OARiB,OAAbA,GACF7+B,KAAKkvC,GAAUtQ,mBAAmBJ,EAAWK,GAE/C7+B,KAAK4uD,GAAcptC,KAAK,CACtButC,OAAQvwB,EAAU9B,OAClB8B,UAAWA,IAGNx+B,KASTgvD,aAAav2B,EAAS+F,GACpB,IAAKA,EAAUje,SAAU,CACvB,IAAIoZ,EAAO35B,KAAKkvC,GAAUvV,KAAKlB,EAAS+F,GAExCA,EAAUle,SAASqZ,EAAKz4B,EAAGy4B,EAAKx3B,GAMlC,OAJAnC,KAAK4uD,GAAcptC,KAAK,CACtButC,OAAQvwB,EAAU9B,OAClB8B,UAAWA,IAENx+B,KAGTivD,iBACE,OAAOjvD,KAAK4uD,GAGdzuB,YACE,OAAOngC,KAAK4uD,GAAcjrD","file":"@pascalcoin-sbx/signing.node.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 83);\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      try {\n        return BC.fromHex(data);\n      } catch (e) {\n        return BC.fromString(data);\n      }\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str, 'utf8'));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString('utf8');\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst PascalCoinInfo = require('@pascalcoin-sbx/common').PascalCoinInfo;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n  }\n\n  /**\n   * Sets the payload of the transaction instance.\n   *\n   * @param {BC} payload\n   *\n   * @returns {Abstract}\n   */\n  withPayload(payload) {\n    this[P_PAYLOAD] = BC.from(payload);\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee(lastKnownBlock = null) {\n    this[P_FEE] = PascalCoinInfo.MIN_FEE(lastKnownBlock);\n    return this;\n  }\n\n  withNOperation(nOperation) {\n    this[P_N_OPERATION] = nOperation;\n    return this;\n  }\n\n  withSign(r, s) {\n    this[P_R] = BC.from(r);\n    this[P_S] = BC.from(s);\n  }\n\n  /**\n   * Gets the prepared payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the r value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n   * Gets the s value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n   * Gets the fee.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the n operation.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n\n  usesDigestToSign() {\n    return false;\n  }\n}\n\nmodule.exports = Abstract;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\nconst P_HAS_FIXED_VALUE = Symbol('has_fixed_value');\nconst P_DESCRIPTION = Symbol('description');\n\n/**\n * Abstract field type to encode and decode values. Abstracts encodeToBytes and decodeFromBytes as\n * basic implementations but in fact it can be anything.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string|null} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n    this[P_HAS_FIXED_VALUE] = false;\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Gets a value indicating whether the field type has a fixed value.\n   *\n   * @returns {Boolean}\n   */\n  get hasFixedValue() {\n    return this[P_HAS_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the fixed value.\n   *\n   * @returns {*}\n   */\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the encoded size of the type.\n   *\n   * @return {Number}\n   */\n  get encodedSize() {\n    throw new Error('Encoded size getter not implemented');\n  }\n\n  /**\n   * Decodes a value using the rules defined in the method from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Returns the encoded bytes for the given value.\n   *\n   * @param {*} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  withFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    this[P_HAS_FIXED_VALUE] = true;\n    return this;\n  }\n\n  /**\n   * Sets the description and returns the type or gets the description itself.\n   *\n   * @param {String} description\n   * @returns {AbstractType|String}\n   */\n  description(description = null) {\n    if (description === null) {\n      return this[P_DESCRIPTION];\n    }\n\n    if (this[P_DESCRIPTION] === undefined) {\n      this[P_DESCRIPTION] = [];\n    }\n    this[P_DESCRIPTION].push(description);\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the type can be decoded. It is\n   * not possible in some circumstances.\n   *\n   * @return {boolean}\n   */\n  get canDecode() {\n    return true;\n  }\n}\n\nmodule.exports = AbstractType;\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int32', unsigned, endian);\n    this.description('4byte 32bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 4;\n  }\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int32;\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","class Abstract {\n  /**\n   * Encrypts the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @param {Object} options\n   * @return {BC}\n   */\n  static encrypt(value, options = {}) {\n    throw new Error('encrypt not implemented');\n  }\n\n  /**\n   * Decrypts the given bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @param {Object} options\n   * @return {BC}\n   */\n  static decrypt(value, options = {}) {\n    throw new Error('decrypt not implemented');\n  }\n}\n\nmodule.exports = Abstract;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SUBTYPES = Symbol('subtypes');\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A Type that itself is made up of multiple other (sub-)types.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id || 'composite_type');\n    super.description('A type that itself is made up of multiple other types.');\n    this[P_SUBTYPES] = [];\n  }\n\n  /**\n   * Gets all subtypes.\n   *\n   * @returns {Array}\n   */\n  get subTypes() {\n    return this[P_SUBTYPES];\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Adds a new field (type) definition.\n   *\n   * @param {AbstractType} field\n   */\n  addSubType(field) {\n    this[P_SUBTYPES].push(field);\n    return this;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = { toArray: false }, all = null) {\n    if (this.canDecode === false) {\n      throw new Error('This type cannot be decoded.');\n    }\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.subTypes.forEach((subType) => {\n      obj[subType.id] = subType.decodeFromBytes(bc.slice(offset), options, obj);\n      offset += subType.encodedSize;\n    });\n    this[P_SIZE_ENCODED] = offset;\n\n    return options.toArray ? Object.values(obj) : obj;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array|*} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let bc = BC.empty();\n\n    this.subTypes.forEach((subType, idx) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = Array.isArray(objOrArray) ? objOrArray[idx] : objOrArray[subType.id];\n      }\n\n      // we will use the first available\n      bc = bc.append(subType.encodeToBytes(subTypeValue, objOrArray));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = CompositeType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n}\n\nmodule.exports = AbstractInt;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for a 16bit int value.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int16', unsigned, endian);\n    this.description('2byte 16bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 2;\n  }\n\n  /**\n   * Decodes the int16 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Encodes the given Int16 value to a byte sequence.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int16;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8Bit int value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id || 'int8', unsigned, Endian.LITTLE_ENDIAN);\n    this.description('1byte 8bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 1;\n  }\n\n  /**\n   * Reads the int8 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt8(0, this.unsigned);\n  }\n\n  /**\n   * Encodes the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned);\n  }\n}\n\nmodule.exports = Int8;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write bytes without prepending the length. This cannot be decoded in some circumstances.\n */\nclass BytesWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'bytes_without_length');\n    this.description('Bytes without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value);\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = BytesWithoutLength;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2007-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief AES-128/192/256 encryption (Rijndael) implementation\r\n// This implementation is inspired by Fritz Schneider's Rijndael Reference Implementation\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\nvar blockmode_1 = require(\"./blockmode\");\r\nvar padding_1 = require(\"./padding\");\r\n/**\r\n * AES class\r\n */\r\nvar AES = /** @class */ (function () {\r\n    /**\r\n     * AES ctor\r\n     */\r\n    function AES() {\r\n        // defines the block size in bytes. AES uses a fixed block size of 128 bits\r\n        this.blockSize = 16;\r\n        this.keylen = {\r\n            16: { rounds: 10, kc: 4 },\r\n            24: { rounds: 12, kc: 6 },\r\n            32: { rounds: 14, kc: 8 }\r\n        };\r\n        // round constants used in subkey expansion\r\n        this.Rcon = new Uint8Array([\r\n            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91\r\n        ]);\r\n        // precomputed lookup table for the SBox\r\n        this.S = new Uint8Array([\r\n            99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164,\r\n            114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226,\r\n            235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203,\r\n            190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245,\r\n            188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42,\r\n            144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109,\r\n            141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62,\r\n            181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223,\r\n            140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22\r\n        ]);\r\n        // precomputed lookup table for the inverse SBox\r\n        this.S5 = new Uint8Array([\r\n            82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222,\r\n            233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73,\r\n            109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21,\r\n            70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2,\r\n            193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173,\r\n            53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75,\r\n            198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81,\r\n            127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97,\r\n            23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125\r\n        ]);\r\n        this.T1 = new Uint32Array([\r\n            0xa56363c6, 0x847c7cf8, 0x997777ee, 0x8d7b7bf6, 0x0df2f2ff, 0xbd6b6bd6, 0xb16f6fde, 0x54c5c591, 0x50303060, 0x03010102, 0xa96767ce, 0x7d2b2b56, 0x19fefee7, 0x62d7d7b5, 0xe6abab4d, 0x9a7676ec,\r\n            0x45caca8f, 0x9d82821f, 0x40c9c989, 0x877d7dfa, 0x15fafaef, 0xeb5959b2, 0xc947478e, 0x0bf0f0fb, 0xecadad41, 0x67d4d4b3, 0xfda2a25f, 0xeaafaf45, 0xbf9c9c23, 0xf7a4a453, 0x967272e4, 0x5bc0c09b,\r\n            0xc2b7b775, 0x1cfdfde1, 0xae93933d, 0x6a26264c, 0x5a36366c, 0x413f3f7e, 0x02f7f7f5, 0x4fcccc83, 0x5c343468, 0xf4a5a551, 0x34e5e5d1, 0x08f1f1f9, 0x937171e2, 0x73d8d8ab, 0x53313162, 0x3f15152a,\r\n            0x0c040408, 0x52c7c795, 0x65232346, 0x5ec3c39d, 0x28181830, 0xa1969637, 0x0f05050a, 0xb59a9a2f, 0x0907070e, 0x36121224, 0x9b80801b, 0x3de2e2df, 0x26ebebcd, 0x6927274e, 0xcdb2b27f, 0x9f7575ea,\r\n            0x1b090912, 0x9e83831d, 0x742c2c58, 0x2e1a1a34, 0x2d1b1b36, 0xb26e6edc, 0xee5a5ab4, 0xfba0a05b, 0xf65252a4, 0x4d3b3b76, 0x61d6d6b7, 0xceb3b37d, 0x7b292952, 0x3ee3e3dd, 0x712f2f5e, 0x97848413,\r\n            0xf55353a6, 0x68d1d1b9, 0x00000000, 0x2cededc1, 0x60202040, 0x1ffcfce3, 0xc8b1b179, 0xed5b5bb6, 0xbe6a6ad4, 0x46cbcb8d, 0xd9bebe67, 0x4b393972, 0xde4a4a94, 0xd44c4c98, 0xe85858b0, 0x4acfcf85,\r\n            0x6bd0d0bb, 0x2aefefc5, 0xe5aaaa4f, 0x16fbfbed, 0xc5434386, 0xd74d4d9a, 0x55333366, 0x94858511, 0xcf45458a, 0x10f9f9e9, 0x06020204, 0x817f7ffe, 0xf05050a0, 0x443c3c78, 0xba9f9f25, 0xe3a8a84b,\r\n            0xf35151a2, 0xfea3a35d, 0xc0404080, 0x8a8f8f05, 0xad92923f, 0xbc9d9d21, 0x48383870, 0x04f5f5f1, 0xdfbcbc63, 0xc1b6b677, 0x75dadaaf, 0x63212142, 0x30101020, 0x1affffe5, 0x0ef3f3fd, 0x6dd2d2bf,\r\n            0x4ccdcd81, 0x140c0c18, 0x35131326, 0x2fececc3, 0xe15f5fbe, 0xa2979735, 0xcc444488, 0x3917172e, 0x57c4c493, 0xf2a7a755, 0x827e7efc, 0x473d3d7a, 0xac6464c8, 0xe75d5dba, 0x2b191932, 0x957373e6,\r\n            0xa06060c0, 0x98818119, 0xd14f4f9e, 0x7fdcdca3, 0x66222244, 0x7e2a2a54, 0xab90903b, 0x8388880b, 0xca46468c, 0x29eeeec7, 0xd3b8b86b, 0x3c141428, 0x79dedea7, 0xe25e5ebc, 0x1d0b0b16, 0x76dbdbad,\r\n            0x3be0e0db, 0x56323264, 0x4e3a3a74, 0x1e0a0a14, 0xdb494992, 0x0a06060c, 0x6c242448, 0xe45c5cb8, 0x5dc2c29f, 0x6ed3d3bd, 0xefacac43, 0xa66262c4, 0xa8919139, 0xa4959531, 0x37e4e4d3, 0x8b7979f2,\r\n            0x32e7e7d5, 0x43c8c88b, 0x5937376e, 0xb76d6dda, 0x8c8d8d01, 0x64d5d5b1, 0xd24e4e9c, 0xe0a9a949, 0xb46c6cd8, 0xfa5656ac, 0x07f4f4f3, 0x25eaeacf, 0xaf6565ca, 0x8e7a7af4, 0xe9aeae47, 0x18080810,\r\n            0xd5baba6f, 0x887878f0, 0x6f25254a, 0x722e2e5c, 0x241c1c38, 0xf1a6a657, 0xc7b4b473, 0x51c6c697, 0x23e8e8cb, 0x7cdddda1, 0x9c7474e8, 0x211f1f3e, 0xdd4b4b96, 0xdcbdbd61, 0x868b8b0d, 0x858a8a0f,\r\n            0x907070e0, 0x423e3e7c, 0xc4b5b571, 0xaa6666cc, 0xd8484890, 0x05030306, 0x01f6f6f7, 0x120e0e1c, 0xa36161c2, 0x5f35356a, 0xf95757ae, 0xd0b9b969, 0x91868617, 0x58c1c199, 0x271d1d3a, 0xb99e9e27,\r\n            0x38e1e1d9, 0x13f8f8eb, 0xb398982b, 0x33111122, 0xbb6969d2, 0x70d9d9a9, 0x898e8e07, 0xa7949433, 0xb69b9b2d, 0x221e1e3c, 0x92878715, 0x20e9e9c9, 0x49cece87, 0xff5555aa, 0x78282850, 0x7adfdfa5,\r\n            0x8f8c8c03, 0xf8a1a159, 0x80898909, 0x170d0d1a, 0xdabfbf65, 0x31e6e6d7, 0xc6424284, 0xb86868d0, 0xc3414182, 0xb0999929, 0x772d2d5a, 0x110f0f1e, 0xcbb0b07b, 0xfc5454a8, 0xd6bbbb6d, 0x3a16162c\r\n        ]);\r\n        this.T2 = new Uint32Array([\r\n            0x6363c6a5, 0x7c7cf884, 0x7777ee99, 0x7b7bf68d, 0xf2f2ff0d, 0x6b6bd6bd, 0x6f6fdeb1, 0xc5c59154, 0x30306050, 0x01010203, 0x6767cea9, 0x2b2b567d, 0xfefee719, 0xd7d7b562, 0xabab4de6, 0x7676ec9a,\r\n            0xcaca8f45, 0x82821f9d, 0xc9c98940, 0x7d7dfa87, 0xfafaef15, 0x5959b2eb, 0x47478ec9, 0xf0f0fb0b, 0xadad41ec, 0xd4d4b367, 0xa2a25ffd, 0xafaf45ea, 0x9c9c23bf, 0xa4a453f7, 0x7272e496, 0xc0c09b5b,\r\n            0xb7b775c2, 0xfdfde11c, 0x93933dae, 0x26264c6a, 0x36366c5a, 0x3f3f7e41, 0xf7f7f502, 0xcccc834f, 0x3434685c, 0xa5a551f4, 0xe5e5d134, 0xf1f1f908, 0x7171e293, 0xd8d8ab73, 0x31316253, 0x15152a3f,\r\n            0x0404080c, 0xc7c79552, 0x23234665, 0xc3c39d5e, 0x18183028, 0x969637a1, 0x05050a0f, 0x9a9a2fb5, 0x07070e09, 0x12122436, 0x80801b9b, 0xe2e2df3d, 0xebebcd26, 0x27274e69, 0xb2b27fcd, 0x7575ea9f,\r\n            0x0909121b, 0x83831d9e, 0x2c2c5874, 0x1a1a342e, 0x1b1b362d, 0x6e6edcb2, 0x5a5ab4ee, 0xa0a05bfb, 0x5252a4f6, 0x3b3b764d, 0xd6d6b761, 0xb3b37dce, 0x2929527b, 0xe3e3dd3e, 0x2f2f5e71, 0x84841397,\r\n            0x5353a6f5, 0xd1d1b968, 0x00000000, 0xededc12c, 0x20204060, 0xfcfce31f, 0xb1b179c8, 0x5b5bb6ed, 0x6a6ad4be, 0xcbcb8d46, 0xbebe67d9, 0x3939724b, 0x4a4a94de, 0x4c4c98d4, 0x5858b0e8, 0xcfcf854a,\r\n            0xd0d0bb6b, 0xefefc52a, 0xaaaa4fe5, 0xfbfbed16, 0x434386c5, 0x4d4d9ad7, 0x33336655, 0x85851194, 0x45458acf, 0xf9f9e910, 0x02020406, 0x7f7ffe81, 0x5050a0f0, 0x3c3c7844, 0x9f9f25ba, 0xa8a84be3,\r\n            0x5151a2f3, 0xa3a35dfe, 0x404080c0, 0x8f8f058a, 0x92923fad, 0x9d9d21bc, 0x38387048, 0xf5f5f104, 0xbcbc63df, 0xb6b677c1, 0xdadaaf75, 0x21214263, 0x10102030, 0xffffe51a, 0xf3f3fd0e, 0xd2d2bf6d,\r\n            0xcdcd814c, 0x0c0c1814, 0x13132635, 0xececc32f, 0x5f5fbee1, 0x979735a2, 0x444488cc, 0x17172e39, 0xc4c49357, 0xa7a755f2, 0x7e7efc82, 0x3d3d7a47, 0x6464c8ac, 0x5d5dbae7, 0x1919322b, 0x7373e695,\r\n            0x6060c0a0, 0x81811998, 0x4f4f9ed1, 0xdcdca37f, 0x22224466, 0x2a2a547e, 0x90903bab, 0x88880b83, 0x46468cca, 0xeeeec729, 0xb8b86bd3, 0x1414283c, 0xdedea779, 0x5e5ebce2, 0x0b0b161d, 0xdbdbad76,\r\n            0xe0e0db3b, 0x32326456, 0x3a3a744e, 0x0a0a141e, 0x494992db, 0x06060c0a, 0x2424486c, 0x5c5cb8e4, 0xc2c29f5d, 0xd3d3bd6e, 0xacac43ef, 0x6262c4a6, 0x919139a8, 0x959531a4, 0xe4e4d337, 0x7979f28b,\r\n            0xe7e7d532, 0xc8c88b43, 0x37376e59, 0x6d6ddab7, 0x8d8d018c, 0xd5d5b164, 0x4e4e9cd2, 0xa9a949e0, 0x6c6cd8b4, 0x5656acfa, 0xf4f4f307, 0xeaeacf25, 0x6565caaf, 0x7a7af48e, 0xaeae47e9, 0x08081018,\r\n            0xbaba6fd5, 0x7878f088, 0x25254a6f, 0x2e2e5c72, 0x1c1c3824, 0xa6a657f1, 0xb4b473c7, 0xc6c69751, 0xe8e8cb23, 0xdddda17c, 0x7474e89c, 0x1f1f3e21, 0x4b4b96dd, 0xbdbd61dc, 0x8b8b0d86, 0x8a8a0f85,\r\n            0x7070e090, 0x3e3e7c42, 0xb5b571c4, 0x6666ccaa, 0x484890d8, 0x03030605, 0xf6f6f701, 0x0e0e1c12, 0x6161c2a3, 0x35356a5f, 0x5757aef9, 0xb9b969d0, 0x86861791, 0xc1c19958, 0x1d1d3a27, 0x9e9e27b9,\r\n            0xe1e1d938, 0xf8f8eb13, 0x98982bb3, 0x11112233, 0x6969d2bb, 0xd9d9a970, 0x8e8e0789, 0x949433a7, 0x9b9b2db6, 0x1e1e3c22, 0x87871592, 0xe9e9c920, 0xcece8749, 0x5555aaff, 0x28285078, 0xdfdfa57a,\r\n            0x8c8c038f, 0xa1a159f8, 0x89890980, 0x0d0d1a17, 0xbfbf65da, 0xe6e6d731, 0x424284c6, 0x6868d0b8, 0x414182c3, 0x999929b0, 0x2d2d5a77, 0x0f0f1e11, 0xb0b07bcb, 0x5454a8fc, 0xbbbb6dd6, 0x16162c3a\r\n        ]);\r\n        this.T3 = new Uint32Array([\r\n            0x63c6a563, 0x7cf8847c, 0x77ee9977, 0x7bf68d7b, 0xf2ff0df2, 0x6bd6bd6b, 0x6fdeb16f, 0xc59154c5, 0x30605030, 0x01020301, 0x67cea967, 0x2b567d2b, 0xfee719fe, 0xd7b562d7, 0xab4de6ab, 0x76ec9a76,\r\n            0xca8f45ca, 0x821f9d82, 0xc98940c9, 0x7dfa877d, 0xfaef15fa, 0x59b2eb59, 0x478ec947, 0xf0fb0bf0, 0xad41ecad, 0xd4b367d4, 0xa25ffda2, 0xaf45eaaf, 0x9c23bf9c, 0xa453f7a4, 0x72e49672, 0xc09b5bc0,\r\n            0xb775c2b7, 0xfde11cfd, 0x933dae93, 0x264c6a26, 0x366c5a36, 0x3f7e413f, 0xf7f502f7, 0xcc834fcc, 0x34685c34, 0xa551f4a5, 0xe5d134e5, 0xf1f908f1, 0x71e29371, 0xd8ab73d8, 0x31625331, 0x152a3f15,\r\n            0x04080c04, 0xc79552c7, 0x23466523, 0xc39d5ec3, 0x18302818, 0x9637a196, 0x050a0f05, 0x9a2fb59a, 0x070e0907, 0x12243612, 0x801b9b80, 0xe2df3de2, 0xebcd26eb, 0x274e6927, 0xb27fcdb2, 0x75ea9f75,\r\n            0x09121b09, 0x831d9e83, 0x2c58742c, 0x1a342e1a, 0x1b362d1b, 0x6edcb26e, 0x5ab4ee5a, 0xa05bfba0, 0x52a4f652, 0x3b764d3b, 0xd6b761d6, 0xb37dceb3, 0x29527b29, 0xe3dd3ee3, 0x2f5e712f, 0x84139784,\r\n            0x53a6f553, 0xd1b968d1, 0x00000000, 0xedc12ced, 0x20406020, 0xfce31ffc, 0xb179c8b1, 0x5bb6ed5b, 0x6ad4be6a, 0xcb8d46cb, 0xbe67d9be, 0x39724b39, 0x4a94de4a, 0x4c98d44c, 0x58b0e858, 0xcf854acf,\r\n            0xd0bb6bd0, 0xefc52aef, 0xaa4fe5aa, 0xfbed16fb, 0x4386c543, 0x4d9ad74d, 0x33665533, 0x85119485, 0x458acf45, 0xf9e910f9, 0x02040602, 0x7ffe817f, 0x50a0f050, 0x3c78443c, 0x9f25ba9f, 0xa84be3a8,\r\n            0x51a2f351, 0xa35dfea3, 0x4080c040, 0x8f058a8f, 0x923fad92, 0x9d21bc9d, 0x38704838, 0xf5f104f5, 0xbc63dfbc, 0xb677c1b6, 0xdaaf75da, 0x21426321, 0x10203010, 0xffe51aff, 0xf3fd0ef3, 0xd2bf6dd2,\r\n            0xcd814ccd, 0x0c18140c, 0x13263513, 0xecc32fec, 0x5fbee15f, 0x9735a297, 0x4488cc44, 0x172e3917, 0xc49357c4, 0xa755f2a7, 0x7efc827e, 0x3d7a473d, 0x64c8ac64, 0x5dbae75d, 0x19322b19, 0x73e69573,\r\n            0x60c0a060, 0x81199881, 0x4f9ed14f, 0xdca37fdc, 0x22446622, 0x2a547e2a, 0x903bab90, 0x880b8388, 0x468cca46, 0xeec729ee, 0xb86bd3b8, 0x14283c14, 0xdea779de, 0x5ebce25e, 0x0b161d0b, 0xdbad76db,\r\n            0xe0db3be0, 0x32645632, 0x3a744e3a, 0x0a141e0a, 0x4992db49, 0x060c0a06, 0x24486c24, 0x5cb8e45c, 0xc29f5dc2, 0xd3bd6ed3, 0xac43efac, 0x62c4a662, 0x9139a891, 0x9531a495, 0xe4d337e4, 0x79f28b79,\r\n            0xe7d532e7, 0xc88b43c8, 0x376e5937, 0x6ddab76d, 0x8d018c8d, 0xd5b164d5, 0x4e9cd24e, 0xa949e0a9, 0x6cd8b46c, 0x56acfa56, 0xf4f307f4, 0xeacf25ea, 0x65caaf65, 0x7af48e7a, 0xae47e9ae, 0x08101808,\r\n            0xba6fd5ba, 0x78f08878, 0x254a6f25, 0x2e5c722e, 0x1c38241c, 0xa657f1a6, 0xb473c7b4, 0xc69751c6, 0xe8cb23e8, 0xdda17cdd, 0x74e89c74, 0x1f3e211f, 0x4b96dd4b, 0xbd61dcbd, 0x8b0d868b, 0x8a0f858a,\r\n            0x70e09070, 0x3e7c423e, 0xb571c4b5, 0x66ccaa66, 0x4890d848, 0x03060503, 0xf6f701f6, 0x0e1c120e, 0x61c2a361, 0x356a5f35, 0x57aef957, 0xb969d0b9, 0x86179186, 0xc19958c1, 0x1d3a271d, 0x9e27b99e,\r\n            0xe1d938e1, 0xf8eb13f8, 0x982bb398, 0x11223311, 0x69d2bb69, 0xd9a970d9, 0x8e07898e, 0x9433a794, 0x9b2db69b, 0x1e3c221e, 0x87159287, 0xe9c920e9, 0xce8749ce, 0x55aaff55, 0x28507828, 0xdfa57adf,\r\n            0x8c038f8c, 0xa159f8a1, 0x89098089, 0x0d1a170d, 0xbf65dabf, 0xe6d731e6, 0x4284c642, 0x68d0b868, 0x4182c341, 0x9929b099, 0x2d5a772d, 0x0f1e110f, 0xb07bcbb0, 0x54a8fc54, 0xbb6dd6bb, 0x162c3a16\r\n        ]);\r\n        this.T4 = new Uint32Array([\r\n            0xc6a56363, 0xf8847c7c, 0xee997777, 0xf68d7b7b, 0xff0df2f2, 0xd6bd6b6b, 0xdeb16f6f, 0x9154c5c5, 0x60503030, 0x02030101, 0xcea96767, 0x567d2b2b, 0xe719fefe, 0xb562d7d7, 0x4de6abab, 0xec9a7676,\r\n            0x8f45caca, 0x1f9d8282, 0x8940c9c9, 0xfa877d7d, 0xef15fafa, 0xb2eb5959, 0x8ec94747, 0xfb0bf0f0, 0x41ecadad, 0xb367d4d4, 0x5ffda2a2, 0x45eaafaf, 0x23bf9c9c, 0x53f7a4a4, 0xe4967272, 0x9b5bc0c0,\r\n            0x75c2b7b7, 0xe11cfdfd, 0x3dae9393, 0x4c6a2626, 0x6c5a3636, 0x7e413f3f, 0xf502f7f7, 0x834fcccc, 0x685c3434, 0x51f4a5a5, 0xd134e5e5, 0xf908f1f1, 0xe2937171, 0xab73d8d8, 0x62533131, 0x2a3f1515,\r\n            0x080c0404, 0x9552c7c7, 0x46652323, 0x9d5ec3c3, 0x30281818, 0x37a19696, 0x0a0f0505, 0x2fb59a9a, 0x0e090707, 0x24361212, 0x1b9b8080, 0xdf3de2e2, 0xcd26ebeb, 0x4e692727, 0x7fcdb2b2, 0xea9f7575,\r\n            0x121b0909, 0x1d9e8383, 0x58742c2c, 0x342e1a1a, 0x362d1b1b, 0xdcb26e6e, 0xb4ee5a5a, 0x5bfba0a0, 0xa4f65252, 0x764d3b3b, 0xb761d6d6, 0x7dceb3b3, 0x527b2929, 0xdd3ee3e3, 0x5e712f2f, 0x13978484,\r\n            0xa6f55353, 0xb968d1d1, 0x00000000, 0xc12ceded, 0x40602020, 0xe31ffcfc, 0x79c8b1b1, 0xb6ed5b5b, 0xd4be6a6a, 0x8d46cbcb, 0x67d9bebe, 0x724b3939, 0x94de4a4a, 0x98d44c4c, 0xb0e85858, 0x854acfcf,\r\n            0xbb6bd0d0, 0xc52aefef, 0x4fe5aaaa, 0xed16fbfb, 0x86c54343, 0x9ad74d4d, 0x66553333, 0x11948585, 0x8acf4545, 0xe910f9f9, 0x04060202, 0xfe817f7f, 0xa0f05050, 0x78443c3c, 0x25ba9f9f, 0x4be3a8a8,\r\n            0xa2f35151, 0x5dfea3a3, 0x80c04040, 0x058a8f8f, 0x3fad9292, 0x21bc9d9d, 0x70483838, 0xf104f5f5, 0x63dfbcbc, 0x77c1b6b6, 0xaf75dada, 0x42632121, 0x20301010, 0xe51affff, 0xfd0ef3f3, 0xbf6dd2d2,\r\n            0x814ccdcd, 0x18140c0c, 0x26351313, 0xc32fecec, 0xbee15f5f, 0x35a29797, 0x88cc4444, 0x2e391717, 0x9357c4c4, 0x55f2a7a7, 0xfc827e7e, 0x7a473d3d, 0xc8ac6464, 0xbae75d5d, 0x322b1919, 0xe6957373,\r\n            0xc0a06060, 0x19988181, 0x9ed14f4f, 0xa37fdcdc, 0x44662222, 0x547e2a2a, 0x3bab9090, 0x0b838888, 0x8cca4646, 0xc729eeee, 0x6bd3b8b8, 0x283c1414, 0xa779dede, 0xbce25e5e, 0x161d0b0b, 0xad76dbdb,\r\n            0xdb3be0e0, 0x64563232, 0x744e3a3a, 0x141e0a0a, 0x92db4949, 0x0c0a0606, 0x486c2424, 0xb8e45c5c, 0x9f5dc2c2, 0xbd6ed3d3, 0x43efacac, 0xc4a66262, 0x39a89191, 0x31a49595, 0xd337e4e4, 0xf28b7979,\r\n            0xd532e7e7, 0x8b43c8c8, 0x6e593737, 0xdab76d6d, 0x018c8d8d, 0xb164d5d5, 0x9cd24e4e, 0x49e0a9a9, 0xd8b46c6c, 0xacfa5656, 0xf307f4f4, 0xcf25eaea, 0xcaaf6565, 0xf48e7a7a, 0x47e9aeae, 0x10180808,\r\n            0x6fd5baba, 0xf0887878, 0x4a6f2525, 0x5c722e2e, 0x38241c1c, 0x57f1a6a6, 0x73c7b4b4, 0x9751c6c6, 0xcb23e8e8, 0xa17cdddd, 0xe89c7474, 0x3e211f1f, 0x96dd4b4b, 0x61dcbdbd, 0x0d868b8b, 0x0f858a8a,\r\n            0xe0907070, 0x7c423e3e, 0x71c4b5b5, 0xccaa6666, 0x90d84848, 0x06050303, 0xf701f6f6, 0x1c120e0e, 0xc2a36161, 0x6a5f3535, 0xaef95757, 0x69d0b9b9, 0x17918686, 0x9958c1c1, 0x3a271d1d, 0x27b99e9e,\r\n            0xd938e1e1, 0xeb13f8f8, 0x2bb39898, 0x22331111, 0xd2bb6969, 0xa970d9d9, 0x07898e8e, 0x33a79494, 0x2db69b9b, 0x3c221e1e, 0x15928787, 0xc920e9e9, 0x8749cece, 0xaaff5555, 0x50782828, 0xa57adfdf,\r\n            0x038f8c8c, 0x59f8a1a1, 0x09808989, 0x1a170d0d, 0x65dabfbf, 0xd731e6e6, 0x84c64242, 0xd0b86868, 0x82c34141, 0x29b09999, 0x5a772d2d, 0x1e110f0f, 0x7bcbb0b0, 0xa8fc5454, 0x6dd6bbbb, 0x2c3a1616\r\n        ]);\r\n        this.T5 = new Uint32Array([\r\n            0x50a7f451, 0x5365417e, 0xc3a4171a, 0x965e273a, 0xcb6bab3b, 0xf1459d1f, 0xab58faac, 0x9303e34b, 0x55fa3020, 0xf66d76ad, 0x9176cc88, 0x254c02f5, 0xfcd7e54f, 0xd7cb2ac5, 0x80443526, 0x8fa362b5,\r\n            0x495ab1de, 0x671bba25, 0x980eea45, 0xe1c0fe5d, 0x02752fc3, 0x12f04c81, 0xa397468d, 0xc6f9d36b, 0xe75f8f03, 0x959c9215, 0xeb7a6dbf, 0xda595295, 0x2d83bed4, 0xd3217458, 0x2969e049, 0x44c8c98e,\r\n            0x6a89c275, 0x78798ef4, 0x6b3e5899, 0xdd71b927, 0xb64fe1be, 0x17ad88f0, 0x66ac20c9, 0xb43ace7d, 0x184adf63, 0x82311ae5, 0x60335197, 0x457f5362, 0xe07764b1, 0x84ae6bbb, 0x1ca081fe, 0x942b08f9,\r\n            0x58684870, 0x19fd458f, 0x876cde94, 0xb7f87b52, 0x23d373ab, 0xe2024b72, 0x578f1fe3, 0x2aab5566, 0x0728ebb2, 0x03c2b52f, 0x9a7bc586, 0xa50837d3, 0xf2872830, 0xb2a5bf23, 0xba6a0302, 0x5c8216ed,\r\n            0x2b1ccf8a, 0x92b479a7, 0xf0f207f3, 0xa1e2694e, 0xcdf4da65, 0xd5be0506, 0x1f6234d1, 0x8afea6c4, 0x9d532e34, 0xa055f3a2, 0x32e18a05, 0x75ebf6a4, 0x39ec830b, 0xaaef6040, 0x069f715e, 0x51106ebd,\r\n            0xf98a213e, 0x3d06dd96, 0xae053edd, 0x46bde64d, 0xb58d5491, 0x055dc471, 0x6fd40604, 0xff155060, 0x24fb9819, 0x97e9bdd6, 0xcc434089, 0x779ed967, 0xbd42e8b0, 0x888b8907, 0x385b19e7, 0xdbeec879,\r\n            0x470a7ca1, 0xe90f427c, 0xc91e84f8, 0x00000000, 0x83868009, 0x48ed2b32, 0xac70111e, 0x4e725a6c, 0xfbff0efd, 0x5638850f, 0x1ed5ae3d, 0x27392d36, 0x64d90f0a, 0x21a65c68, 0xd1545b9b, 0x3a2e3624,\r\n            0xb1670a0c, 0x0fe75793, 0xd296eeb4, 0x9e919b1b, 0x4fc5c080, 0xa220dc61, 0x694b775a, 0x161a121c, 0x0aba93e2, 0xe52aa0c0, 0x43e0223c, 0x1d171b12, 0x0b0d090e, 0xadc78bf2, 0xb9a8b62d, 0xc8a91e14,\r\n            0x8519f157, 0x4c0775af, 0xbbdd99ee, 0xfd607fa3, 0x9f2601f7, 0xbcf5725c, 0xc53b6644, 0x347efb5b, 0x7629438b, 0xdcc623cb, 0x68fcedb6, 0x63f1e4b8, 0xcadc31d7, 0x10856342, 0x40229713, 0x2011c684,\r\n            0x7d244a85, 0xf83dbbd2, 0x1132f9ae, 0x6da129c7, 0x4b2f9e1d, 0xf330b2dc, 0xec52860d, 0xd0e3c177, 0x6c16b32b, 0x99b970a9, 0xfa489411, 0x2264e947, 0xc48cfca8, 0x1a3ff0a0, 0xd82c7d56, 0xef903322,\r\n            0xc74e4987, 0xc1d138d9, 0xfea2ca8c, 0x360bd498, 0xcf81f5a6, 0x28de7aa5, 0x268eb7da, 0xa4bfad3f, 0xe49d3a2c, 0x0d927850, 0x9bcc5f6a, 0x62467e54, 0xc2138df6, 0xe8b8d890, 0x5ef7392e, 0xf5afc382,\r\n            0xbe805d9f, 0x7c93d069, 0xa92dd56f, 0xb31225cf, 0x3b99acc8, 0xa77d1810, 0x6e639ce8, 0x7bbb3bdb, 0x097826cd, 0xf418596e, 0x01b79aec, 0xa89a4f83, 0x656e95e6, 0x7ee6ffaa, 0x08cfbc21, 0xe6e815ef,\r\n            0xd99be7ba, 0xce366f4a, 0xd4099fea, 0xd67cb029, 0xafb2a431, 0x31233f2a, 0x3094a5c6, 0xc066a235, 0x37bc4e74, 0xa6ca82fc, 0xb0d090e0, 0x15d8a733, 0x4a9804f1, 0xf7daec41, 0x0e50cd7f, 0x2ff69117,\r\n            0x8dd64d76, 0x4db0ef43, 0x544daacc, 0xdf0496e4, 0xe3b5d19e, 0x1b886a4c, 0xb81f2cc1, 0x7f516546, 0x04ea5e9d, 0x5d358c01, 0x737487fa, 0x2e410bfb, 0x5a1d67b3, 0x52d2db92, 0x335610e9, 0x1347d66d,\r\n            0x8c61d79a, 0x7a0ca137, 0x8e14f859, 0x893c13eb, 0xee27a9ce, 0x35c961b7, 0xede51ce1, 0x3cb1477a, 0x59dfd29c, 0x3f73f255, 0x79ce1418, 0xbf37c773, 0xeacdf753, 0x5baafd5f, 0x146f3ddf, 0x86db4478,\r\n            0x81f3afca, 0x3ec468b9, 0x2c342438, 0x5f40a3c2, 0x72c31d16, 0x0c25e2bc, 0x8b493c28, 0x41950dff, 0x7101a839, 0xdeb30c08, 0x9ce4b4d8, 0x90c15664, 0x6184cb7b, 0x70b632d5, 0x745c6c48, 0x4257b8d0\r\n        ]);\r\n        this.T6 = new Uint32Array([\r\n            0xa7f45150, 0x65417e53, 0xa4171ac3, 0x5e273a96, 0x6bab3bcb, 0x459d1ff1, 0x58faacab, 0x03e34b93, 0xfa302055, 0x6d76adf6, 0x76cc8891, 0x4c02f525, 0xd7e54ffc, 0xcb2ac5d7, 0x44352680, 0xa362b58f,\r\n            0x5ab1de49, 0x1bba2567, 0x0eea4598, 0xc0fe5de1, 0x752fc302, 0xf04c8112, 0x97468da3, 0xf9d36bc6, 0x5f8f03e7, 0x9c921595, 0x7a6dbfeb, 0x595295da, 0x83bed42d, 0x217458d3, 0x69e04929, 0xc8c98e44,\r\n            0x89c2756a, 0x798ef478, 0x3e58996b, 0x71b927dd, 0x4fe1beb6, 0xad88f017, 0xac20c966, 0x3ace7db4, 0x4adf6318, 0x311ae582, 0x33519760, 0x7f536245, 0x7764b1e0, 0xae6bbb84, 0xa081fe1c, 0x2b08f994,\r\n            0x68487058, 0xfd458f19, 0x6cde9487, 0xf87b52b7, 0xd373ab23, 0x024b72e2, 0x8f1fe357, 0xab55662a, 0x28ebb207, 0xc2b52f03, 0x7bc5869a, 0x0837d3a5, 0x872830f2, 0xa5bf23b2, 0x6a0302ba, 0x8216ed5c,\r\n            0x1ccf8a2b, 0xb479a792, 0xf207f3f0, 0xe2694ea1, 0xf4da65cd, 0xbe0506d5, 0x6234d11f, 0xfea6c48a, 0x532e349d, 0x55f3a2a0, 0xe18a0532, 0xebf6a475, 0xec830b39, 0xef6040aa, 0x9f715e06, 0x106ebd51,\r\n            0x8a213ef9, 0x06dd963d, 0x053eddae, 0xbde64d46, 0x8d5491b5, 0x5dc47105, 0xd406046f, 0x155060ff, 0xfb981924, 0xe9bdd697, 0x434089cc, 0x9ed96777, 0x42e8b0bd, 0x8b890788, 0x5b19e738, 0xeec879db,\r\n            0x0a7ca147, 0x0f427ce9, 0x1e84f8c9, 0x00000000, 0x86800983, 0xed2b3248, 0x70111eac, 0x725a6c4e, 0xff0efdfb, 0x38850f56, 0xd5ae3d1e, 0x392d3627, 0xd90f0a64, 0xa65c6821, 0x545b9bd1, 0x2e36243a,\r\n            0x670a0cb1, 0xe757930f, 0x96eeb4d2, 0x919b1b9e, 0xc5c0804f, 0x20dc61a2, 0x4b775a69, 0x1a121c16, 0xba93e20a, 0x2aa0c0e5, 0xe0223c43, 0x171b121d, 0x0d090e0b, 0xc78bf2ad, 0xa8b62db9, 0xa91e14c8,\r\n            0x19f15785, 0x0775af4c, 0xdd99eebb, 0x607fa3fd, 0x2601f79f, 0xf5725cbc, 0x3b6644c5, 0x7efb5b34, 0x29438b76, 0xc623cbdc, 0xfcedb668, 0xf1e4b863, 0xdc31d7ca, 0x85634210, 0x22971340, 0x11c68420,\r\n            0x244a857d, 0x3dbbd2f8, 0x32f9ae11, 0xa129c76d, 0x2f9e1d4b, 0x30b2dcf3, 0x52860dec, 0xe3c177d0, 0x16b32b6c, 0xb970a999, 0x489411fa, 0x64e94722, 0x8cfca8c4, 0x3ff0a01a, 0x2c7d56d8, 0x903322ef,\r\n            0x4e4987c7, 0xd138d9c1, 0xa2ca8cfe, 0x0bd49836, 0x81f5a6cf, 0xde7aa528, 0x8eb7da26, 0xbfad3fa4, 0x9d3a2ce4, 0x9278500d, 0xcc5f6a9b, 0x467e5462, 0x138df6c2, 0xb8d890e8, 0xf7392e5e, 0xafc382f5,\r\n            0x805d9fbe, 0x93d0697c, 0x2dd56fa9, 0x1225cfb3, 0x99acc83b, 0x7d1810a7, 0x639ce86e, 0xbb3bdb7b, 0x7826cd09, 0x18596ef4, 0xb79aec01, 0x9a4f83a8, 0x6e95e665, 0xe6ffaa7e, 0xcfbc2108, 0xe815efe6,\r\n            0x9be7bad9, 0x366f4ace, 0x099fead4, 0x7cb029d6, 0xb2a431af, 0x233f2a31, 0x94a5c630, 0x66a235c0, 0xbc4e7437, 0xca82fca6, 0xd090e0b0, 0xd8a73315, 0x9804f14a, 0xdaec41f7, 0x50cd7f0e, 0xf691172f,\r\n            0xd64d768d, 0xb0ef434d, 0x4daacc54, 0x0496e4df, 0xb5d19ee3, 0x886a4c1b, 0x1f2cc1b8, 0x5165467f, 0xea5e9d04, 0x358c015d, 0x7487fa73, 0x410bfb2e, 0x1d67b35a, 0xd2db9252, 0x5610e933, 0x47d66d13,\r\n            0x61d79a8c, 0x0ca1377a, 0x14f8598e, 0x3c13eb89, 0x27a9ceee, 0xc961b735, 0xe51ce1ed, 0xb1477a3c, 0xdfd29c59, 0x73f2553f, 0xce141879, 0x37c773bf, 0xcdf753ea, 0xaafd5f5b, 0x6f3ddf14, 0xdb447886,\r\n            0xf3afca81, 0xc468b93e, 0x3424382c, 0x40a3c25f, 0xc31d1672, 0x25e2bc0c, 0x493c288b, 0x950dff41, 0x01a83971, 0xb30c08de, 0xe4b4d89c, 0xc1566490, 0x84cb7b61, 0xb632d570, 0x5c6c4874, 0x57b8d042\r\n        ]);\r\n        this.T7 = new Uint32Array([\r\n            0xf45150a7, 0x417e5365, 0x171ac3a4, 0x273a965e, 0xab3bcb6b, 0x9d1ff145, 0xfaacab58, 0xe34b9303, 0x302055fa, 0x76adf66d, 0xcc889176, 0x02f5254c, 0xe54ffcd7, 0x2ac5d7cb, 0x35268044, 0x62b58fa3,\r\n            0xb1de495a, 0xba25671b, 0xea45980e, 0xfe5de1c0, 0x2fc30275, 0x4c8112f0, 0x468da397, 0xd36bc6f9, 0x8f03e75f, 0x9215959c, 0x6dbfeb7a, 0x5295da59, 0xbed42d83, 0x7458d321, 0xe0492969, 0xc98e44c8,\r\n            0xc2756a89, 0x8ef47879, 0x58996b3e, 0xb927dd71, 0xe1beb64f, 0x88f017ad, 0x20c966ac, 0xce7db43a, 0xdf63184a, 0x1ae58231, 0x51976033, 0x5362457f, 0x64b1e077, 0x6bbb84ae, 0x81fe1ca0, 0x08f9942b,\r\n            0x48705868, 0x458f19fd, 0xde94876c, 0x7b52b7f8, 0x73ab23d3, 0x4b72e202, 0x1fe3578f, 0x55662aab, 0xebb20728, 0xb52f03c2, 0xc5869a7b, 0x37d3a508, 0x2830f287, 0xbf23b2a5, 0x0302ba6a, 0x16ed5c82,\r\n            0xcf8a2b1c, 0x79a792b4, 0x07f3f0f2, 0x694ea1e2, 0xda65cdf4, 0x0506d5be, 0x34d11f62, 0xa6c48afe, 0x2e349d53, 0xf3a2a055, 0x8a0532e1, 0xf6a475eb, 0x830b39ec, 0x6040aaef, 0x715e069f, 0x6ebd5110,\r\n            0x213ef98a, 0xdd963d06, 0x3eddae05, 0xe64d46bd, 0x5491b58d, 0xc471055d, 0x06046fd4, 0x5060ff15, 0x981924fb, 0xbdd697e9, 0x4089cc43, 0xd967779e, 0xe8b0bd42, 0x8907888b, 0x19e7385b, 0xc879dbee,\r\n            0x7ca1470a, 0x427ce90f, 0x84f8c91e, 0x00000000, 0x80098386, 0x2b3248ed, 0x111eac70, 0x5a6c4e72, 0x0efdfbff, 0x850f5638, 0xae3d1ed5, 0x2d362739, 0x0f0a64d9, 0x5c6821a6, 0x5b9bd154, 0x36243a2e,\r\n            0x0a0cb167, 0x57930fe7, 0xeeb4d296, 0x9b1b9e91, 0xc0804fc5, 0xdc61a220, 0x775a694b, 0x121c161a, 0x93e20aba, 0xa0c0e52a, 0x223c43e0, 0x1b121d17, 0x090e0b0d, 0x8bf2adc7, 0xb62db9a8, 0x1e14c8a9,\r\n            0xf1578519, 0x75af4c07, 0x99eebbdd, 0x7fa3fd60, 0x01f79f26, 0x725cbcf5, 0x6644c53b, 0xfb5b347e, 0x438b7629, 0x23cbdcc6, 0xedb668fc, 0xe4b863f1, 0x31d7cadc, 0x63421085, 0x97134022, 0xc6842011,\r\n            0x4a857d24, 0xbbd2f83d, 0xf9ae1132, 0x29c76da1, 0x9e1d4b2f, 0xb2dcf330, 0x860dec52, 0xc177d0e3, 0xb32b6c16, 0x70a999b9, 0x9411fa48, 0xe9472264, 0xfca8c48c, 0xf0a01a3f, 0x7d56d82c, 0x3322ef90,\r\n            0x4987c74e, 0x38d9c1d1, 0xca8cfea2, 0xd498360b, 0xf5a6cf81, 0x7aa528de, 0xb7da268e, 0xad3fa4bf, 0x3a2ce49d, 0x78500d92, 0x5f6a9bcc, 0x7e546246, 0x8df6c213, 0xd890e8b8, 0x392e5ef7, 0xc382f5af,\r\n            0x5d9fbe80, 0xd0697c93, 0xd56fa92d, 0x25cfb312, 0xacc83b99, 0x1810a77d, 0x9ce86e63, 0x3bdb7bbb, 0x26cd0978, 0x596ef418, 0x9aec01b7, 0x4f83a89a, 0x95e6656e, 0xffaa7ee6, 0xbc2108cf, 0x15efe6e8,\r\n            0xe7bad99b, 0x6f4ace36, 0x9fead409, 0xb029d67c, 0xa431afb2, 0x3f2a3123, 0xa5c63094, 0xa235c066, 0x4e7437bc, 0x82fca6ca, 0x90e0b0d0, 0xa73315d8, 0x04f14a98, 0xec41f7da, 0xcd7f0e50, 0x91172ff6,\r\n            0x4d768dd6, 0xef434db0, 0xaacc544d, 0x96e4df04, 0xd19ee3b5, 0x6a4c1b88, 0x2cc1b81f, 0x65467f51, 0x5e9d04ea, 0x8c015d35, 0x87fa7374, 0x0bfb2e41, 0x67b35a1d, 0xdb9252d2, 0x10e93356, 0xd66d1347,\r\n            0xd79a8c61, 0xa1377a0c, 0xf8598e14, 0x13eb893c, 0xa9ceee27, 0x61b735c9, 0x1ce1ede5, 0x477a3cb1, 0xd29c59df, 0xf2553f73, 0x141879ce, 0xc773bf37, 0xf753eacd, 0xfd5f5baa, 0x3ddf146f, 0x447886db,\r\n            0xafca81f3, 0x68b93ec4, 0x24382c34, 0xa3c25f40, 0x1d1672c3, 0xe2bc0c25, 0x3c288b49, 0x0dff4195, 0xa8397101, 0x0c08deb3, 0xb4d89ce4, 0x566490c1, 0xcb7b6184, 0x32d570b6, 0x6c48745c, 0xb8d04257\r\n        ]);\r\n        this.T8 = new Uint32Array([\r\n            0x5150a7f4, 0x7e536541, 0x1ac3a417, 0x3a965e27, 0x3bcb6bab, 0x1ff1459d, 0xacab58fa, 0x4b9303e3, 0x2055fa30, 0xadf66d76, 0x889176cc, 0xf5254c02, 0x4ffcd7e5, 0xc5d7cb2a, 0x26804435, 0xb58fa362,\r\n            0xde495ab1, 0x25671bba, 0x45980eea, 0x5de1c0fe, 0xc302752f, 0x8112f04c, 0x8da39746, 0x6bc6f9d3, 0x03e75f8f, 0x15959c92, 0xbfeb7a6d, 0x95da5952, 0xd42d83be, 0x58d32174, 0x492969e0, 0x8e44c8c9,\r\n            0x756a89c2, 0xf478798e, 0x996b3e58, 0x27dd71b9, 0xbeb64fe1, 0xf017ad88, 0xc966ac20, 0x7db43ace, 0x63184adf, 0xe582311a, 0x97603351, 0x62457f53, 0xb1e07764, 0xbb84ae6b, 0xfe1ca081, 0xf9942b08,\r\n            0x70586848, 0x8f19fd45, 0x94876cde, 0x52b7f87b, 0xab23d373, 0x72e2024b, 0xe3578f1f, 0x662aab55, 0xb20728eb, 0x2f03c2b5, 0x869a7bc5, 0xd3a50837, 0x30f28728, 0x23b2a5bf, 0x02ba6a03, 0xed5c8216,\r\n            0x8a2b1ccf, 0xa792b479, 0xf3f0f207, 0x4ea1e269, 0x65cdf4da, 0x06d5be05, 0xd11f6234, 0xc48afea6, 0x349d532e, 0xa2a055f3, 0x0532e18a, 0xa475ebf6, 0x0b39ec83, 0x40aaef60, 0x5e069f71, 0xbd51106e,\r\n            0x3ef98a21, 0x963d06dd, 0xddae053e, 0x4d46bde6, 0x91b58d54, 0x71055dc4, 0x046fd406, 0x60ff1550, 0x1924fb98, 0xd697e9bd, 0x89cc4340, 0x67779ed9, 0xb0bd42e8, 0x07888b89, 0xe7385b19, 0x79dbeec8,\r\n            0xa1470a7c, 0x7ce90f42, 0xf8c91e84, 0x00000000, 0x09838680, 0x3248ed2b, 0x1eac7011, 0x6c4e725a, 0xfdfbff0e, 0x0f563885, 0x3d1ed5ae, 0x3627392d, 0x0a64d90f, 0x6821a65c, 0x9bd1545b, 0x243a2e36,\r\n            0x0cb1670a, 0x930fe757, 0xb4d296ee, 0x1b9e919b, 0x804fc5c0, 0x61a220dc, 0x5a694b77, 0x1c161a12, 0xe20aba93, 0xc0e52aa0, 0x3c43e022, 0x121d171b, 0x0e0b0d09, 0xf2adc78b, 0x2db9a8b6, 0x14c8a91e,\r\n            0x578519f1, 0xaf4c0775, 0xeebbdd99, 0xa3fd607f, 0xf79f2601, 0x5cbcf572, 0x44c53b66, 0x5b347efb, 0x8b762943, 0xcbdcc623, 0xb668fced, 0xb863f1e4, 0xd7cadc31, 0x42108563, 0x13402297, 0x842011c6,\r\n            0x857d244a, 0xd2f83dbb, 0xae1132f9, 0xc76da129, 0x1d4b2f9e, 0xdcf330b2, 0x0dec5286, 0x77d0e3c1, 0x2b6c16b3, 0xa999b970, 0x11fa4894, 0x472264e9, 0xa8c48cfc, 0xa01a3ff0, 0x56d82c7d, 0x22ef9033,\r\n            0x87c74e49, 0xd9c1d138, 0x8cfea2ca, 0x98360bd4, 0xa6cf81f5, 0xa528de7a, 0xda268eb7, 0x3fa4bfad, 0x2ce49d3a, 0x500d9278, 0x6a9bcc5f, 0x5462467e, 0xf6c2138d, 0x90e8b8d8, 0x2e5ef739, 0x82f5afc3,\r\n            0x9fbe805d, 0x697c93d0, 0x6fa92dd5, 0xcfb31225, 0xc83b99ac, 0x10a77d18, 0xe86e639c, 0xdb7bbb3b, 0xcd097826, 0x6ef41859, 0xec01b79a, 0x83a89a4f, 0xe6656e95, 0xaa7ee6ff, 0x2108cfbc, 0xefe6e815,\r\n            0xbad99be7, 0x4ace366f, 0xead4099f, 0x29d67cb0, 0x31afb2a4, 0x2a31233f, 0xc63094a5, 0x35c066a2, 0x7437bc4e, 0xfca6ca82, 0xe0b0d090, 0x3315d8a7, 0xf14a9804, 0x41f7daec, 0x7f0e50cd, 0x172ff691,\r\n            0x768dd64d, 0x434db0ef, 0xcc544daa, 0xe4df0496, 0x9ee3b5d1, 0x4c1b886a, 0xc1b81f2c, 0x467f5165, 0x9d04ea5e, 0x015d358c, 0xfa737487, 0xfb2e410b, 0xb35a1d67, 0x9252d2db, 0xe9335610, 0x6d1347d6,\r\n            0x9a8c61d7, 0x377a0ca1, 0x598e14f8, 0xeb893c13, 0xceee27a9, 0xb735c961, 0xe1ede51c, 0x7a3cb147, 0x9c59dfd2, 0x553f73f2, 0x1879ce14, 0x73bf37c7, 0x53eacdf7, 0x5f5baafd, 0xdf146f3d, 0x7886db44,\r\n            0xca81f3af, 0xb93ec468, 0x382c3424, 0xc25f40a3, 0x1672c31d, 0xbc0c25e2, 0x288b493c, 0xff41950d, 0x397101a8, 0x08deb30c, 0xd89ce4b4, 0x6490c156, 0x7b6184cb, 0xd570b632, 0x48745c6c, 0xd04257b8\r\n        ]);\r\n        this.U1 = new Uint32Array([\r\n            0x00000000, 0x0b0d090e, 0x161a121c, 0x1d171b12, 0x2c342438, 0x27392d36, 0x3a2e3624, 0x31233f2a, 0x58684870, 0x5365417e, 0x4e725a6c, 0x457f5362, 0x745c6c48, 0x7f516546, 0x62467e54, 0x694b775a,\r\n            0xb0d090e0, 0xbbdd99ee, 0xa6ca82fc, 0xadc78bf2, 0x9ce4b4d8, 0x97e9bdd6, 0x8afea6c4, 0x81f3afca, 0xe8b8d890, 0xe3b5d19e, 0xfea2ca8c, 0xf5afc382, 0xc48cfca8, 0xcf81f5a6, 0xd296eeb4, 0xd99be7ba,\r\n            0x7bbb3bdb, 0x70b632d5, 0x6da129c7, 0x66ac20c9, 0x578f1fe3, 0x5c8216ed, 0x41950dff, 0x4a9804f1, 0x23d373ab, 0x28de7aa5, 0x35c961b7, 0x3ec468b9, 0x0fe75793, 0x04ea5e9d, 0x19fd458f, 0x12f04c81,\r\n            0xcb6bab3b, 0xc066a235, 0xdd71b927, 0xd67cb029, 0xe75f8f03, 0xec52860d, 0xf1459d1f, 0xfa489411, 0x9303e34b, 0x980eea45, 0x8519f157, 0x8e14f859, 0xbf37c773, 0xb43ace7d, 0xa92dd56f, 0xa220dc61,\r\n            0xf66d76ad, 0xfd607fa3, 0xe07764b1, 0xeb7a6dbf, 0xda595295, 0xd1545b9b, 0xcc434089, 0xc74e4987, 0xae053edd, 0xa50837d3, 0xb81f2cc1, 0xb31225cf, 0x82311ae5, 0x893c13eb, 0x942b08f9, 0x9f2601f7,\r\n            0x46bde64d, 0x4db0ef43, 0x50a7f451, 0x5baafd5f, 0x6a89c275, 0x6184cb7b, 0x7c93d069, 0x779ed967, 0x1ed5ae3d, 0x15d8a733, 0x08cfbc21, 0x03c2b52f, 0x32e18a05, 0x39ec830b, 0x24fb9819, 0x2ff69117,\r\n            0x8dd64d76, 0x86db4478, 0x9bcc5f6a, 0x90c15664, 0xa1e2694e, 0xaaef6040, 0xb7f87b52, 0xbcf5725c, 0xd5be0506, 0xdeb30c08, 0xc3a4171a, 0xc8a91e14, 0xf98a213e, 0xf2872830, 0xef903322, 0xe49d3a2c,\r\n            0x3d06dd96, 0x360bd498, 0x2b1ccf8a, 0x2011c684, 0x1132f9ae, 0x1a3ff0a0, 0x0728ebb2, 0x0c25e2bc, 0x656e95e6, 0x6e639ce8, 0x737487fa, 0x78798ef4, 0x495ab1de, 0x4257b8d0, 0x5f40a3c2, 0x544daacc,\r\n            0xf7daec41, 0xfcd7e54f, 0xe1c0fe5d, 0xeacdf753, 0xdbeec879, 0xd0e3c177, 0xcdf4da65, 0xc6f9d36b, 0xafb2a431, 0xa4bfad3f, 0xb9a8b62d, 0xb2a5bf23, 0x83868009, 0x888b8907, 0x959c9215, 0x9e919b1b,\r\n            0x470a7ca1, 0x4c0775af, 0x51106ebd, 0x5a1d67b3, 0x6b3e5899, 0x60335197, 0x7d244a85, 0x7629438b, 0x1f6234d1, 0x146f3ddf, 0x097826cd, 0x02752fc3, 0x335610e9, 0x385b19e7, 0x254c02f5, 0x2e410bfb,\r\n            0x8c61d79a, 0x876cde94, 0x9a7bc586, 0x9176cc88, 0xa055f3a2, 0xab58faac, 0xb64fe1be, 0xbd42e8b0, 0xd4099fea, 0xdf0496e4, 0xc2138df6, 0xc91e84f8, 0xf83dbbd2, 0xf330b2dc, 0xee27a9ce, 0xe52aa0c0,\r\n            0x3cb1477a, 0x37bc4e74, 0x2aab5566, 0x21a65c68, 0x10856342, 0x1b886a4c, 0x069f715e, 0x0d927850, 0x64d90f0a, 0x6fd40604, 0x72c31d16, 0x79ce1418, 0x48ed2b32, 0x43e0223c, 0x5ef7392e, 0x55fa3020,\r\n            0x01b79aec, 0x0aba93e2, 0x17ad88f0, 0x1ca081fe, 0x2d83bed4, 0x268eb7da, 0x3b99acc8, 0x3094a5c6, 0x59dfd29c, 0x52d2db92, 0x4fc5c080, 0x44c8c98e, 0x75ebf6a4, 0x7ee6ffaa, 0x63f1e4b8, 0x68fcedb6,\r\n            0xb1670a0c, 0xba6a0302, 0xa77d1810, 0xac70111e, 0x9d532e34, 0x965e273a, 0x8b493c28, 0x80443526, 0xe90f427c, 0xe2024b72, 0xff155060, 0xf418596e, 0xc53b6644, 0xce366f4a, 0xd3217458, 0xd82c7d56,\r\n            0x7a0ca137, 0x7101a839, 0x6c16b32b, 0x671bba25, 0x5638850f, 0x5d358c01, 0x40229713, 0x4b2f9e1d, 0x2264e947, 0x2969e049, 0x347efb5b, 0x3f73f255, 0x0e50cd7f, 0x055dc471, 0x184adf63, 0x1347d66d,\r\n            0xcadc31d7, 0xc1d138d9, 0xdcc623cb, 0xd7cb2ac5, 0xe6e815ef, 0xede51ce1, 0xf0f207f3, 0xfbff0efd, 0x92b479a7, 0x99b970a9, 0x84ae6bbb, 0x8fa362b5, 0xbe805d9f, 0xb58d5491, 0xa89a4f83, 0xa397468d\r\n        ]);\r\n        this.U2 = new Uint32Array([\r\n            0x00000000, 0x0d090e0b, 0x1a121c16, 0x171b121d, 0x3424382c, 0x392d3627, 0x2e36243a, 0x233f2a31, 0x68487058, 0x65417e53, 0x725a6c4e, 0x7f536245, 0x5c6c4874, 0x5165467f, 0x467e5462, 0x4b775a69,\r\n            0xd090e0b0, 0xdd99eebb, 0xca82fca6, 0xc78bf2ad, 0xe4b4d89c, 0xe9bdd697, 0xfea6c48a, 0xf3afca81, 0xb8d890e8, 0xb5d19ee3, 0xa2ca8cfe, 0xafc382f5, 0x8cfca8c4, 0x81f5a6cf, 0x96eeb4d2, 0x9be7bad9,\r\n            0xbb3bdb7b, 0xb632d570, 0xa129c76d, 0xac20c966, 0x8f1fe357, 0x8216ed5c, 0x950dff41, 0x9804f14a, 0xd373ab23, 0xde7aa528, 0xc961b735, 0xc468b93e, 0xe757930f, 0xea5e9d04, 0xfd458f19, 0xf04c8112,\r\n            0x6bab3bcb, 0x66a235c0, 0x71b927dd, 0x7cb029d6, 0x5f8f03e7, 0x52860dec, 0x459d1ff1, 0x489411fa, 0x03e34b93, 0x0eea4598, 0x19f15785, 0x14f8598e, 0x37c773bf, 0x3ace7db4, 0x2dd56fa9, 0x20dc61a2,\r\n            0x6d76adf6, 0x607fa3fd, 0x7764b1e0, 0x7a6dbfeb, 0x595295da, 0x545b9bd1, 0x434089cc, 0x4e4987c7, 0x053eddae, 0x0837d3a5, 0x1f2cc1b8, 0x1225cfb3, 0x311ae582, 0x3c13eb89, 0x2b08f994, 0x2601f79f,\r\n            0xbde64d46, 0xb0ef434d, 0xa7f45150, 0xaafd5f5b, 0x89c2756a, 0x84cb7b61, 0x93d0697c, 0x9ed96777, 0xd5ae3d1e, 0xd8a73315, 0xcfbc2108, 0xc2b52f03, 0xe18a0532, 0xec830b39, 0xfb981924, 0xf691172f,\r\n            0xd64d768d, 0xdb447886, 0xcc5f6a9b, 0xc1566490, 0xe2694ea1, 0xef6040aa, 0xf87b52b7, 0xf5725cbc, 0xbe0506d5, 0xb30c08de, 0xa4171ac3, 0xa91e14c8, 0x8a213ef9, 0x872830f2, 0x903322ef, 0x9d3a2ce4,\r\n            0x06dd963d, 0x0bd49836, 0x1ccf8a2b, 0x11c68420, 0x32f9ae11, 0x3ff0a01a, 0x28ebb207, 0x25e2bc0c, 0x6e95e665, 0x639ce86e, 0x7487fa73, 0x798ef478, 0x5ab1de49, 0x57b8d042, 0x40a3c25f, 0x4daacc54,\r\n            0xdaec41f7, 0xd7e54ffc, 0xc0fe5de1, 0xcdf753ea, 0xeec879db, 0xe3c177d0, 0xf4da65cd, 0xf9d36bc6, 0xb2a431af, 0xbfad3fa4, 0xa8b62db9, 0xa5bf23b2, 0x86800983, 0x8b890788, 0x9c921595, 0x919b1b9e,\r\n            0x0a7ca147, 0x0775af4c, 0x106ebd51, 0x1d67b35a, 0x3e58996b, 0x33519760, 0x244a857d, 0x29438b76, 0x6234d11f, 0x6f3ddf14, 0x7826cd09, 0x752fc302, 0x5610e933, 0x5b19e738, 0x4c02f525, 0x410bfb2e,\r\n            0x61d79a8c, 0x6cde9487, 0x7bc5869a, 0x76cc8891, 0x55f3a2a0, 0x58faacab, 0x4fe1beb6, 0x42e8b0bd, 0x099fead4, 0x0496e4df, 0x138df6c2, 0x1e84f8c9, 0x3dbbd2f8, 0x30b2dcf3, 0x27a9ceee, 0x2aa0c0e5,\r\n            0xb1477a3c, 0xbc4e7437, 0xab55662a, 0xa65c6821, 0x85634210, 0x886a4c1b, 0x9f715e06, 0x9278500d, 0xd90f0a64, 0xd406046f, 0xc31d1672, 0xce141879, 0xed2b3248, 0xe0223c43, 0xf7392e5e, 0xfa302055,\r\n            0xb79aec01, 0xba93e20a, 0xad88f017, 0xa081fe1c, 0x83bed42d, 0x8eb7da26, 0x99acc83b, 0x94a5c630, 0xdfd29c59, 0xd2db9252, 0xc5c0804f, 0xc8c98e44, 0xebf6a475, 0xe6ffaa7e, 0xf1e4b863, 0xfcedb668,\r\n            0x670a0cb1, 0x6a0302ba, 0x7d1810a7, 0x70111eac, 0x532e349d, 0x5e273a96, 0x493c288b, 0x44352680, 0x0f427ce9, 0x024b72e2, 0x155060ff, 0x18596ef4, 0x3b6644c5, 0x366f4ace, 0x217458d3, 0x2c7d56d8,\r\n            0x0ca1377a, 0x01a83971, 0x16b32b6c, 0x1bba2567, 0x38850f56, 0x358c015d, 0x22971340, 0x2f9e1d4b, 0x64e94722, 0x69e04929, 0x7efb5b34, 0x73f2553f, 0x50cd7f0e, 0x5dc47105, 0x4adf6318, 0x47d66d13,\r\n            0xdc31d7ca, 0xd138d9c1, 0xc623cbdc, 0xcb2ac5d7, 0xe815efe6, 0xe51ce1ed, 0xf207f3f0, 0xff0efdfb, 0xb479a792, 0xb970a999, 0xae6bbb84, 0xa362b58f, 0x805d9fbe, 0x8d5491b5, 0x9a4f83a8, 0x97468da3\r\n        ]);\r\n        this.U3 = new Uint32Array([\r\n            0x00000000, 0x090e0b0d, 0x121c161a, 0x1b121d17, 0x24382c34, 0x2d362739, 0x36243a2e, 0x3f2a3123, 0x48705868, 0x417e5365, 0x5a6c4e72, 0x5362457f, 0x6c48745c, 0x65467f51, 0x7e546246, 0x775a694b,\r\n            0x90e0b0d0, 0x99eebbdd, 0x82fca6ca, 0x8bf2adc7, 0xb4d89ce4, 0xbdd697e9, 0xa6c48afe, 0xafca81f3, 0xd890e8b8, 0xd19ee3b5, 0xca8cfea2, 0xc382f5af, 0xfca8c48c, 0xf5a6cf81, 0xeeb4d296, 0xe7bad99b,\r\n            0x3bdb7bbb, 0x32d570b6, 0x29c76da1, 0x20c966ac, 0x1fe3578f, 0x16ed5c82, 0x0dff4195, 0x04f14a98, 0x73ab23d3, 0x7aa528de, 0x61b735c9, 0x68b93ec4, 0x57930fe7, 0x5e9d04ea, 0x458f19fd, 0x4c8112f0,\r\n            0xab3bcb6b, 0xa235c066, 0xb927dd71, 0xb029d67c, 0x8f03e75f, 0x860dec52, 0x9d1ff145, 0x9411fa48, 0xe34b9303, 0xea45980e, 0xf1578519, 0xf8598e14, 0xc773bf37, 0xce7db43a, 0xd56fa92d, 0xdc61a220,\r\n            0x76adf66d, 0x7fa3fd60, 0x64b1e077, 0x6dbfeb7a, 0x5295da59, 0x5b9bd154, 0x4089cc43, 0x4987c74e, 0x3eddae05, 0x37d3a508, 0x2cc1b81f, 0x25cfb312, 0x1ae58231, 0x13eb893c, 0x08f9942b, 0x01f79f26,\r\n            0xe64d46bd, 0xef434db0, 0xf45150a7, 0xfd5f5baa, 0xc2756a89, 0xcb7b6184, 0xd0697c93, 0xd967779e, 0xae3d1ed5, 0xa73315d8, 0xbc2108cf, 0xb52f03c2, 0x8a0532e1, 0x830b39ec, 0x981924fb, 0x91172ff6,\r\n            0x4d768dd6, 0x447886db, 0x5f6a9bcc, 0x566490c1, 0x694ea1e2, 0x6040aaef, 0x7b52b7f8, 0x725cbcf5, 0x0506d5be, 0x0c08deb3, 0x171ac3a4, 0x1e14c8a9, 0x213ef98a, 0x2830f287, 0x3322ef90, 0x3a2ce49d,\r\n            0xdd963d06, 0xd498360b, 0xcf8a2b1c, 0xc6842011, 0xf9ae1132, 0xf0a01a3f, 0xebb20728, 0xe2bc0c25, 0x95e6656e, 0x9ce86e63, 0x87fa7374, 0x8ef47879, 0xb1de495a, 0xb8d04257, 0xa3c25f40, 0xaacc544d,\r\n            0xec41f7da, 0xe54ffcd7, 0xfe5de1c0, 0xf753eacd, 0xc879dbee, 0xc177d0e3, 0xda65cdf4, 0xd36bc6f9, 0xa431afb2, 0xad3fa4bf, 0xb62db9a8, 0xbf23b2a5, 0x80098386, 0x8907888b, 0x9215959c, 0x9b1b9e91,\r\n            0x7ca1470a, 0x75af4c07, 0x6ebd5110, 0x67b35a1d, 0x58996b3e, 0x51976033, 0x4a857d24, 0x438b7629, 0x34d11f62, 0x3ddf146f, 0x26cd0978, 0x2fc30275, 0x10e93356, 0x19e7385b, 0x02f5254c, 0x0bfb2e41,\r\n            0xd79a8c61, 0xde94876c, 0xc5869a7b, 0xcc889176, 0xf3a2a055, 0xfaacab58, 0xe1beb64f, 0xe8b0bd42, 0x9fead409, 0x96e4df04, 0x8df6c213, 0x84f8c91e, 0xbbd2f83d, 0xb2dcf330, 0xa9ceee27, 0xa0c0e52a,\r\n            0x477a3cb1, 0x4e7437bc, 0x55662aab, 0x5c6821a6, 0x63421085, 0x6a4c1b88, 0x715e069f, 0x78500d92, 0x0f0a64d9, 0x06046fd4, 0x1d1672c3, 0x141879ce, 0x2b3248ed, 0x223c43e0, 0x392e5ef7, 0x302055fa,\r\n            0x9aec01b7, 0x93e20aba, 0x88f017ad, 0x81fe1ca0, 0xbed42d83, 0xb7da268e, 0xacc83b99, 0xa5c63094, 0xd29c59df, 0xdb9252d2, 0xc0804fc5, 0xc98e44c8, 0xf6a475eb, 0xffaa7ee6, 0xe4b863f1, 0xedb668fc,\r\n            0x0a0cb167, 0x0302ba6a, 0x1810a77d, 0x111eac70, 0x2e349d53, 0x273a965e, 0x3c288b49, 0x35268044, 0x427ce90f, 0x4b72e202, 0x5060ff15, 0x596ef418, 0x6644c53b, 0x6f4ace36, 0x7458d321, 0x7d56d82c,\r\n            0xa1377a0c, 0xa8397101, 0xb32b6c16, 0xba25671b, 0x850f5638, 0x8c015d35, 0x97134022, 0x9e1d4b2f, 0xe9472264, 0xe0492969, 0xfb5b347e, 0xf2553f73, 0xcd7f0e50, 0xc471055d, 0xdf63184a, 0xd66d1347,\r\n            0x31d7cadc, 0x38d9c1d1, 0x23cbdcc6, 0x2ac5d7cb, 0x15efe6e8, 0x1ce1ede5, 0x07f3f0f2, 0x0efdfbff, 0x79a792b4, 0x70a999b9, 0x6bbb84ae, 0x62b58fa3, 0x5d9fbe80, 0x5491b58d, 0x4f83a89a, 0x468da397\r\n        ]);\r\n        this.U4 = new Uint32Array([\r\n            0x00000000, 0x0e0b0d09, 0x1c161a12, 0x121d171b, 0x382c3424, 0x3627392d, 0x243a2e36, 0x2a31233f, 0x70586848, 0x7e536541, 0x6c4e725a, 0x62457f53, 0x48745c6c, 0x467f5165, 0x5462467e, 0x5a694b77,\r\n            0xe0b0d090, 0xeebbdd99, 0xfca6ca82, 0xf2adc78b, 0xd89ce4b4, 0xd697e9bd, 0xc48afea6, 0xca81f3af, 0x90e8b8d8, 0x9ee3b5d1, 0x8cfea2ca, 0x82f5afc3, 0xa8c48cfc, 0xa6cf81f5, 0xb4d296ee, 0xbad99be7,\r\n            0xdb7bbb3b, 0xd570b632, 0xc76da129, 0xc966ac20, 0xe3578f1f, 0xed5c8216, 0xff41950d, 0xf14a9804, 0xab23d373, 0xa528de7a, 0xb735c961, 0xb93ec468, 0x930fe757, 0x9d04ea5e, 0x8f19fd45, 0x8112f04c,\r\n            0x3bcb6bab, 0x35c066a2, 0x27dd71b9, 0x29d67cb0, 0x03e75f8f, 0x0dec5286, 0x1ff1459d, 0x11fa4894, 0x4b9303e3, 0x45980eea, 0x578519f1, 0x598e14f8, 0x73bf37c7, 0x7db43ace, 0x6fa92dd5, 0x61a220dc,\r\n            0xadf66d76, 0xa3fd607f, 0xb1e07764, 0xbfeb7a6d, 0x95da5952, 0x9bd1545b, 0x89cc4340, 0x87c74e49, 0xddae053e, 0xd3a50837, 0xc1b81f2c, 0xcfb31225, 0xe582311a, 0xeb893c13, 0xf9942b08, 0xf79f2601,\r\n            0x4d46bde6, 0x434db0ef, 0x5150a7f4, 0x5f5baafd, 0x756a89c2, 0x7b6184cb, 0x697c93d0, 0x67779ed9, 0x3d1ed5ae, 0x3315d8a7, 0x2108cfbc, 0x2f03c2b5, 0x0532e18a, 0x0b39ec83, 0x1924fb98, 0x172ff691,\r\n            0x768dd64d, 0x7886db44, 0x6a9bcc5f, 0x6490c156, 0x4ea1e269, 0x40aaef60, 0x52b7f87b, 0x5cbcf572, 0x06d5be05, 0x08deb30c, 0x1ac3a417, 0x14c8a91e, 0x3ef98a21, 0x30f28728, 0x22ef9033, 0x2ce49d3a,\r\n            0x963d06dd, 0x98360bd4, 0x8a2b1ccf, 0x842011c6, 0xae1132f9, 0xa01a3ff0, 0xb20728eb, 0xbc0c25e2, 0xe6656e95, 0xe86e639c, 0xfa737487, 0xf478798e, 0xde495ab1, 0xd04257b8, 0xc25f40a3, 0xcc544daa,\r\n            0x41f7daec, 0x4ffcd7e5, 0x5de1c0fe, 0x53eacdf7, 0x79dbeec8, 0x77d0e3c1, 0x65cdf4da, 0x6bc6f9d3, 0x31afb2a4, 0x3fa4bfad, 0x2db9a8b6, 0x23b2a5bf, 0x09838680, 0x07888b89, 0x15959c92, 0x1b9e919b,\r\n            0xa1470a7c, 0xaf4c0775, 0xbd51106e, 0xb35a1d67, 0x996b3e58, 0x97603351, 0x857d244a, 0x8b762943, 0xd11f6234, 0xdf146f3d, 0xcd097826, 0xc302752f, 0xe9335610, 0xe7385b19, 0xf5254c02, 0xfb2e410b,\r\n            0x9a8c61d7, 0x94876cde, 0x869a7bc5, 0x889176cc, 0xa2a055f3, 0xacab58fa, 0xbeb64fe1, 0xb0bd42e8, 0xead4099f, 0xe4df0496, 0xf6c2138d, 0xf8c91e84, 0xd2f83dbb, 0xdcf330b2, 0xceee27a9, 0xc0e52aa0,\r\n            0x7a3cb147, 0x7437bc4e, 0x662aab55, 0x6821a65c, 0x42108563, 0x4c1b886a, 0x5e069f71, 0x500d9278, 0x0a64d90f, 0x046fd406, 0x1672c31d, 0x1879ce14, 0x3248ed2b, 0x3c43e022, 0x2e5ef739, 0x2055fa30,\r\n            0xec01b79a, 0xe20aba93, 0xf017ad88, 0xfe1ca081, 0xd42d83be, 0xda268eb7, 0xc83b99ac, 0xc63094a5, 0x9c59dfd2, 0x9252d2db, 0x804fc5c0, 0x8e44c8c9, 0xa475ebf6, 0xaa7ee6ff, 0xb863f1e4, 0xb668fced,\r\n            0x0cb1670a, 0x02ba6a03, 0x10a77d18, 0x1eac7011, 0x349d532e, 0x3a965e27, 0x288b493c, 0x26804435, 0x7ce90f42, 0x72e2024b, 0x60ff1550, 0x6ef41859, 0x44c53b66, 0x4ace366f, 0x58d32174, 0x56d82c7d,\r\n            0x377a0ca1, 0x397101a8, 0x2b6c16b3, 0x25671bba, 0x0f563885, 0x015d358c, 0x13402297, 0x1d4b2f9e, 0x472264e9, 0x492969e0, 0x5b347efb, 0x553f73f2, 0x7f0e50cd, 0x71055dc4, 0x63184adf, 0x6d1347d6,\r\n            0xd7cadc31, 0xd9c1d138, 0xcbdcc623, 0xc5d7cb2a, 0xefe6e815, 0xe1ede51c, 0xf3f0f207, 0xfdfbff0e, 0xa792b479, 0xa999b970, 0xbb84ae6b, 0xb58fa362, 0x9fbe805d, 0x91b58d54, 0x83a89a4f, 0x8da39746\r\n        ]);\r\n    }\r\n    AES.prototype.B0 = function (x) {\r\n        return x & 0xff;\r\n    };\r\n    AES.prototype.B1 = function (x) {\r\n        return (x >>> 8) & 0xff;\r\n    };\r\n    AES.prototype.B2 = function (x) {\r\n        return (x >>> 16) & 0xff;\r\n    };\r\n    AES.prototype.B3 = function (x) {\r\n        return (x >>> 24) & 0xff;\r\n    };\r\n    AES.prototype.F1 = function (x0, x1, x2, x3) {\r\n        return (this.B1(this.T1[(x0) & 0xff])) |\r\n            (this.B1(this.T1[(x1 >>> 8) & 0xff]) << 8) |\r\n            (this.B1(this.T1[(x2 >>> 16) & 0xff]) << 16) |\r\n            (this.B1(this.T1[(x3 >>> 24) & 0xff]) << 24);\r\n    };\r\n    AES.prototype.packBytes = function (octets) {\r\n        var b = new Uint32Array(octets.length / 4);\r\n        for (var i = 0, j = 0, len = octets.length; j < len; j += 4) {\r\n            b[i++] = octets[j] | (octets[j + 1] << 8) | (octets[j + 2] << 16) | (octets[j + 3] << 24);\r\n        }\r\n        return b;\r\n    };\r\n    AES.prototype.unpackBytes = function (packed) {\r\n        var r = new Uint8Array(packed.length * 4);\r\n        for (var i = 0, j = 0, len = packed.length; j < len; j++) {\r\n            r[i++] = this.B0(packed[j]);\r\n            r[i++] = this.B1(packed[j]);\r\n            r[i++] = this.B2(packed[j]);\r\n            r[i++] = this.B3(packed[j]);\r\n        }\r\n        return r;\r\n    };\r\n    /**\r\n     * \\param {String} key given as array of bytes\r\n     * \\return {Object} .rounds and .keySched\r\n     */\r\n    AES.prototype.keyExpansion = function (key) {\r\n        var rounds = this.keylen[key.length].rounds;\r\n        var kc = this.keylen[key.length].kc;\r\n        var maxkc = 8;\r\n        var maxrk = 14;\r\n        var keySched = [];\r\n        var k = new Uint32Array(key.length);\r\n        var tk = new Uint32Array(kc);\r\n        var rconpointer = 0;\r\n        var i, j, r, t;\r\n        for (i = 0; i < maxrk + 1; i++) {\r\n            keySched[i] = new Uint32Array(4);\r\n        }\r\n        for (i = 0, j = 0; j < key.length; j++, i += 4) {\r\n            k[j] = key[i] | (key[i + 1] << 8) | (key[i + 2] << 16) | (key[i + 3] << 24);\r\n        }\r\n        for (j = kc - 1; j >= 0; j--) {\r\n            tk[j] = k[j];\r\n        }\r\n        r = t = 0;\r\n        for (j = 0; (j < kc) && (r < rounds + 1);) {\r\n            for (; (j < kc) && (t < 4); j++, t++) {\r\n                keySched[r][t] = tk[j];\r\n            }\r\n            if (t === 4) {\r\n                r++;\r\n                t = 0;\r\n            }\r\n        }\r\n        while (r < rounds + 1) {\r\n            var temp = tk[kc - 1];\r\n            tk[0] ^= this.S[this.B1(temp)] | (this.S[this.B2(temp)] << 8) | (this.S[this.B3(temp)] << 16) | (this.S[this.B0(temp)] << 24);\r\n            tk[0] ^= this.Rcon[rconpointer++];\r\n            if (kc !== maxkc) {\r\n                for (j = 1; j < kc; j++) {\r\n                    tk[j] ^= tk[j - 1];\r\n                }\r\n            }\r\n            else {\r\n                for (j = 1; j < kc / 2; j++) {\r\n                    tk[j] ^= tk[j - 1];\r\n                }\r\n                temp = tk[kc / 2 - 1];\r\n                tk[kc / 2] ^= this.S[this.B0(temp)] | (this.S[this.B1(temp)] << 8) | (this.S[this.B2(temp)] << 16) | (this.S[this.B3(temp)] << 24);\r\n                for (j = kc / 2 + 1; j < kc; j++) {\r\n                    tk[j] ^= tk[j - 1];\r\n                }\r\n            }\r\n            for (j = 0; (j < kc) && (r < rounds + 1);) {\r\n                for (; (j < kc) && (t < 4); j++, t++) {\r\n                    keySched[r][t] = tk[j];\r\n                }\r\n                if (t === 4) {\r\n                    r++;\r\n                    t = 0;\r\n                }\r\n            }\r\n        }\r\n        return { rk: keySched, rounds: rounds };\r\n    };\r\n    /**\r\n     * @param {Array} key\r\n     * @return {Object} rk and rounds\r\n     */\r\n    AES.prototype.prepare_decryption = function (key) {\r\n        var r, w = 0;\r\n        var maxrk = 14;\r\n        var rk2 = [];\r\n        var ctx = this.keyExpansion(key);\r\n        var rounds = ctx.rounds;\r\n        for (r = 0; r < maxrk + 1; r++) {\r\n            rk2[r] = new Uint32Array(4);\r\n            rk2[r][0] = ctx.rk[r][0];\r\n            rk2[r][1] = ctx.rk[r][1];\r\n            rk2[r][2] = ctx.rk[r][2];\r\n            rk2[r][3] = ctx.rk[r][3];\r\n        }\r\n        for (r = 1; r < rounds; r++) {\r\n            w = rk2[r][0];\r\n            rk2[r][0] = this.U1[this.B0(w)] ^ this.U2[this.B1(w)] ^ this.U3[this.B2(w)] ^ this.U4[this.B3(w)];\r\n            w = rk2[r][1];\r\n            rk2[r][1] = this.U1[this.B0(w)] ^ this.U2[this.B1(w)] ^ this.U3[this.B2(w)] ^ this.U4[this.B3(w)];\r\n            w = rk2[r][2];\r\n            rk2[r][2] = this.U1[this.B0(w)] ^ this.U2[this.B1(w)] ^ this.U3[this.B2(w)] ^ this.U4[this.B3(w)];\r\n            w = rk2[r][3];\r\n            rk2[r][3] = this.U1[this.B0(w)] ^ this.U2[this.B1(w)] ^ this.U3[this.B2(w)] ^ this.U4[this.B3(w)];\r\n        }\r\n        return { rk: rk2, rounds: rounds };\r\n    };\r\n    /**\r\n     * AES block encryption\r\n     * @param {Uint8Array} key Key\r\n     * @param {Uint8Array} pt The plaintext\r\n     * @return {Uint8Array} Ciphertext\r\n     */\r\n    AES.prototype.encrypt = function (key, pt) {\r\n        var r, t0, t1, t2, t3;\r\n        var ctx = this.keyExpansion(key);\r\n        var b = this.packBytes(pt);\r\n        var rounds = ctx.rounds;\r\n        var b0 = b[0];\r\n        var b1 = b[1];\r\n        var b2 = b[2];\r\n        var b3 = b[3];\r\n        for (r = 0; r < rounds - 1; r++) {\r\n            t0 = b0 ^ ctx.rk[r][0];\r\n            t1 = b1 ^ ctx.rk[r][1];\r\n            t2 = b2 ^ ctx.rk[r][2];\r\n            t3 = b3 ^ ctx.rk[r][3];\r\n            b0 = this.T1[t0 & 0xFF] ^ this.T2[(t1 >>> 8) & 0xFF] ^ this.T3[(t2 >>> 16) & 0xFF] ^ this.T4[t3 >>> 24];\r\n            b1 = this.T1[t1 & 0xFF] ^ this.T2[(t2 >>> 8) & 0xFF] ^ this.T3[(t3 >>> 16) & 0xFF] ^ this.T4[t0 >>> 24];\r\n            b2 = this.T1[t2 & 0xFF] ^ this.T2[(t3 >>> 8) & 0xFF] ^ this.T3[(t0 >>> 16) & 0xFF] ^ this.T4[t1 >>> 24];\r\n            b3 = this.T1[t3 & 0xFF] ^ this.T2[(t0 >>> 8) & 0xFF] ^ this.T3[(t1 >>> 16) & 0xFF] ^ this.T4[t2 >>> 24];\r\n        }\r\n        // last round is special\r\n        r = rounds - 1;\r\n        t0 = b0 ^ ctx.rk[r][0];\r\n        t1 = b1 ^ ctx.rk[r][1];\r\n        t2 = b2 ^ ctx.rk[r][2];\r\n        t3 = b3 ^ ctx.rk[r][3];\r\n        b[0] = this.F1(t0, t1, t2, t3) ^ ctx.rk[rounds][0];\r\n        b[1] = this.F1(t1, t2, t3, t0) ^ ctx.rk[rounds][1];\r\n        b[2] = this.F1(t2, t3, t0, t1) ^ ctx.rk[rounds][2];\r\n        b[3] = this.F1(t3, t0, t1, t2) ^ ctx.rk[rounds][3];\r\n        // security clear\r\n        t0 = t1 = t2 = t3 = 0;\r\n        for (var r_1 = 0; r_1 < ctx.rk.length; r_1++) {\r\n            base_1.Util.clear(ctx.rk[r_1]);\r\n        }\r\n        return this.unpackBytes(b);\r\n    };\r\n    /**\r\n     * AES block decryption\r\n     * @param {Uint8Array} key Key\r\n     * @param {Uint8Array} ct The ciphertext\r\n     * @return {Uint8Array} Plaintext\r\n     */\r\n    AES.prototype.decrypt = function (key, ct) {\r\n        var t0, t1, t2, t3;\r\n        var ctx = this.prepare_decryption(key);\r\n        var b = this.packBytes(ct);\r\n        for (var r = ctx.rounds; r > 1; r--) {\r\n            t0 = b[0] ^ ctx.rk[r][0];\r\n            t1 = b[1] ^ ctx.rk[r][1];\r\n            t2 = b[2] ^ ctx.rk[r][2];\r\n            t3 = b[3] ^ ctx.rk[r][3];\r\n            b[0] = this.T5[this.B0(t0)] ^ this.T6[this.B1(t3)] ^ this.T7[this.B2(t2)] ^ this.T8[this.B3(t1)];\r\n            b[1] = this.T5[this.B0(t1)] ^ this.T6[this.B1(t0)] ^ this.T7[this.B2(t3)] ^ this.T8[this.B3(t2)];\r\n            b[2] = this.T5[this.B0(t2)] ^ this.T6[this.B1(t1)] ^ this.T7[this.B2(t0)] ^ this.T8[this.B3(t3)];\r\n            b[3] = this.T5[this.B0(t3)] ^ this.T6[this.B1(t2)] ^ this.T7[this.B2(t1)] ^ this.T8[this.B3(t0)];\r\n        }\r\n        // last round is special\r\n        t0 = b[0] ^ ctx.rk[1][0];\r\n        t1 = b[1] ^ ctx.rk[1][1];\r\n        t2 = b[2] ^ ctx.rk[1][2];\r\n        t3 = b[3] ^ ctx.rk[1][3];\r\n        b[0] = this.S5[this.B0(t0)] | (this.S5[this.B1(t3)] << 8) | (this.S5[this.B2(t2)] << 16) | (this.S5[this.B3(t1)] << 24);\r\n        b[1] = this.S5[this.B0(t1)] | (this.S5[this.B1(t0)] << 8) | (this.S5[this.B2(t3)] << 16) | (this.S5[this.B3(t2)] << 24);\r\n        b[2] = this.S5[this.B0(t2)] | (this.S5[this.B1(t1)] << 8) | (this.S5[this.B2(t0)] << 16) | (this.S5[this.B3(t3)] << 24);\r\n        b[3] = this.S5[this.B0(t3)] | (this.S5[this.B1(t2)] << 8) | (this.S5[this.B2(t1)] << 16) | (this.S5[this.B3(t0)] << 24);\r\n        b[0] ^= ctx.rk[0][0];\r\n        b[1] ^= ctx.rk[0][1];\r\n        b[2] ^= ctx.rk[0][2];\r\n        b[3] ^= ctx.rk[0][3];\r\n        // security clear\r\n        t0 = t1 = t2 = t3 = 0;\r\n        for (var r = 0; r < ctx.rk.length; r++) {\r\n            base_1.Util.clear(ctx.rk[r]);\r\n        }\r\n        return this.unpackBytes(b);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    AES.prototype.selftest = function () {\r\n        var tv_CBC_PKCS7 = [\r\n            {\r\n                key: '06a9214036b8a15b512e03d534120006',\r\n                iv: '3dafba429d9eb430b422da802c9fac41',\r\n                pt: '000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f',\r\n                ct: '714373e9991e8a58f79efa62b46f7652fbfa5de596b93acaafbdb2412311ac13e365c4170a4166dd1b95cfde3a21f6b2'\r\n            },\r\n            {\r\n                key: '0x6c3ea0477630ce21a2ce334aa746c2cd',\r\n                iv: '0xc782dc4c098c66cbd9cd27d825682c81',\r\n                pt: 'a0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedf',\r\n                ct: '90d0d1d8340ef5e8b9922f3c173ea1066632c5fec470be3935b5bfaeef033a0dd50a459d5c70fc8417540ae43cc507339b0085a268528f2d1de93cf65e96037685ebf5a6bcc81b70f132aba9b782ea99'\r\n            }\r\n        ];\r\n        var aes = new AES_CBC_PKCS7();\r\n        var res = true;\r\n        for (var i = 0; i < tv_CBC_PKCS7.length; i++) {\r\n            var key = base_1.Convert.hex2bin(tv_CBC_PKCS7[i].key);\r\n            var pt = base_1.Convert.hex2bin(tv_CBC_PKCS7[i].pt);\r\n            var ct = base_1.Convert.hex2bin(tv_CBC_PKCS7[i].ct);\r\n            var iv = base_1.Convert.hex2bin(tv_CBC_PKCS7[i].iv);\r\n            var ct2 = aes.encrypt(key, pt, iv);\r\n            res = res && base_1.Util.compare(ct2, ct);\r\n            var pt2 = aes.decrypt(key, ct, iv);\r\n            res = res && base_1.Util.compare(pt2, pt);\r\n        }\r\n        return res;\r\n    };\r\n    return AES;\r\n}());\r\nexports.AES = AES;\r\n///////////////////////////////////////////////////////////////////////////////\r\nvar AES_CBC = /** @class */ (function () {\r\n    function AES_CBC() {\r\n        this.cipher = new AES();\r\n        this.blockmode = new blockmode_1.CBC(this.cipher);\r\n    }\r\n    AES_CBC.prototype.encrypt = function (key, pt, iv) {\r\n        return this.blockmode.encrypt(key, pt, iv);\r\n    };\r\n    AES_CBC.prototype.decrypt = function (key, ct, iv) {\r\n        return this.blockmode.decrypt(key, ct, iv);\r\n    };\r\n    return AES_CBC;\r\n}());\r\nexports.AES_CBC = AES_CBC;\r\nvar AES_CTR = /** @class */ (function () {\r\n    function AES_CTR() {\r\n        this.cipher = new AES();\r\n        this.blockmode = new blockmode_1.CTR(this.cipher);\r\n    }\r\n    AES_CTR.prototype.encrypt = function (key, pt, iv) {\r\n        return this.blockmode.encrypt(key, pt, iv);\r\n    };\r\n    AES_CTR.prototype.decrypt = function (key, ct, iv) {\r\n        return this.blockmode.decrypt(key, ct, iv);\r\n    };\r\n    return AES_CTR;\r\n}());\r\nexports.AES_CTR = AES_CTR;\r\nvar AES_CBC_PKCS7 = /** @class */ (function () {\r\n    function AES_CBC_PKCS7() {\r\n        this.cipher = new AES_CBC();\r\n        this.padding = new padding_1.PKCS7();\r\n    }\r\n    AES_CBC_PKCS7.prototype.encrypt = function (key, pt, iv) {\r\n        return this.cipher.encrypt(key, this.padding.pad(pt, this.cipher.cipher.blockSize), iv);\r\n    };\r\n    AES_CBC_PKCS7.prototype.decrypt = function (key, ct, iv) {\r\n        return this.padding.strip(this.cipher.decrypt(key, ct, iv));\r\n    };\r\n    return AES_CBC_PKCS7;\r\n}());\r\nexports.AES_CBC_PKCS7 = AES_CBC_PKCS7;\r\nvar AES_CTR_PKCS7 = /** @class */ (function () {\r\n    function AES_CTR_PKCS7() {\r\n        this.cipher = new AES_CTR();\r\n        this.padding = new padding_1.PKCS7();\r\n    }\r\n    AES_CTR_PKCS7.prototype.encrypt = function (key, pt, iv) {\r\n        return this.cipher.encrypt(key, this.padding.pad(pt, this.cipher.cipher.blockSize), iv);\r\n    };\r\n    AES_CTR_PKCS7.prototype.decrypt = function (key, ct, iv) {\r\n        return this.padding.strip(this.cipher.decrypt(key, ct, iv));\r\n    };\r\n    return AES_CTR_PKCS7;\r\n}());\r\nexports.AES_CTR_PKCS7 = AES_CTR_PKCS7;\r\n","try {\n  var util = require('util');\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  module.exports = require('./inherits_browser.js');\n}\n","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\t    /*\n\t     * Local polyfil of Object.create\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {};\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }())\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var i = 0; i < thatSigBytes; i += 4) {\n\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            var r = (function (m_w) {\n\t                var m_w = m_w;\n\t                var m_z = 0x3ade68b1;\n\t                var mask = 0xffffffff;\n\n\t                return function () {\n\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;\n\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;\n\t                    var result = ((m_z << 0x10) + m_w) & mask;\n\t                    result /= 0x100000000;\n\t                    result += 0.5;\n\t                    return result * (Math.random() > .5 ? 1 : -1);\n\t                }\n\t            });\n\n\t            for (var i = 0, rcache; i < nBytes; i += 4) {\n\t                var _r = r((rcache || Math.random()) * 0x100000000);\n\n\t                rcache = _r() * 0x3ade67b7;\n\t                words.push((_r() * 0x100000000) | 0);\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                var processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PublicKey;\nconst BytesWithLength = require('@pascalcoin-sbx/common').Coding.Core.BytesWithLength;\nconst PascalPublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst publicKeyCoding = new PublicKey();\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKeyWithLength extends BytesWithLength {\n\n  constructor(id = null) {\n    super(id || 'pubkey', 2);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const pubKey = super.decodeFromBytes(bc);\n    const parsed = publicKeyCoding.decodeFromBytes(pubKey);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {*} value\n   * @returns {PascalPublicKey}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(publicKeyCoding.encodeToBytes(value));\n  }\n}\n\nmodule.exports = PublicKeyWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a Sender in a MultiOperation.\n */\nclass Sender extends Abstract {\n\n  /**\n   * Constructor.\n   *\n   * @param {AccountNumber|Number} account\n   * @param {Number|Currency} amount\n   */\n  constructor(account, amount) {\n    super();\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  /**\n   * Overwrites the min fee setter. MultiOperations dont have a fee field, the fee is\n   * added to the full amount.\n   *\n   * @param {Number|null} lastKnownBlock\n   * @return {Sender}\n   */\n  withMinFee(lastKnownBlock = null) {\n    super.withMinFee(lastKnownBlock);\n    this[P_AMOUNT] = this[P_AMOUNT].add(this.fee);\n    return this;\n  }\n\n  /**\n   * Overwrites the fee setter. MultiOperations dont have a fee field, the fee is\n   * added to the full amount.\n   *\n   * @return {Sender}\n   */\n  withFee(fee) {\n    super.withFee(fee);\n    this[P_AMOUNT] = this[P_AMOUNT].add(this.fee);\n    return this;\n  }\n\n  /**\n   * Gets the sending account.\n   *\n   * @return {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @return {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Sender;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\nconst BytesWithoutLength = require('./BytesWithoutLength');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic content in form of bytes (prepends the length).\n */\nclass BytesWithLength extends AbstractType {\n  /**\n   * Constructor\n   *\n   * @param {string} id\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize = 1, lengthId = 'length', lengthDesc = null) {\n    super(id || `bytes_with_length_${byteSize * 8}`);\n    this.description('Bytes with variable size prepended');\n    this[P_BYTES_FIELD] = new BytesWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8(lengthId, true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16(lengthId, true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32(lengthId, true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n\n    if (lengthDesc !== null) {\n      this[P_LENGTH_FIELD].description(lengthDesc);\n    }\n\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].decodeFromBytes(bc) + this[P_LENGTH_FIELD].encodedSize;\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    this[P_SIZE_ENCODED] = value.length + this[P_LENGTH_FIELD].encodedSize;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(\n      this[P_SIZE_ENCODED] - this[P_LENGTH_FIELD].encodedSize\n    );\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  get lengthField() {\n    return this[P_LENGTH_FIELD];\n  }\n}\n\nmodule.exports = BytesWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CurveType = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special pascal type that can en/decode a curve id.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', true, Endian.LITTLE_ENDIAN);\n    this.description('Key curve id');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurveType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new CurveType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurveType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","'use strict';\n\nvar BN = require('bn.js');\nvar HmacDRBG = require('hmac-drbg');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);\n\n    options = elliptic.curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof elliptic.curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray()\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  do {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  } while (true);\n};\n\nEC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8'\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; true; iter++) {\n    var k = options.k ?\n        options.k(iter) :\n        new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n\n  if (!this.curve._maxwellTrick) {\n    var p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  var p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst BC = require('@pascalcoin-sbx/common').BC;\n\n/**\n * Key derivation function(s).\n */\nclass KDF {\n\n  /**\n   * Gets the key and iv for pascalcoin.\n   *\n   * @param {BC|Buffer|Uint8Array|String} password\n   * @param {Buffer|Uint8Array|BC|String} salt\n   * @returns {{iv: BC, key: BC}}\n   * @constructor\n   */\n  static PascalCoin(password, salt = null) {\n    password = BC.from(password, 'string');\n    if (salt === null) {\n      salt = new BC([]);\n    } else {\n      salt = BC.from(salt);\n    }\n\n    // Key = sha256 (password + salt);\n    let key = Sha.sha256(password, salt);\n    // iv = sha256 (KEY + password + salt);\n    let iv = Sha.sha256(key, password, salt);\n\n    return { key, iv };\n  }\n}\n\nmodule.exports = KDF;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\n\nconst P_CHANGERS = Symbol('changers');\nconst P_SENDERS = Symbol('senders');\nconst P_RECEIVERS = Symbol('receivers');\n\n/**\n * Representation of a signable MultiOperation.\n */\nclass MultiOperation extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 9;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super();\n    this[P_SENDERS] = [];\n    this[P_RECEIVERS] = [];\n    this[P_CHANGERS] = [];\n  }\n\n  /**\n   * Adds a single sender.\n   *\n   * @param {Sender} sender\n   */\n  addSender(sender) {\n    this[P_SENDERS].push(sender);\n  }\n\n  /**\n   * Adds a receiver.\n   *\n   * @param {Receiver} receiver\n   */\n  addReceiver(receiver) {\n    this[P_RECEIVERS].push(receiver);\n  }\n\n  /**\n   * Adds a Changer.\n   *\n   * @param {Changer} changer\n   */\n  addChanger(changer) {\n    this[P_CHANGERS].push(changer);\n  }\n\n  /**\n   * Gets the list of all senders.\n   *\n   * @return {Sender[]}\n   */\n  get senders() {\n    return Object.values(this[P_SENDERS]);\n  }\n\n  /**\n   * Gets the number of all senders.\n   *\n   * @return {number}\n   */\n  get sendersCount() {\n    return this.senders.length;\n  }\n\n  /**\n   * Gets the list of all receivers.\n   *\n   * @return {Receiver[]}\n   */\n  get receivers() {\n    return this[P_RECEIVERS];\n  }\n\n  /**\n   * Gets the number of receivers.\n   *\n   * @return {Number}\n   */\n  get receiversCount() {\n    return this[P_RECEIVERS].length;\n  }\n\n  /**\n   * Gets the list of changers.\n   *\n   * @return {Changer[]}\n   */\n  get changers() {\n    return this[P_CHANGERS];\n  }\n\n  /**\n   * Gets the number of changers.\n   *\n   * @return {number}\n   */\n  get changersCount() {\n    return this.changers.length;\n  }\n}\n\nmodule.exports = MultiOperation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\nconst P_PAYLOAD = Symbol('payload');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass Receiver {\n\n  /**\n   * Constructor.\n   *\n   * @param {AccountNumber|Number} account\n   * @param {Number|Currency} amount\n   */\n  constructor(account, amount) {\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  /**\n   * Sets the payload of the receiver.\n   *\n   * @param {BC|String} payload\n   * @return {Receiver}\n   */\n  withPayload(payload) {\n    this[P_PAYLOAD] = BC.from(payload);\n    return this;\n  }\n\n  /**\n   * Gets the receiving account.\n   *\n   * @return {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the amount received.\n   *\n   * @return {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the payload of the receiver.\n   *\n   * @return {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n}\n\nmodule.exports = Receiver;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * Representation of a signable MultiOperation.Changer operation.\n */\nclass Changer extends Abstract {\n\n  /**\n   * Constructor.\n   *\n   * @param {AccountNumber|Number} account\n   */\n  constructor(account) {\n    super();\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = new AccountName('');\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  /**\n   * Gets the account of the changer.\n   *\n   * @return {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the new public key of the changer.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the new name of the changer.\n   *\n   * @return {AccountName}\n   */\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  /**\n   * Gets the new type of the changer account.\n   *\n   * @return {Number}\n   */\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the change type of the op.\n   *\n   * @returns {number}\n   */\n  get changeType() {\n    let changeType = 0;\n\n    if (this[P_WITH_NEW_PUBKEY] === true) {\n      changeType |= 1;\n    }\n    if (this[P_WITH_NEW_NAME] === true) {\n      changeType |= 2;\n    }\n    if (this[P_WITH_NEW_TYPE] === true) {\n      changeType |= 4;\n    }\n\n    return changeType;\n  }\n\n  /**\n   * Will set the new public key.\n   *\n   * @param {PublicKey} publicKey\n   * @returns {Changer}\n   */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n   * Will set the new name of the account.\n   *\n   * @param {String|AccountName} newName\n   * @returns {Changer}\n   */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n   * Will set the new type of the account.\n   *\n   * @param {Number} newType\n   * @returns {Changer}\n   */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n}\n\nmodule.exports = Changer;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\nconst Operations = require('./Operations');\n\n/**\n * Signs the given digest with the given keypair and returns the r and s\n * values (because thats all that is needed).\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n */\nfunction signWithHash(keyPair, digest) {\n  const hash = Sha.sha256(digest);\n\n  return Keys.sign(keyPair, hash);\n}\n\n/**\n * Signs the digest.\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n * @return {{r: BC, s: BC}}\n */\nfunction signWithDigest(keyPair, digest) {\n  return Keys.sign(keyPair, digest);\n}\n\nclass Signer {\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, operation) {\n    const DigestCoder = Operations.digestCoderFor(operation);\n    const digest = new DigestCoder(operation.opType).encodeToBytes(operation);\n    let signResult;\n\n    if (operation.usesDigestToSign() === true) {\n      signResult = signWithDigest(keyPair, digest);\n    } else {\n      signResult = signWithHash(keyPair, digest);\n    }\n\n    // save results\n    return signResult;\n  }\n\n  /**\n   * TODO\n   * @param operation\n   */\n  signMultiOperation(operation, keyPairs) {\n    const DigestCoder = Operations.digestCoderFor(operation);\n    const coder = new DigestCoder(operation.opType);\n    let digest = coder.encodeToBytes(operation);\n\n    console.log(digest.toHex());\n    let signatures = {};\n\n    operation.senders.forEach(sender => {\n      if (signatures[sender.account.account] === undefined) {\n        signatures[sender.account.account] = signWithHash(\n          keyPairs[sender.account.account], digest\n        );\n      }\n      sender.withSign(\n        signatures[sender.account.account].r,\n        signatures[sender.account.account].s\n      );\n    });\n    operation.changers.forEach(changer => {\n      if (signatures[changer.account.account] === undefined) {\n        signatures[changer.account.account] = signWithHash(\n          keyPairs[changer.account.account], digest\n        );\n      }\n      changer.withSign(\n        signatures[changer.account.account].r,\n        signatures[changer.account.account].s\n      );\n    });\n\n    return operation;\n  }\n}\n\nmodule.exports = Signer;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","module.exports = require(\"buffer\");","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   * Tests are not performed.\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  /* istanbul ignore next */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (this[P_MD160].length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_KEY].length > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_KEY].length}`\n      );\n    }\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\nconst BN = require('bn.js');\n\nfunction validate64Bit(isUnsigned, value) {\n  if (isUnsigned) {\n    if (value.isNeg()) {\n      throw new Error('64bit value is negative. Only signed allowed.');\n    } else if (value.gt(new BN('18446744073709551615'))) {\n      throw new Error('Invalid unsigned 64 bit value.');\n    }\n  } else if (!isUnsigned) {\n    if (value.gt(new BN('9223372036854775807')) || value.lt(new BN('-9223372036854775808'))) {\n      throw new Error('Invalid signed 64 bit value.');\n    }\n  }\n\n  return value;\n}\n\n/**\n * Field type for 64bit int values using BN.js.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'int64', unsigned, endian);\n    this.description('8byte 64bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 8;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BN}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let value = new BN(BC.from(bc).slice(0, this.encodedSize).buffer, 10, this.endian.toLowerCase());\n\n    if (!this.unsigned) {\n      value = value.fromTwos(64);\n    }\n\n    return validate64Bit(this.unsigned, value);\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {BN} value\n   */\n  encodeToBytes(value) {\n    value = validate64Bit(this.unsigned, value);\n    if (!this.unsigned) {\n      value = value.toTwos(64);\n    }\n\n    return BC.from(value.toBuffer(this.endian.toLowerCase(), this.encodedSize));\n  }\n}\n\nmodule.exports = Int64;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../../BC');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\n\nconst StringWithoutLength = require('./StringWithoutLength');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_STRING_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithLength extends AbstractType {\n\n  constructor(id, byteSize = 1) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('String with size prepended');\n    this[P_STRING_FIELD] = new StringWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8('length', true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].encodedSize + this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc));\n    return this[P_STRING_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE_ENCODED] = value.length;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(this[P_SIZE_ENCODED]);\n\n    return bc.append(this[P_STRING_FIELD].encodeToBytes(value));\n  }\n}\n\nmodule.exports = StringWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write dynamic strings without prepending the length.\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'string_without_length');\n    this.description('Single string value without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).toString();\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value, 'string');\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumberType = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', true, Endian.LITTLE_ENDIAN);\n    this.description('An account number');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNumberType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNumberType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNumberType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n    this.description('Accounts n_operation value.');\n  }\n}\n\nmodule.exports = NOperation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CBCZeroPadding = require('./AES/CBCZeroPadding');\nconst elliptic = require('elliptic/lib/elliptic/ec/index');\n\n/**\n * AES encryption / decryption for PascalCoin.\n */\nclass ECDH {\n  /**\n   * Encrypts the given data with the given public key.\n   *\n   * @param {BC|Buffer|Uint8Array|String} data\n   * @param {PublicKey} publicKey\n   * @returns {Object}\n   */\n  static encrypt(value, options = {publicKey: PublicKey.empty()}) {\n    value = BC.from(value);\n    let ecCurve = elliptic(options.publicKey.curve.name);\n    let tempKey = ecCurve.genKeyPair();\n    let pubkey = ecCurve.keyFromPublic(options.publicKey.ecdh.buffer);\n    let sharedSecret = tempKey.derive(pubkey.getPublic());\n    let secrectkey = Sha.sha512(new BC(sharedSecret.toArray()));\n\n    let encryptedData = CBCZeroPadding.encrypt(\n      value, {key: secrectkey.slice(0, 32), iv: new Uint8Array(16)}\n    );\n\n    return {\n      data: encryptedData,\n      key: secrectkey.slice(32, 64),\n      publicKey: new BC(tempKey.getPublic(true, 'buffer'))\n    };\n  }\n\n  /**\n   * Decrypts the given data.\n   *\n   * @param {PrivateKey} privateKey\n   * @param {BC|Buffer|Uint8Array|String} publicKey\n   * @param {BC|Buffer|Uint8Array|String} data\n   * @returns {Object}\n   */\n  static decrypt(value, options = {privateKey: null, publicKey: PublicKey.empty(), origMsgLength: 0}) {\n    options.publicKey = BC.from(options.publicKey);\n    value = BC.from(value);\n    let ecCurve = elliptic(options.privateKey.curve.name);\n    let ecPrivateKey = ecCurve.keyFromPrivate(options.privateKey.key.buffer);\n    let ecPublicKey = ecCurve.keyFromPublic(options.publicKey.buffer);\n    let sharedSecret = ecPrivateKey.derive(ecPublicKey.getPublic());\n    let secrectKey = Sha.sha512(new BC(Buffer.from(sharedSecret.toArray())));\n\n    let decryptedData = CBCZeroPadding.decrypt(\n      value, {key: secrectKey.slice(0, 32), iv: new Uint8Array(16)}\n    );\n\n    let decryptedDataWithPaddingRemoved = decryptedData.slice(0, options.origMsgLength);\n\n    return {\n      data: decryptedDataWithPaddingRemoved,\n      key: secrectKey.slice(32, 64)\n    };\n  }\n}\n\nmodule.exports = ECDH;\n","const Abstract = require('./../Abstract');\nconst AES_CBC_ZeroPadding = require('./../../mipher/AES_CBC_ZeroPadding');\nconst BC = require('@pascalcoin-sbx/common').BC;\n\n/**\n * AES-CBC Zero Padding implementation.\n */\nclass CBCZeroPadding extends Abstract {\n  /**\n   * @inheritDoc Abstract#encrypt\n   */\n  static encrypt(value, options = {key: BC.empty(), iv: BC.empty()}) {\n    let aes = new AES_CBC_ZeroPadding();\n\n    return new BC(\n      aes.encrypt(\n        BC.from(options.key).buffer,\n        BC.from(value).buffer,\n        BC.from(options.iv).buffer\n      )\n    );\n  }\n\n  /**\n   * @inheritDoc Abstract#encrypt\n   */\n  static decrypt(value, options = {key: BC.empty(), iv: BC.empty()}) {\n    let aes = new AES_CBC_ZeroPadding();\n\n    return new BC(\n      aes.decrypt(\n        BC.from(options.key).buffer,\n        BC.from(value).buffer,\n        BC.from(options.iv).buffer\n      )\n    );\n  }\n}\n\nmodule.exports = CBCZeroPadding;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst mipherAES = require('mipher/dist/aes');\nconst mipherPadding = require('mipher/dist/padding');\n\n/**\n * AES-CBC + ZeroPadding integration using the mipher library\n */\nclass AES_CBC_ZeroPadding {\n\n  /**\n   * Constructor\n   */\n  constructor() {\n    this.cipher = new mipherAES.AES_CBC();\n    this.padding = new mipherPadding.ZeroPadding();\n  }\n\n  /**\n   * Encrypts using the given values.\n   *\n   * @param key\n   * @param pt\n   * @param iv\n   * @returns {Uint8Array}\n   */\n  encrypt(key, pt, iv) {\n    return this.cipher.encrypt(key, this.padding.pad(pt, this.cipher.cipher.blockSize), iv);\n  }\n\n  /**\n   * Decrypts using the given values.\n   *\n   * @param key\n   * @param ct\n   * @param iv\n   * @returns {Uint8Array}\n   */\n  decrypt(key, ct, iv) {\n    return this.padding.strip(this.cipher.decrypt(key, ct, iv));\n  };\n}\n\nmodule.exports = AES_CBC_ZeroPadding;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2016, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief padding modes implementation\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar PKCS7 = /** @class */ (function () {\r\n    function PKCS7() {\r\n    }\r\n    /**\r\n     * PKCS#7 padding function. Pads bytes to given text until text is multiple of blocksize is met\r\n     * @param {Uint8Array} bin Byte array where the bytes are padded\r\n     * @param {Number} blocksize The blocksize in bytes of the text to which the text should be padded\r\n     * @return {Uint8Array} Padded byte array\r\n     */\r\n    PKCS7.prototype.pad = function (bin, blocksize) {\r\n        var len = bin.length % blocksize ? blocksize - (bin.length % blocksize) : blocksize;\r\n        var out = new Uint8Array(bin.length + len);\r\n        out.set(bin, 0);\r\n        for (var i = bin.length, l = bin.length + len; i < l; ++i) {\r\n            out[i] = len;\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * PKCS#7 stripping function. Strips bytes of the given text\r\n     * @param {Uint8Array} bin Byte array where the bytes are stripped\r\n     * @return {Uint8Array} Stripped byte array\r\n     */\r\n    PKCS7.prototype.strip = function (bin) {\r\n        return bin.subarray(0, bin.length - bin[bin.length - 1]);\r\n    };\r\n    return PKCS7;\r\n}());\r\nexports.PKCS7 = PKCS7;\r\n///////////////////////////////////////////////////////////////////////////////\r\nvar PKCS5 = /** @class */ (function () {\r\n    /**\r\n     * PKCS#5 ctor\r\n     */\r\n    function PKCS5() {\r\n        this.pkcs7 = new PKCS7();\r\n    }\r\n    /**\r\n     * PKCS#5 padding function. Pads bytes to given text until text is multiple of 8\r\n     * @param {Uint8Array} bin Byte array where the bytes are padded\r\n     * @return {Uint8Array} Padded byte array\r\n     */\r\n    PKCS5.prototype.pad = function (bin) {\r\n        return this.pkcs7.pad(bin, 8);\r\n    };\r\n    /**\r\n     * PKCS#5 stripping function. Strips bytes of the given text\r\n     * @param {Uint8Array} bin Byte array where the bytes are stripped\r\n     * @return {Uint8Array} Stripped byte array\r\n     */\r\n    PKCS5.prototype.strip = function (bin) {\r\n        return this.pkcs7.strip(bin);\r\n    };\r\n    return PKCS5;\r\n}());\r\nexports.PKCS5 = PKCS5;\r\n///////////////////////////////////////////////////////////////////////////////\r\nvar ZeroPadding = /** @class */ (function () {\r\n    function ZeroPadding() {\r\n    }\r\n    /**\r\n     * Pads zero bytes to the given array until the length is a multiple of blocksize\r\n     * @param {Uint8Array} bin The text where the zero bytes are padded\r\n     * @param {Number} blocksize The blocksize to which the array should be padded\r\n     * @return {Uint8Array} Padded byte array\r\n     */\r\n    ZeroPadding.prototype.pad = function (bin, blocksize) {\r\n        if (bin.length % blocksize === 0)\r\n            return;\r\n        var out = new Uint8Array(blocksize);\r\n        out.set(bin, 0);\r\n        return out;\r\n    };\r\n    /**\r\n     * Zero stripping function. Just a dummy\r\n     * @param {Array} bin Byte array where the bytes are stripped\r\n     */\r\n    ZeroPadding.prototype.strip = function (bin) {\r\n        return bin;\r\n    };\r\n    return ZeroPadding;\r\n}());\r\nexports.ZeroPadding = ZeroPadding;\r\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = exports;\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  } else {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n","module.exports = require(\"crypto\");","const Abstract = require('./../Abstract');\nconst mAES = require('mipher/dist/aes');\nconst BC = require('@pascalcoin-sbx/common').BC;\n\n/**\n * AES-CBC PKCS7 implementation.\n */\nclass CBCPKCS7 extends Abstract {\n  /**\n   * @inheritDoc Abstract#encrypt\n   */\n  static encrypt(value, options = {key: BC.empty(), iv: BC.empty()}) {\n    let aes = new mAES.AES_CBC_PKCS7();\n\n    return new BC(\n      aes.encrypt(\n        BC.from(options.key).buffer,\n        BC.from(value).buffer,\n        BC.from(options.iv).buffer\n      )\n    );\n  }\n\n  /**\n   * @inheritDoc Abstract#decrypt\n   */\n  static decrypt(value, options = {key: BC.empty(), iv: BC.empty()}) {\n    let aes = new mAES.AES_CBC_PKCS7();\n\n    return new BC(\n      aes.decrypt(\n        BC.from(options.key).buffer,\n        BC.from(value).buffer,\n        BC.from(options.iv).buffer\n      )\n    );\n  }\n}\n\nmodule.exports = CBCPKCS7;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst P_PUBLIC_KEY = Symbol('pubkey');\nconst P_MAC = Symbol('mac');\n\nconst P_ORIGINAL_DATA_LENGTH = Symbol('original_data_length');\nconst P_ORIGINAL_DATA_LENGTH_INC_PAD_LENGTH = Symbol('original_data_length_inc_pad_length');\nconst P_ENCRYPTED_DATA = Symbol('encryped_data');\n\n/**\n * A class that can en-/decrypt payloads based on a public key / private key.\n */\nclass Data {\n  withPublicKey(publicKey) {\n    this[P_PUBLIC_KEY] = publicKey;\n    return this;\n  }\n  withMac(mac) {\n    this[P_MAC] = mac;\n    return this;\n  }\n\n  withOriginalDataLength(length) {\n    this[P_ORIGINAL_DATA_LENGTH] = length;\n    return this;\n  }\n  withOriginalDataLengthIncPadLength(length) {\n    this[P_ORIGINAL_DATA_LENGTH_INC_PAD_LENGTH] = length;\n    return this;\n  }\n  withEncryptedData(encryptedData) {\n    this[P_ENCRYPTED_DATA] = encryptedData;\n    return this;\n  }\n\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n  get publicKeyLength() {\n    return this[P_PUBLIC_KEY].length;\n  }\n  get originalDataLength() {\n    return this[P_ORIGINAL_DATA_LENGTH];\n  }\n  get originalDataLengthIncPadLength() {\n    return this[P_ORIGINAL_DATA_LENGTH_INC_PAD_LENGTH];\n  }\n\n  get encryptedData() {\n    return this[P_ENCRYPTED_DATA];\n  }\n  get mac() {\n    return this[P_MAC];\n  }\n  get macLength() {\n    return this[P_MAC].length;\n  }\n}\n\nmodule.exports = Data;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief Bruce Schneier's FORTUNA random generator implementation\r\n//        Some inspiration was taken from the random.js module of sjcl\r\n// usage: let rand = new Random();\r\n//        let val = rand.get(32);\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\nvar aes_1 = require(\"./aes\");\r\nvar sha256_1 = require(\"./sha256\");\r\n/**\r\n * FORTUNA random class\r\n */\r\nvar Random = /** @class */ (function () {\r\n    /**\r\n     * ctor\r\n     * @param {Number} numPools Number of pools used for entropy acquisition. Defaults to 32 pools, use 16 on limited entropy sources\r\n     * @param {Uint8Array} entropy Optional array of any length with initial (true) random data (the more the better)\r\n     */\r\n    function Random(numPools, entropy) {\r\n        if (numPools === void 0) { numPools = 32; }\r\n        // constants\r\n        this.NUM_POOLS = numPools; // number of pools used for entropy acquisition. Defaults to 32 pools, use 16 on limited entropy sources\r\n        this.RESEED_LIMIT = 64; // reseed trigger level\r\n        this.MILLISECONDS_PER_RESEED = 10000; // reseed force after milliseconds\r\n        this.gen = new aes_1.AES();\r\n        this.genKey = new Uint8Array(32);\r\n        this.genCnt = new Uint8Array(16);\r\n        this.poolData = []; // SHA objects\r\n        this.poolEntropy = []; // entropy of the according pool\r\n        this.robin = { kbd: 0, mouse: 0, scroll: 0, touch: 0, motion: 0, time: 0, rnd: 0, dom: 0 };\r\n        this.entropy_level = 0; // actual generator entropy\r\n        this.eventId = 0;\r\n        this.reseedCnt = 0;\r\n        this.lastReseed = 0; // time of last reseed\r\n        this.active = false; // genarator / collectors status\r\n        // create the data pools\r\n        for (var i = 0; i < this.NUM_POOLS; i++) {\r\n            this.poolData.push(new sha256_1.SHA256());\r\n            this.poolEntropy.push(0);\r\n        }\r\n        this.init(entropy);\r\n    }\r\n    /**\r\n     * Start the generator (public wrapper for init())\r\n     * Normally start/stop is not necessary, init() is called from ctor\r\n     */\r\n    Random.prototype.start = function () {\r\n        this.init();\r\n    };\r\n    /**\r\n     * Stop the generator\r\n     * Normally stopping is not necessary\r\n     */\r\n    Random.prototype.stop = function () {\r\n        this.stopCollectors();\r\n    };\r\n    /**\r\n     * Return the actual generator entropy (number of available random bytes)\r\n     * @return {Number} Number of available random bytes\r\n     */\r\n    Random.prototype.getEntropy = function () {\r\n        return Math.floor(this.entropy_level / 8);\r\n    };\r\n    /**\r\n     * Add external given entropy\r\n     * @param {Uint8Array} entropy Random bytes to be added to the entropy pools\r\n     */\r\n    Random.prototype.addEntropy = function (entropy) {\r\n        this.addRandomEvent(entropy, this.robin.rnd, entropy.length * 8);\r\n    };\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // G E N E R A T O R\r\n    /**\r\n     * Init/start the module (called by ctor as 'autostart')\r\n     * @param {Uint8Array} entropy Optional array of any length of (true) random bytes to be added to the entropy pools\r\n     */\r\n    Random.prototype.init = function (entropy) {\r\n        // pool init\r\n        var i;\r\n        for (i = 0; i < this.NUM_POOLS; i++) {\r\n            this.poolData[i].init();\r\n        }\r\n        // explicit generator init\r\n        for (i = 0; i < 32; i++) {\r\n            this.genKey[i] = 0;\r\n        } // 32 byte key for AES256\r\n        for (i = 0; i < 16; i++) {\r\n            this.genCnt[i] = 0;\r\n        } // 16 byte counter\r\n        this.robin.kbd = this.robin.mouse = this.robin.scroll = this.robin.touch = this.robin.motion = this.robin.time = this.robin.rnd = this.robin.dom = 0;\r\n        this.reseedCnt = 0;\r\n        this.lastReseed = 0;\r\n        // try to get an initial seed, use crypto.random instead of a seed file\r\n        for (i = 0; i < this.NUM_POOLS * 4; i++) {\r\n            this.collectorCryptoRandom();\r\n        }\r\n        if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\r\n            this.addRandomEvent(base_1.Convert.str2bin(performance.now().toString()), this.robin.time, 2);\r\n        }\r\n        if (typeof process !== 'undefined' && typeof process.hrtime === 'function') {\r\n            this.addRandomEvent(base_1.Convert.str2bin(process.hrtime()[0].toString() + process.hrtime()[1].toString()), this.robin.time, 2);\r\n        }\r\n        // add some entropy from DOM\r\n        this.collectorDom();\r\n        // extra entropy\r\n        if (entropy) {\r\n            this.addRandomEvent(entropy, this.robin.rnd, entropy.length * 8); // add given entropy\r\n        }\r\n        this.startCollectors();\r\n    };\r\n    /**\r\n     * Reseed the generator with the given byte array\r\n     */\r\n    Random.prototype.reseed = function (seed) {\r\n        // compute a new 32 byte key\r\n        this.genKey = (new sha256_1.SHA256()).update(this.genKey).digest(seed);\r\n        // increment the 16 byte counter to make it nonzero and mark the generator as seeded\r\n        this.genCnt[0]++;\r\n        for (var i = 0; i < 15; i++) {\r\n            if (this.genCnt[i] === 0) {\r\n                this.genCnt[i + 1]++;\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        this.lastReseed = (new Date()).valueOf();\r\n    };\r\n    /**\r\n     * Internal function to generates a number of (16 byte) blocks of random output\r\n     * @param {Number} blocks Number of blocks to generate\r\n     */\r\n    Random.prototype.generateBlocks = function (blocks) {\r\n        var r = new Uint8Array(blocks * 16);\r\n        for (var i = 0; i < blocks; i++) {\r\n            r.set(this.gen.encrypt(this.genKey, this.genCnt), i * 16);\r\n            // increment the 16 byte counter\r\n            this.genCnt[0]++;\r\n            for (var c = 0; c < 15; c++) {\r\n                if (this.genCnt[c] === 0) {\r\n                    this.genCnt[c + 1]++;\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n    /**\r\n     * Internal function to get random data bytes\r\n     */\r\n    Random.prototype.pseudoRandomData = function (length) {\r\n        var r = new Uint8Array(length);\r\n        // compute the output\r\n        r.set(this.generateBlocks((length >>> 4) + 1).subarray(0, length));\r\n        // generate two more blocks to get a new key\r\n        this.genKey = this.generateBlocks(2);\r\n        return r;\r\n    };\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // A C C U M U L A T O R\r\n    /**\r\n     * Get random data bytes\r\n     * @param {Number} length Number of bytes to generate\r\n     * @return {Uint8Array} Byte array of crypto secure random values or undefined, if generator is not ready\r\n     */\r\n    Random.prototype.get = function (length) {\r\n        if ((this.poolEntropy[0] >= this.RESEED_LIMIT) && (this.lastReseed + this.MILLISECONDS_PER_RESEED < (new Date()).valueOf())) {\r\n            // we need to reseed\r\n            this.reseedCnt = ++this.reseedCnt & 0xffffffff;\r\n            var s = new Uint8Array(0), strength = 0;\r\n            for (var i = 0; i < this.NUM_POOLS; i++) {\r\n                if ((1 << i) & this.reseedCnt) {\r\n                    s = base_1.Util.concat(s, this.poolData[i].digest());\r\n                    strength += this.poolEntropy[i];\r\n                    this.poolData[i].init();\r\n                    this.poolEntropy[i] = 0;\r\n                }\r\n            }\r\n            // how strong was this reseed?\r\n            this.entropy_level -= strength;\r\n            // got the data, now do the reseed\r\n            this.reseed(s);\r\n        }\r\n        if (!this.active || this.reseedCnt === 0) {\r\n            return; // error, prng not running or not seeded yet, return undefined\r\n        }\r\n        else {\r\n            return this.pseudoRandomData(length);\r\n        }\r\n    };\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // C O L L E C T O R S\r\n    /**\r\n     * Start the built-in entropy collectors\r\n     */\r\n    Random.prototype.startCollectors = function () {\r\n        if (this.active) {\r\n            return;\r\n        }\r\n        if (typeof window !== 'undefined' && window.addEventListener) {\r\n            window.addEventListener('click', this.collectorClick.bind(this), true);\r\n            window.addEventListener('keydown', this.collectorKeyboard.bind(this), true);\r\n            window.addEventListener('scroll', this.collectorScroll.bind(this), true);\r\n            window.addEventListener('mousemove', this.throttle(this.collectorMouse, 50, this), true);\r\n            window.addEventListener('devicemotion', this.throttle(this.collectorMotion, 100, this), true);\r\n            window.addEventListener('deviceorientation', this.collectorMotion.bind(this), true);\r\n            window.addEventListener('orientationchange', this.collectorMotion.bind(this), true);\r\n            window.addEventListener('touchmove', this.throttle(this.collectorTouch, 50, this), true);\r\n            window.addEventListener('touchstart', this.collectorTouch.bind(this), true);\r\n            window.addEventListener('touchend', this.collectorTouch.bind(this), true);\r\n            window.addEventListener('load', this.collectorTime.bind(this), true);\r\n        }\r\n        else if (typeof document !== 'undefined' && document.addEventListener) {\r\n            document.addEventListener('click', this.collectorClick.bind(this), true);\r\n            document.addEventListener('keydown', this.collectorKeyboard.bind(this), true);\r\n            document.addEventListener('mousemove', this.throttle(this.collectorMouse, 50, this), true);\r\n        }\r\n        // start timer, add additional crypto random from system source every 3 sec\r\n        this.timer = setInterval(this.collectorCryptoRandom.bind(this), 3000);\r\n        this.active = true;\r\n    };\r\n    /**\r\n     * Stop the built-in entropy collectors\r\n     */\r\n    Random.prototype.stopCollectors = function () {\r\n        if (!this.active) {\r\n            return;\r\n        }\r\n        if (typeof window !== 'undefined' && window.addEventListener) {\r\n            window.removeEventListener('click', this.collectorClick, true);\r\n            window.removeEventListener('keydown', this.collectorKeyboard, true);\r\n            window.removeEventListener('scroll', this.collectorScroll, true);\r\n            window.removeEventListener('mousemove', this.collectorMouse, true);\r\n            window.removeEventListener('devicemotion', this.collectorMotion, true);\r\n            window.removeEventListener('deviceorientation', this.collectorMotion, true);\r\n            window.removeEventListener('orientationchange', this.collectorMotion, true);\r\n            window.removeEventListener('touchmove', this.collectorTouch, true);\r\n            window.removeEventListener('touchstart', this.collectorTouch, true);\r\n            window.removeEventListener('touchend', this.collectorTouch, true);\r\n            window.removeEventListener('load', this.collectorTime, true);\r\n        }\r\n        else if (typeof document !== 'undefined' && document.addEventListener) {\r\n            document.removeEventListener('click', this.collectorClick, true);\r\n            document.removeEventListener('keydown', this.collectorKeyboard, true);\r\n            document.removeEventListener('mousemove', this.collectorMouse, true);\r\n        }\r\n        // stop timer\r\n        clearInterval(this.timer);\r\n        this.active = false;\r\n    };\r\n    /**\r\n     * In case of an event burst (eg. motion events), this executes the given fn once every threshold\r\n     * @param {Function} fn Function to be throttled\r\n     * @param {number} threshold Threshold in [ms]\r\n     * @param {Object} scope Optional scope, defaults to 'this'\r\n     * @returns {Function} Resulting function\r\n     */\r\n    Random.prototype.throttle = function (fn, threshold, scope) {\r\n        var last, deferTimer;\r\n        return function () {\r\n            var context = scope || this;\r\n            var now = +new Date, args = arguments;\r\n            if (last && now < last + threshold) {\r\n                clearTimeout(deferTimer);\r\n                deferTimer = setTimeout(function () {\r\n                    last = now;\r\n                    fn.apply(context, args);\r\n                }, threshold);\r\n            }\r\n            else {\r\n                last = now;\r\n                fn.apply(context, args);\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Add entropy data to pool\r\n     * @param data {Uint8Array} Entropy data to add\r\n     * @param pool_idx {Number} Pool index number to add the entropy data to\r\n     * @param entropy {Number} Added entropy data quality in bits\r\n     */\r\n    Random.prototype.addRandomEvent = function (data, pool_idx, entropy) {\r\n        if (entropy === void 0) { entropy = 1; }\r\n        this.poolEntropy[pool_idx] += entropy;\r\n        this.entropy_level += entropy;\r\n        this.poolData[pool_idx].update(base_1.Convert.int2bin(this.eventId++)).update(data);\r\n    };\r\n    Random.prototype.collectorKeyboard = function (ev) {\r\n        this.addRandomEvent(new Uint8Array([base_1.Convert.str2bin(ev.key || ev.char)[0] || ev.keyCode, (ev.timeStamp || 0) & 0xFF]), this.robin.kbd, 1);\r\n        this.robin.kbd = ++this.robin.kbd % this.NUM_POOLS;\r\n        this.collectorTime();\r\n    };\r\n    Random.prototype.collectorMouse = function (ev) {\r\n        var x = ev.x || ev.clientX || ev.offsetX || 0, y = ev.y || ev.clientY || ev.offsetY || 0;\r\n        this.addRandomEvent(new Uint8Array([x >>> 8, x & 0xff, y >>> 8, y & 0xff]), this.robin.mouse, 2);\r\n        this.robin.mouse = ++this.robin.mouse % this.NUM_POOLS;\r\n    };\r\n    Random.prototype.collectorClick = function (ev) {\r\n        var x = ev.x || ev.clientX || ev.offsetX || 0, y = ev.y || ev.clientY || ev.offsetY || 0;\r\n        this.addRandomEvent(new Uint8Array([x >>> 8, x & 0xff, y >>> 8, y & 0xff]), this.robin.mouse, 2);\r\n        this.robin.mouse = ++this.robin.mouse % this.NUM_POOLS;\r\n        this.collectorTime();\r\n    };\r\n    Random.prototype.collectorTouch = function (ev) {\r\n        var touch = ev.touches[0] || ev.changedTouches[0];\r\n        var x = touch.pageX || touch.clientX || 0, y = touch.pageY || touch.clientY || 0;\r\n        this.addRandomEvent(new Uint8Array([x >>> 8, x & 0xff, y >>> 8, y & 0xff]), this.robin.touch, 2);\r\n        this.robin.touch = ++this.robin.touch % this.NUM_POOLS;\r\n        this.collectorTime();\r\n    };\r\n    Random.prototype.collectorScroll = function (ev) {\r\n        var x = window.pageXOffset || window.scrollX, y = window.pageYOffset || window.scrollY;\r\n        this.addRandomEvent(new Uint8Array([x >>> 8, x & 0xff, y >>> 8, y & 0xff]), this.robin.scroll, 1);\r\n        this.robin.scroll = ++this.robin.scroll % this.NUM_POOLS;\r\n    };\r\n    Random.prototype.collectorMotion = function (ev) {\r\n        if (typeof ev !== 'undefined' && typeof ev.accelerationIncludingGravity !== 'undefined') {\r\n            var x = ev.accelerationIncludingGravity.x || 0, y = ev.accelerationIncludingGravity.y || 0, z = ev.accelerationIncludingGravity.z || 0;\r\n            this.addRandomEvent(new Uint8Array([(x * 100) & 0xff, (y * 100) & 0xff, (z * 100) & 0xff]), this.robin.motion, 3);\r\n        }\r\n        if (typeof ev !== 'undefined' && typeof ev.alpha === 'number' && typeof ev.beta === 'number' && typeof ev.gamma === 'number') {\r\n            this.addRandomEvent(base_1.Convert.str2bin(ev.alpha.toString() + ev.beta.toString() + ev.gamma.toString()), this.robin.motion, 3);\r\n        }\r\n        if (typeof window !== 'undefined' && typeof window.orientation !== 'undefined') {\r\n            this.addRandomEvent(base_1.Convert.str2bin(window.orientation.toString()), this.robin.motion, 1);\r\n        }\r\n        this.robin.motion = ++this.robin.motion % this.NUM_POOLS;\r\n    };\r\n    Random.prototype.collectorTime = function () {\r\n        if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\r\n            this.addRandomEvent(base_1.Convert.str2bin(performance.now().toString()), this.robin.time, 2);\r\n        }\r\n        else {\r\n            this.addRandomEvent(base_1.Convert.number2bin(Date.now()), this.robin.time, 2);\r\n        }\r\n        this.robin.time = ++this.robin.time % this.NUM_POOLS;\r\n    };\r\n    Random.prototype.collectorDom = function () {\r\n        if (typeof document !== 'undefined' && document.documentElement) {\r\n            this.addRandomEvent((new sha256_1.SHA256()).hash(base_1.Convert.str2bin(document.documentElement.innerHTML)), this.robin.dom, 2);\r\n            this.robin.dom = ++this.robin.dom % this.NUM_POOLS;\r\n        }\r\n    };\r\n    Random.prototype.collectorCryptoRandom = function () {\r\n        // check if running in nodeish env\r\n        if (typeof process !== 'undefined' && typeof process.pid === 'number') {\r\n            // running on node\r\n            try {\r\n                var crypto_1 = require('crypto');\r\n                var rnd = crypto_1.randomBytes(128);\r\n                this.addRandomEvent(rnd, this.robin.rnd, 1024);\r\n                this.robin.rnd = ++this.robin.rnd % this.NUM_POOLS;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        if (typeof window !== 'undefined' && window.crypto && typeof window.crypto.getRandomValues === 'function') {\r\n            // running in browser env\r\n            try {\r\n                var rnd = new Uint8Array(128);\r\n                window.crypto.getRandomValues(rnd);\r\n                this.addRandomEvent(rnd, this.robin.rnd, 1024);\r\n                this.robin.rnd = ++this.robin.rnd % this.NUM_POOLS;\r\n            }\r\n            catch (e) { }\r\n        }\r\n    };\r\n    return Random;\r\n}());\r\nexports.Random = Random;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet Items = {\n  ChangeKey: {\n    Operation: require('./ChangeKey/Operation'),\n    RawCoder: require('./ChangeKey/RawCoder'),\n    DigestCoder: require('./ChangeKey/DigestCoder')\n  },\n  ChangeKeySigned: {\n    Operation: require('./ChangeKeySigned/Operation'),\n    RawCoder: require('./ChangeKeySigned/RawCoder'),\n    DigestCoder: require('./ChangeKeySigned/DigestCoder')\n  },\n  ChangeAccountInfo: {\n    Operation: require('./ChangeAccountInfo/Operation'),\n    RawCoder: require('./ChangeAccountInfo/RawCoder'),\n    DigestCoder: require('./ChangeAccountInfo/DigestCoder')\n  },\n  Data: {\n    Operation: require('./Data/Operation'),\n    RawCoder: require('./Data/RawCoder'),\n    DigestCoder: require('./Data/DigestCoder')\n  },\n  Transaction: {\n    Operation: require('./Transaction/Operation'),\n    RawCoder: require('./Transaction/RawCoder'),\n    DigestCoder: require('./Transaction/DigestCoder')\n  },\n  ListAccountForSale: {\n    Operation: require('./ListAccountForSale/Operation'),\n    RawCoder: require('./ListAccountForSale/RawCoder'),\n    DigestCoder: require('./ListAccountForSale/DigestCoder')\n  },\n  DeListAccountForSale: {\n    Operation: require('./DeListAccountForSale/Operation'),\n    RawCoder: require('./DeListAccountForSale/RawCoder'),\n    DigestCoder: require('./DeListAccountForSale/DigestCoder')\n  },\n  BuyAccount: {\n    Operation: require('./BuyAccount/Operation'),\n    RawCoder: require('./BuyAccount/RawCoder'),\n    DigestCoder: require('./BuyAccount/DigestCoder')\n  },\n  MultiOperation: {\n    Operation: require('./MultiOperation/Operation'),\n    RawCoder: require('./MultiOperation/RawCoder'),\n    DigestCoder: require('./MultiOperation/DigestCoder'),\n    Changer: require('./MultiOperation/Changer/Changer'),\n    Sender: require('./MultiOperation/Sender/Sender'),\n    Receiver: require('./MultiOperation/Receiver/Receiver')\n  }\n};\n\nItems.digestCoderFor = operation => {\n  return Items[operation.constructor.name].DigestCoder;\n};\nmodule.exports = Items;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SIGNER = Symbol('signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass ChangeKey extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 2;\n  }\n\n  /**\n   * Constructor.\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the account number of the signer and the account to be changed.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_SIGNER];\n  }\n\n  /**\n   * Gets the new public key of the account.\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeKey = require('./Operation');\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_op_raw');\n    this.description('The coder for the raw representation of a ChangeKey operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKey operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKey(\n      decoded.signer,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SIGNER = Symbol('signer');\nconst P_TARGET = Symbol('target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable ChangeKeySigned operation.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 7;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {Account|AccountNumber|Number|String} accountTarget\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_SIGNER] = new AccountNumber(accountSigner);\n    this[P_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the account number of the signer.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_SIGNER];\n  }\n\n  /**\n   * Gets the account number of the account to be changed.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the new public key of the target account.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeKeySigned = require('./Operation');\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_signed_op_raw');\n    this.description('The coder for the raw representation of a ChangeKeySigned operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to be changed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Signed Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKeySigned operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKeySigned(\n      decoded.signer,\n      decoded.target,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * Representation of a signable ChangeAccountInfo operation.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 8;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {Account|AccountNumber|Number|String} accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  /**\n   * Gets the signer account of the operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the target account to change.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the new public key of the target.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the new name of the target.\n   *\n   * @return {AccountName}\n   */\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  /**\n   * Gets the new type of the target account.\n   *\n   * @return {Number}\n   */\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the change type of the op.\n   *\n   * @returns {number}\n   */\n  get changeType() {\n    let changeType = 0;\n\n    if (this[P_WITH_NEW_PUBKEY] === true) {\n      changeType |= 1;\n    }\n    if (this[P_WITH_NEW_NAME] === true) {\n      changeType |= 2;\n    }\n    if (this[P_WITH_NEW_TYPE] === true) {\n      changeType |= 4;\n    }\n\n    return changeType;\n  }\n\n  /**\n   * Will set the new public key.\n   *\n   * @param {PublicKey} publicKey\n   * @returns {ChangeAccountInfo}\n   */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeAccountInfo = require('./Operation');\n\n/**\n * The raw coder for a ChangeAccountInfo operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_account_info_op_raw');\n    this.description('The coder for the raw representation of a ChangeAccountInfo operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Account Info Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeAccountInfo operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeAccountInfo}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeAccountInfo(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withNewType(decoded.newType);\n    op.withNewName(decoded.newName);\n    op.withNewPublicKey(decoded.newPublicKey);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable DATA operation.\n */\nclass Data extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Forces the signer to use the digest instead of the hash of the digest\n   * to sign the operation.\n   *\n   * @return {boolean}\n   */\n  usesDigestToSign() {\n    return true;\n  }\n}\n\nmodule.exports = Data;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst Data = require('./Operation');\n\n/**\n * The raw coder for a DATA operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_operation_raw');\n    this.description('The coder for the raw representation of a Data operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Data Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Data operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Data}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Data(\n      decoded.signer,\n      decoded.sender,\n      decoded.target\n    );\n\n    op.withDataType(decoded.dataType);\n    op.withDataSequence(decoded.dataSequence);\n    op.withAmount(decoded.amount);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SENDER = Symbol('sender');\nconst P_ACCOUNT_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable Transaction operation.\n */\nclass Transaction extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 1;\n  }\n\n  /**\n   * Creates a new Transaction instance with the given data. The payload is\n   * empty by default and not encoded.\n   *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super();\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Transaction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst Transaction = require('./Operation');\n\n/**\n * The raw coder for a Transaction operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_operation_raw');\n    this.description('The coder for the raw representation of a Transaction operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Transaction Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Transaction operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ListOperation}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Transaction(\n      decoded.sender,\n      decoded.target,\n      decoded.amount\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * Representation of a signable List operation.\n */\nclass ListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 4;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Number|AccountNumber} accountSigner\n   * @param {Number|AccountNumber} accountTarget\n   * @param {Currency} price\n   * @param {Number|AccountNumber} accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  /**\n   * Gets the signer of the list operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the account that should be listed.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the price of the listed account (target)\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account where the money should be send to on sale.\n   *\n   * @return {AccountNumber}\n   */\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  /**\n   * Gets the new public key in case its a private sale.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the block number until when the account is locked in case of a\n   * private sale.\n   *\n   * @return {Number}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n}\n\nmodule.exports = ListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\nconst CompositeType = Coding.CompositeType;\nconst ListOperation = require('./Operation');\n\n/**\n * The raw coder for a List operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('list_operation_raw');\n    this.description('The coder for the raw representation of a List Account operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(4)\n        .description('The optype of the operation (4)')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'List Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded List operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ListOperation}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ListOperation(\n      decoded.signer,\n      decoded.target,\n      decoded.price,\n      decoded.accountToPay\n    );\n\n    op.asPrivateSale(decoded.newPublicKey, decoded.lockedUntilBlock);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * Representation of a signable Delist operation.\n */\nclass DeListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 5;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Number|AccountNumber} accountSigner\n   * @param {Number|AccountNumber} accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n\n  }\n\n  /**\n   * Gets the signer of the delist operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the account that should be delisted.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the price of the account (defaulted to 0).\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account that should have received the amount on sale (defaulted to 0)\n   *\n   * @return {Currency}\n   */\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  /**\n   * Gets the new public key in case of a private sale (defaulted to an empty pubkey).\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the value until when the account is locked (defaulted to 0).\n   *\n   * @return {Number}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n}\n\nmodule.exports = DeListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst DeList = require('./Operation');\n\n/**\n * The raw coder for a Delist operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('delist_operation_raw');\n    this.description('The coder for the raw representation of a Delist Account operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(5)\n        .description('The optype of the operation (5)')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Delist Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Delist operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Data}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new DeList(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable BuyAccount operation.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the buyer account.\n   *\n   * @return {AccountNumber}\n   */\n  get sender() {\n    return this[P_SENDER];\n  }\n\n  /**\n   * Gets the account to buy.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the amount to be transferred.\n   *\n   * @return {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the price of the account.\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_ACCOUNT_PRICE];\n  }\n\n  /**\n   * Gets the account of the seller.\n   *\n   * @return {AccountNumber}\n   */\n  get seller() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  /**\n   * Gets the new public key of the bought account.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst BuyAccount = require('./Operation');\n\n/**\n * The raw coder for a BuyAccount operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('buy_op_raw');\n    this.description('The coder for the raw representation of a BuyAccount operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount to pay for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('type', true, Endian.LITTLE_ENDIAN)\n        .description('Fixed type for a \"Buy account\" transaction.')\n        .withFixedValue(2)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key that will own the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded BuyAccount operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {BuyAccount}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new BuyAccount(\n      decoded.sender,\n      decoded.target,\n      decoded.amount,\n      decoded.price,\n      decoded.seller,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst SenderRawCoder = require('./Sender/RawCoder');\nconst ReceiverCoder = require('./Receiver/RawAndDigestCoder');\nconst ChangerRawCoder = require('./Changer/RawCoder');\nconst MultiOperation = require('./Operation');\nconst Sender = require('./Sender/Sender');\nconst Receiver = require('./Receiver/Receiver');\nconst Changer = require('./Changer/Changer');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_op_raw');\n    this.description('The coder for the raw representation of a MultiOperation');\n    this.addSubType(\n      new Coding.Core.Int16('protocol', true, Endian.LITTLE_ENDIAN)\n        .description('The protocol version (3).')\n        .withFixedValue(3)\n    );\n    this.addSubType(\n      new Coding.Core.Int16('sendersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of senders')\n    );\n    this.addSubType(\n      new Coding.Repeating('senders', new SenderRawCoder(), -1, 'sendersCount')\n        .description('Senders of the multi-operation')\n    );\n\n    this.addSubType(\n      new Coding.Core.Int16('receiversCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of receivers')\n    );\n    this.addSubType(\n      new Coding.Repeating('receivers', new ReceiverCoder(), -1, 'receiversCount')\n        .description('Receivers of the multi-operation')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('changersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of changers')\n    );\n    this.addSubType(\n      new Coding.Repeating('changers', new ChangerRawCoder(), -1, 'changersCount')\n        .description('Changers of the multi-operation')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKey operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new MultiOperation();\n\n    decoded.senders.forEach((sender) => {\n      let senderObj = new Sender(sender.account, sender.amount);\n\n      senderObj.withNOperation(sender.nOperation);\n      senderObj.withPayload(sender.payload);\n      senderObj.withSign(sender.r, sender.s);\n      op.addSender(senderObj);\n    });\n\n    decoded.receivers.forEach((receiver) => {\n      let receiverObj = new Receiver(receiver.account, receiver.amount);\n\n      receiverObj.withPayload(receiver.payload);\n\n      op.addReceiver(receiverObj);\n    });\n\n    decoded.changers.forEach((changer) => {\n      let changerObj = new Changer(changer.account);\n\n      changerObj.withNOperation(changer.nOperation);\n      if ((changer.changeType & 1) === 1) {\n        changerObj.withNewPublicKey(changer.newPublicKey);\n      }\n      if ((changer.changeType & 2) === 2) {\n        changerObj.withNewName(changer.newName);\n      }\n      if ((changer.changeType & 4) === 4) {\n        changerObj.withNewType(changer.newType);\n      }\n      changerObj.withSign(changer.r, changer.s);\n      op.addChanger(changerObj);\n    });\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The raw coder for a MultiOperation.Receiver.\n */\nclass RawAndDigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('multiop_receiver_raw');\n    this.description('The coder for the raw and digest representation of a MultiOperation.Receiver');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('account')\n        .description('The account of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount sent by the sender.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'MultiOperation.Receiver (RAW & DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n}\n\nmodule.exports = RawAndDigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst TransactionRawCoder = require('./Operations/Transaction/RawCoder');\nconst DataRawCoder = require('./Operations/Data/RawCoder');\nconst ListRawCoder = require('./Operations/ListAccountForSale/RawCoder');\nconst DeListRawCoder = require('./Operations/DeListAccountForSale/RawCoder');\nconst BuyRawCoder = require('./Operations/BuyAccount/RawCoder');\nconst ChangeKeyRawCoder = require('./Operations/ChangeKey/RawCoder');\nconst ChangeKeySignedRawCoder = require('./Operations/ChangeKeySigned/RawCoder');\nconst ChangeAccountInfoRawCoder = require('./Operations/ChangeAccountInfo/RawCoder');\nconst MultiOperationRawCoder = require('./Operations/MultiOperation/RawCoder');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawOperationsCoder extends CompositeType {\n  constructor() {\n    super('combined signed operations');\n    super.description('Coder to combine multiple operations');\n    this.addSubType(new Coding.Core.Int32('count', true, Endian.LITTLE_ENDIAN));\n    const operationType = new CompositeType('operation');\n\n    operationType.addSubType(new Coding.Pascal.OpType('optype', 4));\n    operationType.addSubType(new Coding.Decissive('operation', 'optype', (markerValue) => {\n      switch (markerValue) {\n        case 1:\n          return new TransactionRawCoder();\n        case 2:\n          return new ChangeKeyRawCoder();\n        case 4:\n          return new ListRawCoder();\n        case 5:\n          return new DeListRawCoder();\n        case 6:\n          return new BuyRawCoder();\n        case 7:\n          return new ChangeKeySignedRawCoder();\n        case 8:\n          return new ChangeAccountInfoRawCoder();\n        case 9:\n          return new MultiOperationRawCoder();\n        case 10:\n          return new DataRawCoder();\n        default:\n          throw new Error('Unable to map marker to a coder.');\n      }\n    }));\n    this.addSubType(new Coding.Repeating('operations', operationType, -1, 'count'));\n  }\n}\n\nmodule.exports = RawOperationsCoder;\n","module.exports = {\n  Signer: require('./src/Signer'),\n  RawOperations: require('./src/RawOperations'),\n  RawOperationsCoder: require('./src/RawOperationsCoder'),\n  Coding: {\n    PublicKeyWithLength: require('./src/Coding/PublicKeyWithLength')\n  },\n  Operations: require('./src/Operations')\n};\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AbstractType: require('./AbstractType'),\n  CompositeType: require('./CompositeType'),\n  Repeating: require('./Repeating'),\n  Decissive: require('./Decissive'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    StringWithLength: require('./Core/StringWithLength'),\n    StringWithoutLength: require('./Core/StringWithoutLength'),\n    BytesWithLength: require('./Core/BytesWithLength'),\n    BytesWithoutLength: require('./Core/BytesWithoutLength'),\n    BytesFixedLength: require('./Core/BytesFixedLength')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey'),\n      PrivateKey: require('./Pascal/Keys/PrivateKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    AccountName: require('./Pascal/AccountName'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType'),\n    OperationHash: require('./Pascal/OperationHash')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_REPEAT_LIMIT = Symbol('repeat_limit');\nconst P_REPEAT_MARKER = Symbol('repeat_marker');\nconst P_TYPE = Symbol('type');\n\n/**\n * A Type that itself is made up of multiple other types.\n */\nclass Repeating extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, type, repeatLimit = -1, repeatMarker = null) {\n    super(id || 'repeating');\n    super.description('A type that itself has one repeating type that will ' +\n      'be written / read until the limit is reached or data is empty.');\n    this[P_TYPE] = type;\n    this[P_REPEAT_LIMIT] = repeatLimit;\n    this[P_REPEAT_MARKER] = repeatMarker;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let result = [];\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    let limit = this[P_REPEAT_MARKER] !== null ? all[this[P_REPEAT_MARKER]] : this[P_REPEAT_LIMIT];\n    let counter = limit;\n\n    while ((limit > -1 && counter > 0) || (limit === -1 && bc.length > offset)) {\n      const decoded = this[P_TYPE].decodeFromBytes(bc.slice(offset));\n\n      result.push(decoded);\n      offset += this[P_TYPE].encodedSize;\n      counter--;\n    }\n\n    this[P_SIZE_ENCODED] = offset;\n\n    return result;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(arr) {\n    let bc = BC.empty();\n\n    arr.forEach((item, idx) => {\n      if (idx >= this[P_REPEAT_LIMIT] && this[P_REPEAT_LIMIT] > -1) {\n        return;\n      }\n      bc = bc.append(this[P_TYPE].encodeToBytes(item));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  get repeatingType() {\n    return this[P_TYPE];\n  }\n}\n\nmodule.exports = Repeating;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CompositeType = require('./CompositeType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_SUBTYPE_RESOLVER = Symbol('subtype_resolver');\nconst P_MARKER_FIELD = Symbol('marker_field');\n\n/**\n * A Type that itself is made up of multiple other types. The types are selected dynamically\n * depending on the given resolver.\n */\nclass Decissive extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor(id, markerField, subTypeResolver) {\n    super(id || 'decissive');\n    super.description('A type that itself has many sub types but only some are triggere based on a marker.');\n    this[P_SUBTYPE_RESOLVER] = subTypeResolver;\n    this[P_MARKER_FIELD] = markerField;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n\n    this[P_SIZE_ENCODED] = subType.encodedSize;\n    return subType.decodeFromBytes(bc, options, all);\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray, all) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n    let bc = subType.encodeToBytes(objOrArray);\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = Decissive;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to encode and decode bytes with a fixed length.\n */\nclass BytesFixedLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Number} length\n   */\n  constructor(id, length) {\n    super(id || 'bytes_fixed_length_' + length);\n    this.description('Bytes with a fixed length of ' + length);\n    this[P_SIZE] = length;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE];\n  }\n\n  /**\n   * Returns the values of the given bc in the configured length.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    return value.slice(0, this[P_SIZE]);\n  }\n}\n\nmodule.exports = BytesFixedLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst BytesWithoutLength = require('../../Core/BytesWithoutLength');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PublicKeyType = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A Public Key value.\n */\nclass PublicKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} omitXYLenghts\n   */\n  constructor(id = null, omitXYLenghts = false) {\n    super(id || 'public_key');\n    this.addSubType(new Curve('curve'));\n\n    // oh come on..\n    if (omitXYLenghts) {\n      this.addSubType(\n        new BytesWithoutLength('x')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(new BytesWithoutLength('y'));\n    } else {\n      this.addSubType(\n        new BytesWithLength('x', 2, 'x_length', 'Length of X value')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(\n        new BytesWithLength('y', 2, 'y_length', 'Length of Y value')\n          .description('The X value of the public key.')\n      );\n    }\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PublicKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PublicKeyType(decoded.x, decoded.y, decoded.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst PrivateKeyType = require('./../../../../src/Types/Keys/PrivateKey');\n\n/**\n * A coder for a private key.\n */\nclass PrivateKey extends CompositeType {\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'private_key');\n    this.addSubType(new Curve('curve'));\n    this.addSubType(new BytesWithLength('key', 2));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PrivateKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PrivateKeyType(decoded.key, decoded.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {PrivateKeyType} value\n   * @returns {PrivateKeyType}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNameType = require('./../../Types/AccountName');\nconst StringWithLength = require('../Core/StringWithLength');\n\n/**\n * A pascal related type that can de/encode an account name.\n */\nclass AccountName extends StringWithLength {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null, byteSize = 2) {\n    super(id || 'account_name', byteSize);\n    this.description('An account name');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNameType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNameType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNameType} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.toString());\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Int64 = require('./../Core/Int64');\nconst CurrencyType = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends Int64 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'currency', true, Endian.LITTLE_ENDIAN);\n    this.description('A type for currency values.');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurrencyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return CurrencyType.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurrencyType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.bn);\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_INT_TYPE = Symbol('int_type');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize) {\n    super(id || `optype_int${byteSize * 8}`);\n    switch (byteSize) {\n      case 1:\n        this[P_INT_TYPE] = new Int8('OpType[Int8]', true);\n        break;\n      case 2:\n        this[P_INT_TYPE] = new Int16('OpType[Int16]', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_INT_TYPE] = new Int32('OpType[Int32]', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n    this.description(`Operation type in ${byteSize * 8} bits`);\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_INT_TYPE].encodedSize;\n  }\n\n  /**\n   * Decodes and returns the optype.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Number}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return this[P_INT_TYPE].decodeFromBytes(bc);\n  }\n\n  /**\n   * Encodes the given optype to bytes.\n   *\n   * @param {Number} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    return this[P_INT_TYPE].encodeToBytes(value);\n  }\n}\n\nmodule.exports = OpType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst CompositeType = require('./../CompositeType');\nconst Int32 = require('./../Core/Int32');\nconst AccountNumber = require('./AccountNumber');\nconst BytesWithoutLength = require('./../Core/BytesWithoutLength');\nconst NOperation = require('./NOperation');\nconst OperationHashType = require('./../../Types/OperationHash');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass OperationHash extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'ophash');\n    this.description('A pascalCoin operation hash');\n\n    this.addSubType(new Int32('block', true, Endian.LITTLE_ENDIAN));\n    this.addSubType(new AccountNumber('account'));\n    this.addSubType(new NOperation('nOperation', 4));\n    this.addSubType(new BytesWithoutLength('md160'));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {OperationHash}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new OperationHashType(decoded.block, decoded.account, decoded.nOperation, decoded.md160);\n  }\n\n  /**\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {OperationHash} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = OperationHash;\n","module.exports = {\n  Encryption: {\n    Abstract: require('./src/Encryption/Abstract'),\n    ECDH: require('./src/Encryption/ECDH'),\n    AES: {\n      CBCPKCS7: require('./src/Encryption/AES/CBCPKCS7'),\n      CBCZeroPadding: require('./src/Encryption/AES/CBCZeroPadding')\n    },\n    Pascal: {\n      KDF: require('./src/Encryption/Pascal/KDF'),\n      ECIES: require('./src/Encryption/Pascal/ECIES'),\n      Password: require('./src/Encryption/Pascal/Password'),\n      PrivateKey: require('./src/Encryption/Pascal/PrivateKey')\n    }\n  },\n  Keys: require('./src/Keys'),\n  mipher: {\n    AES_CBC_ZeroPadding: require('./src/mipher/AES_CBC_ZeroPadding')\n  }\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief block cipher modes implementation\r\n// usage: var aes = new mipher.blockmode(new mipher.rijndael())\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ECB = /** @class */ (function () {\r\n    /**\r\n     * ECB ctor\r\n     * @param {Object} blockcipher The block cipher algorithm to use\r\n     */\r\n    function ECB(blockcipher) {\r\n        this.blockcipher = blockcipher;\r\n    }\r\n    /**\r\n     * ECB mode encryption\r\n     * This mode just passes the input to the output - unsecure, use just for testing!\r\n     * iv is unused\r\n     */\r\n    ECB.prototype.encrypt = function (key, pt, iv) {\r\n        return this.blockcipher.encrypt(key, pt);\r\n    };\r\n    /**\r\n     * ECB mode decryption\r\n     * This mode just passes the input to the output - unsecure, use just for testing!\r\n     * iv is unused\r\n     */\r\n    ECB.prototype.decrypt = function (key, ct, iv) {\r\n        return this.blockcipher.decrypt(key, ct);\r\n    };\r\n    return ECB;\r\n}());\r\nexports.ECB = ECB;\r\n//////////////////////////////////////////////////////////////////////////\r\nvar CBC = /** @class */ (function () {\r\n    /**\r\n     * CBC ctor\r\n     * @param {Object} blockcipher The block cipher algorithm to use\r\n     */\r\n    function CBC(blockcipher) {\r\n        this.blockcipher = blockcipher;\r\n    }\r\n    /**\r\n     * CBC mode encryption\r\n     */\r\n    CBC.prototype.encrypt = function (key, pt, iv) {\r\n        var bs = this.blockcipher.blockSize, ct = new Uint8Array(pt.length), et = new Uint8Array(bs);\r\n        // process first block\r\n        for (var f = 0; f < bs; f++) {\r\n            et[f] = pt[f] ^ (iv[f] || 0);\r\n        }\r\n        ct.set(this.blockcipher.encrypt(key, et), 0);\r\n        // process the other blocks\r\n        for (var b = 1, len = pt.length / bs; b < len; b++) {\r\n            for (var i = 0; i < bs; i++) {\r\n                et[i] = pt[i + (b * bs)] ^ ct[i + ((b - 1) * bs)];\r\n            }\r\n            ct.set(this.blockcipher.encrypt(key, et), b * bs);\r\n        }\r\n        return ct;\r\n    };\r\n    /**\r\n     * CBC mode decryption\r\n     */\r\n    CBC.prototype.decrypt = function (key, ct, iv) {\r\n        var bs = this.blockcipher.blockSize, pt = new Uint8Array(ct.length);\r\n        // process first block\r\n        pt.set(this.blockcipher.decrypt(key, ct.subarray(0, bs)), 0);\r\n        for (var i = 0, len = bs; i < len; i++) {\r\n            pt[i] = pt[i] ^ (iv[i] || 0);\r\n        }\r\n        // process other blocks\r\n        for (var b = 1, l = ct.length / bs; b < l; b++) {\r\n            pt.set(this.blockcipher.decrypt(key, ct.subarray(b * bs, (b + 1) * bs)), b * bs);\r\n            for (var i = 0; i < bs; i++) {\r\n                pt[i + (b * bs)] = pt[i + (b * bs)] ^ ct[i + ((b - 1) * bs)];\r\n            }\r\n        }\r\n        return pt;\r\n    };\r\n    return CBC;\r\n}());\r\nexports.CBC = CBC;\r\n//////////////////////////////////////////////////////////////////////////\r\nvar CTR = /** @class */ (function () {\r\n    /**\r\n     * CTR ctor\r\n     * @param {Object} blockcipher The block cipher algorithm to use\r\n     */\r\n    function CTR(blockcipher) {\r\n        this.blockcipher = blockcipher;\r\n        // init counter\r\n        this.ctr = new Uint8Array(this.blockcipher.blockSize);\r\n    }\r\n    /**\r\n     * CTR mode encryption\r\n     */\r\n    CTR.prototype.encrypt = function (key, pt, iv) {\r\n        var bs = this.blockcipher.blockSize, ct = new Uint8Array(pt.length);\r\n        this.ctr.set(iv || this.ctr);\r\n        // process blocks\r\n        for (var b = 0, len = pt.length / bs; b < len; b++) {\r\n            ct.set(this.blockcipher.encrypt(key, this.ctr), b * bs);\r\n            for (var i = 0; i < bs; i++) {\r\n                ct[i + (b * bs)] ^= pt[i + (b * bs)];\r\n            }\r\n            // increment the counter\r\n            this.ctr[0]++;\r\n            for (var i = 0; i < bs - 1; i++) {\r\n                if (this.ctr[i] === 0) {\r\n                    this.ctr[i + 1]++;\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n        return ct;\r\n    };\r\n    /**\r\n     * CTR mode decryption\r\n     */\r\n    CTR.prototype.decrypt = function (key, ct, iv) {\r\n        var bs = this.blockcipher.blockSize, pt = new Uint8Array(ct.length);\r\n        this.ctr.set(iv || this.ctr);\r\n        // process blocks\r\n        for (var b = 0, len = ct.length / bs; b < len; b++) {\r\n            pt.set(this.blockcipher.encrypt(key, this.ctr), b * bs);\r\n            for (var i = 0; i < bs; i++) {\r\n                pt[i + (b * bs)] ^= ct[i + (b * bs)];\r\n            }\r\n            // increment the counter\r\n            this.ctr[0]++;\r\n            for (var i = 0; i < bs - 1; i++) {\r\n                if (this.ctr[i] === 0) {\r\n                    this.ctr[i + 1]++;\r\n                }\r\n                else\r\n                    break;\r\n            }\r\n        }\r\n        return pt;\r\n    };\r\n    return CTR;\r\n}());\r\nexports.CTR = CTR;\r\n","'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n","module.exports = require(\"util\");","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w) {\n  var naf = [];\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n  while (k.cmpn(1) >= 0) {\n    var z;\n    if (k.isOdd()) {\n      var mod = k.andln(ws - 1);\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n    naf.push(z);\n\n    // Optimization, shift by word if possible\n    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;\n    for (var i = 1; i < shift; i++)\n      naf.push(0);\n    k.iushrn(shift);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n           this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n                                     bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n","var r;\n\nmodule.exports = function rand(len) {\n  if (!r)\n    r = new Rand(null);\n\n  return r.generate(len);\n};\n\nfunction Rand(rand) {\n  this.rand = rand;\n}\nmodule.exports.Rand = Rand;\n\nRand.prototype.generate = function generate(len) {\n  return this._rand(len);\n};\n\n// Emulate crypto API using randy\nRand.prototype._rand = function _rand(n) {\n  if (this.rand.getBytes)\n    return this.rand.getBytes(n);\n\n  var res = new Uint8Array(n);\n  for (var i = 0; i < res.length; i++)\n    res[i] = this.rand.getByte();\n  return res;\n};\n\nif (typeof self === 'object') {\n  if (self.crypto && self.crypto.getRandomValues) {\n    // Modern browsers\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n    // IE\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.msCrypto.getRandomValues(arr);\n      return arr;\n    };\n\n  // Safari's WebWorkers do not have `crypto`\n  } else if (typeof window === 'object') {\n    // Old junk\n    Rand.prototype._rand = function() {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker with no crypto support\n  try {\n    var crypto = require('crypto');\n    if (typeof crypto.randomBytes !== 'function')\n      throw new Error('Not supported');\n\n    Rand.prototype._rand = function _rand(n) {\n      return crypto.randomBytes(n);\n    };\n  } catch (e) {\n  }\n}\n","'use strict';\n\nvar BN = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\n      k++;\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n                                                       points,\n                                                       coeffs,\n                                                       len,\n                                                       jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b] /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n                          bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n","'use strict';\n\nvar curve = require('../curve');\nvar elliptic = require('../../elliptic');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar assert = elliptic.utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16)\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 }\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n  var npoints = this._endoWnafT1;\n  var ncoeffs = this._endoWnafT2;\n  for (var i = 0; i < points.length; i++) {\n    var split = this._endoSplit(coeffs[i]);\n    var p = points[i];\n    var beta = p._getBeta();\n\n    if (split.k1.negative) {\n      split.k1.ineg();\n      p = p.neg(true);\n    }\n    if (split.k2.negative) {\n      split.k2.ineg();\n      beta = beta.neg(true);\n    }\n\n    npoints[i * 2] = p;\n    npoints[i * 2 + 1] = beta;\n    ncoeffs[i * 2] = split.k1;\n    ncoeffs[i * 2 + 1] = split.k2;\n  }\n  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n  // Clean-up references to points and coefficients\n  for (var j = 0; j < i * 2; j++) {\n    npoints[j] = null;\n    ncoeffs[j] = null;\n  }\n  return res;\n};\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul)\n      }\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1)\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1)\n    }\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point))\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point))\n    }\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate)\n      }\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (var i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (var i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n","'use strict';\n\nvar curve = require('../curve');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n","'use strict';\n\nvar curve = require('../curve');\nvar elliptic = require('../../elliptic');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = curve.base;\n\nvar assert = elliptic.utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // E = a * C\n    var e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      var h = this.z.redSqr();\n      // J = F - 2 * H\n      var j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    var e = c.redAdd(d);\n    // H = (c * Z1)^2\n    var h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    var j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n                          this.y,\n                          this.z,\n                          this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar elliptic = require('../elliptic');\n\nvar assert = elliptic.utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new elliptic.curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new elliptic.curve.edwards(options);\n  else\n    this.curve = new elliptic.curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve\n      });\n      return curve;\n    }\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'\n  ]\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'\n  ]\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'\n  ]\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'\n  ]\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650'\n  ]\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9'\n  ]\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658'\n  ]\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3'\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15'\n    }\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre\n  ]\n});\n","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'\n      ]\n    ]\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'\n      ]\n    ]\n  }\n};\n","'use strict';\n\nvar hash = require('hash.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  var curve = elliptic.curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n               .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n","'use strict';\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar BN = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength)\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n","'use strict';\n\nvar BN = require('bn.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n","'use strict';\n\nvar BN = require('bn.js');\n\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n  }\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0 && (r[1] & 0x80)) {\n    r = r.slice(1);\n  }\n  if (s[0] === 0 && (s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst ECDH = require('./../ECDH');\nconst ECIESData = require('./ECIES/Data');\nconst ECIESCoding = require('./ECIES/Coding');\nconst CryptoJSEncHex = require('crypto-js/enc-hex');\nconst CryptoJSHmacMd5 = require('crypto-js/hmac-md5');\n\n/**\n * A class that can en-/decrypt payloads based on a public key / private key.\n */\nclass ECIES extends Abstract {\n  /**\n   * Decrypts the given encrypted value using the given key pair.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @param {Object} options\n   *\n   * @return {BC|false}\n   */\n  static decrypt(value, options = {keyPair: null}) {\n\n    let keyData = new ECIESCoding().decodeFromBytes(value);\n\n    const dec = ECDH.decrypt(\n      keyData.encryptedData, {\n        privateKey: options.keyPair.privateKey,\n        publicKey: keyData.publicKey,\n        origMsgLength: keyData.originalDataLength\n      }\n    );\n\n    const mac = BC.fromHex(CryptoJSHmacMd5(\n      CryptoJSEncHex.parse(keyData.encryptedData.toHex()),\n      CryptoJSEncHex.parse(dec.key.toHex())\n    ).toString());\n\n    // var mac5 = hmac3.update(keyData.encryptedData.toString(), 'utf8').digest('hex');\n\n    if (keyData.mac.equals(mac)) {\n      return dec.data;\n    }\n\n    throw new Error('Unable to decrypt value.');\n  }\n\n  /**\n   * Encrypts the given value using the given public key.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @param {Object} options\n   * @return {BC}\n   */\n  static encrypt(value, options = {publicKey: null}) {\n    value = BC.from(value);\n    const enc = ECDH.encrypt(value, options);\n\n    // TODO: this causes a big polyfill\n    const mac = BC.fromHex(CryptoJSHmacMd5(\n      CryptoJSEncHex.parse(enc.data.toHex()),\n      CryptoJSEncHex.parse(enc.key.toHex())\n    ).toString());\n\n    const originalDataLength = value.length;\n    const originalDataLengthIncPadLength = (originalDataLength % 16) === 0 ?\n      0 : 16 - (originalDataLength % 16);\n\n    let keyData = new ECIESData();\n\n    keyData.withPublicKey(enc.publicKey);\n    keyData.withMac(mac);\n    keyData.withEncryptedData(enc.data);\n    keyData.withOriginalDataLength(originalDataLength);\n    keyData.withOriginalDataLengthIncPadLength(originalDataLengthIncPadLength);\n\n    return new ECIESCoding().encodeToBytes(keyData);\n  }\n}\n\nmodule.exports = ECIES;\n","const Endian = require('@pascalcoin-sbx/common').Endian;\nconst CommonCoding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = require('@pascalcoin-sbx/common').Coding.CompositeType;\nconst Data = require('./Data');\n\nclass Coding extends CompositeType {\n  constructor() {\n    super('pascalcoin_ecies');\n    this.description('Coding for an pascalcoin encrypted ECIES message');\n\n    this.addSubType(new CommonCoding.Core.Int8('publicKeyLength', true));\n    this.addSubType(new CommonCoding.Core.Int8('macLength', true));\n    this.addSubType(new CommonCoding.Core.Int16('originalDataLength', true, Endian.LITTLE_ENDIAN));\n    this.addSubType(new CommonCoding.Core.Int16('originalDataLengthIncPadLength', true, Endian.LITTLE_ENDIAN));\n    this.addSubType(new CommonCoding.Decissive('publicKey', 'publicKeyLength', function (publicKeyLength) {\n      return new CommonCoding.Core.BytesFixedLength('publicKey', publicKeyLength);\n    }));\n    this.addSubType(new CommonCoding.Decissive('mac', 'macLength', function (macLength) {\n      return new CommonCoding.Core.BytesFixedLength('mac', macLength);\n    }));\n    this.addSubType(new CommonCoding.Core.BytesWithoutLength('encryptedData'));\n  }\n\n  /**\n   *\n   * @param bc\n   * @param options\n   * @param all\n   * @return {ECIESData}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let decoded = super.decodeFromBytes(bc, options, all);\n    let data = new Data();\n\n    data.withPublicKey(decoded.publicKey);\n    data.withOriginalDataLength(decoded.originalDataLength);\n    data.withOriginalDataLengthIncPadLength(decoded.originalDataLengthIncPadLength);\n    data.withMac(decoded.mac);\n    data.withEncryptedData(decoded.encryptedData);\n\n    return data;\n  }\n}\n\nmodule.exports = Coding;\n",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.enc.Hex;\n\n}));",";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./md5\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./md5\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.HmacMD5;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst mipherAES = require('mipher/dist/aes');\nconst mipherRandom = require('mipher/dist/random');\nconst KDF = require('./KDF');\n\n/**\n * A class that can en-/decrypt values just the way payloads are encrypted\n * using a password in pascalcoin.\n */\nclass Password extends Abstract {\n\n  /**\n   * Encrypts the given value with the given password the PascalCoin way.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @param {Object} options\n   * @return {BC}\n   */\n  static encrypt(value, options = {password: ''}) {\n    value = BC.from(value);\n    let aes = new mipherAES.AES_CBC_PKCS7();\n\n    const randomGenerator = new mipherRandom.Random();\n    const salt = new BC(Buffer.from(randomGenerator.get(8)));\n\n    // mocha sees an open setinterval and won't exit without this change\n    randomGenerator.stop();\n\n    const keyInfo = KDF.PascalCoin(options.password, salt);\n\n    return BC.concat(\n      BC.fromString('Salted__'),\n      salt,\n      new BC(aes.encrypt(keyInfo.key.buffer, value.buffer, keyInfo.iv.buffer))\n    );\n  }\n\n  /**\n   * Decrypts the given encrypted value with the given password the\n   * PascalCoin way.\n   *\n   * @param {Buffer|Uint8Array|BC|String} encrypted\n   * @param {Object} options\n   * @return {BC|false}\n   */\n  static decrypt(encrypted, options = {password: ''}) {\n    encrypted = BC.from(encrypted);\n    let aes = new mipherAES.AES_CBC_PKCS7();\n\n    const salt = encrypted.slice(8, 16);\n    const rest = encrypted.slice(16);\n\n    const keyInfo = KDF.PascalCoin(options.password, salt);\n\n    let result = aes.decrypt(keyInfo.key.buffer, rest.buffer, keyInfo.iv.buffer);\n\n    if (result.length === 0) {\n      throw new Error('Unable to decrypt value.');\n    }\n    return new BC(result);\n  }\n}\n\nmodule.exports = Password;\n","const Abstract = require('./../Abstract');\nconst KDF = require('./KDF');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst CBCPKCS7 = require('./../AES/CBCPKCS7');\n\nconst Random = require('mipher/dist/random');\nconst PrivateKeyCoder = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PrivateKey;\nconst privKeyCoder = new PrivateKeyCoder();\n\nclass PrivateKey extends Abstract {\n\n  /**\n   * Creates a new keypair from the given private key.\n   *\n   * @param {Buffer|Uint8Array|BC|String} encryptedPrivateKey\n   * @param {Buffer|Uint8Array|BC|String} password\n   * @returns {KeyPair}\n   */\n  static decrypt(value, options = {password: ''}) {\n\n    value = BC.from(value);\n    let password = BC.from(options.password, 'string');\n    let salt = value.slice(8, 16);\n    let key = KDF.PascalCoin(password, salt);\n\n    // decrypt\n    const encData = value.slice(16);\n\n    const privateKeyDecryptedAndEncoded = CBCPKCS7.decrypt(encData, key);\n\n    return privKeyCoder.decodeFromBytes(privateKeyDecryptedAndEncoded);\n  }\n\n  /**\n   * Creates a new keypair from the given private key.\n   *\n   * @param {PrivateKey} value\n   * @param {Buffer|Uint8Array|BC|String} password\n   * @returns {BC}\n   */\n  static encrypt(value, options = {password: ''}) {\n    let password = BC.from(options.password, 'string');\n    const privateKeyEncoded = privKeyCoder.encodeToBytes(value);\n\n    const randomGenerator = new Random.Random();\n    const salt = new BC(Buffer.from(randomGenerator.get(8)));\n\n    // mocha sees an open setinterval and won't exit without this change\n    randomGenerator.stop();\n\n    const keyInfo = KDF.PascalCoin(password, salt);\n\n    const privateKeyEncrypted = CBCPKCS7.encrypt(privateKeyEncoded, keyInfo);\n\n    return BC.concat(BC.fromString('Salted__'), salt, privateKeyEncrypted);\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst elliptic = require('elliptic/lib/elliptic/ec/index');\n\nconst Curve = require('@pascalcoin-sbx/common').Types.Keys.Curve;\nconst PrivateKey = require('@pascalcoin-sbx/common').Types.Keys.PrivateKey;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst KeyPair = require('@pascalcoin-sbx/common').Types.Keys.KeyPair;\nconst BC = require('@pascalcoin-sbx/common').BC;\n\n/**\n * Handles cryptographic keys.\n */\nclass Keys {\n  /**\n   * Generates a new keypair from the given curve.\n   *\n   * @param {Curve} curve\n   * @returns {KeyPair}\n   */\n  static generate(curve) {\n    if (curve === undefined) {\n      // eslint-disable-next-line no-param-reassign\n      curve = Curve.getDefaultCurve();\n    } else if (!(curve instanceof Curve)) {\n      // eslint-disable-next-line no-param-reassign\n      curve = new Curve(curve);\n    }\n\n    if (curve.supported === false) {\n      throw new Error('Unsupported curve: ' + curve.name);\n    }\n\n    // TODO: entropy?\n    // eslint-disable-next-line new-cap\n    const kp = new elliptic(curve.name).genKeyPair();\n\n    return new KeyPair(\n      new PrivateKey(\n        new BC(kp.getPrivate().toArray()),\n        curve\n      ),\n      new PublicKey(\n        new BC(kp.getPublic().getX().toArray()),\n        new BC(kp.getPublic().getY().toArray()),\n        curve)\n    );\n  }\n\n  /**\n   * Creates a new keypair from the given private key.\n   *\n   * @param {PrivateKey} privateKey\n   * @returns {KeyPair}\n   */\n  static fromPrivateKey(privateKey) {\n\n    if (privateKey.curve.supported === false) {\n      throw new Error('Unsupported curve: ' + privateKey.curve.name);\n    }\n\n    const kp = elliptic(privateKey.curve.name).keyFromPrivate(privateKey.key.buffer);\n\n    if (!privateKey.key.equals(new BC(kp.getPrivate().toArray()))) {\n      throw new Error('Something went wrong, the imported private key does not equal the elliptic one');\n    }\n\n    return new KeyPair(\n      privateKey,\n      new PublicKey(\n        new BC(kp.getPublic().getX().toArray()),\n        new BC(kp.getPublic().getY().toArray()),\n        privateKey.curve)\n    );\n  }\n\n  /**\n   *\n   * @param keyPair\n   * @param digest\n   * @returns {{r: BC, s: BC}}\n   */\n  static sign(keyPair, digest) {\n    // create an ecpair\n    const ecPair = elliptic(keyPair.curve.name).keyFromPrivate(keyPair.privateKey.key.buffer);\n\n    const signature = ecPair.sign(digest.buffer, ecPair.getPrivate('hex'), 'hex', {\n      canonical: false\n    });\n\n    // Verify signature\n    if (ecPair.verify(digest.buffer, signature.toDER()) === false) {\n      throw Error('Unable to verify the sign result.');\n    }\n\n    return {\n      s: new BC(Buffer.from(signature.s.toArray())),\n      r: new BC(Buffer.from(signature.r.toArray()))\n    };\n  }\n\n}\n\nmodule.exports = Keys;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeKey Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_op_digest');\n    this.description('Digest encoder for a ChangeKey operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(2)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeKey Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_signed_op_digest');\n    this.description('Digest encoder for a ChangeKeySigned operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that should be changed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(7)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Signed Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeAccountInfo Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_info_op_digest');\n    this.description('Digest encoder for a ChangeAccountInfo operation.');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(8)\n        .description('The change account info optype as 8 bit int8')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Account Info Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a DATA Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_op_digest');\n    this.description('Digest encoder for a DATA operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated with the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(10)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Data Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a Transaction Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('tx_op_digest');\n    this.description('Digest encoder for a Transaction operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .description('Operation type.')\n        .withFixedValue(1)\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Transaction Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a List Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('list_op_digest');\n    this.description('Digest encoder for a List operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.StringWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(4)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'List Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a Delist Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('delist_op_digest');\n    this.description('Digest encoder for a Delist operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be de-listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock')\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(5)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Delist Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a BuyAccount Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('buy_op_digest');\n    super.description('Digest encoder for a BuyAccount operation.');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount paid for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey', true)\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(6)\n        .description('The buy account optype as 8 bit int8')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst Sender = require('./Sender');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('multiop_sender_raw');\n    this.description('The coder for the raw representation of a MultiOperation.Sender');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('account')\n        .description('The account of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount sent by the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'MultiOperation.Sender (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Sender.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const sender = new Sender(\n      decoded.account,\n      decoded.amount\n    );\n\n    sender.withPayload(decoded.payload);\n    sender.withNOperation(decoded.nOperation);\n    sender.withSign(decoded.r, decoded.s);\n\n    return sender;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The raw coder for a MultiOperation.Changer operation.\n */\nclass RawAndDigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('multiop_changer_raw');\n    this.description('The coder for the raw representation of a MultiOperation.Changer');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('account')\n        .description('The account of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'MultiOperation.Changer (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n}\n\nmodule.exports = RawAndDigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst MultiOperation = require('./Operation');\nconst Sender = require('./Sender/Sender');\nconst Receiver = require('./Receiver/Receiver');\nconst Changer = require('./Changer/Changer');\nconst SenderDigestCoder = require('./Sender/DigestCoder');\nconst ChangerDigestCoder = require('./Changer/DigestCoder');\nconst ReceiverCoder = require('./Receiver/RawAndDigestCoder');\n\n/**\n * The digest coder for a Multi operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('multi_op_digest');\n    this.description('The coder for the digest representation of a MultiOperation');\n    this.addSubType(\n      new Coding.Core.Int16('protocol')\n        .description('The protocol version (3).')\n        .withFixedValue(3)\n    );\n    this.addSubType(\n      new Coding.Core.Int16('sendersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of senders')\n    );\n    this.addSubType(\n      new Coding.Repeating('senders', new SenderDigestCoder())\n        .description('Senders of the multi-operation')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('receiversCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of receivers')\n    );\n    this.addSubType(\n      new Coding.Repeating('receivers', new ReceiverCoder())\n        .description('Receivers of the multi-operation')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('changersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of changers')\n    );\n    this.addSubType(\n      new Coding.Repeating('changers', new ChangerDigestCoder())\n        .description('Changers of the multi-operation')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(9)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'MultiOperation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded MultiOperation operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {MultiOperation}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new MultiOperation();\n\n    decoded.senders.forEach((sender) => {\n      let senderObj = new Sender(sender.account, sender.amount);\n\n      senderObj.withNOperation(sender.nOperation);\n      senderObj.withPayload(sender.payload);\n      op.addSender(senderObj);\n    });\n\n    decoded.receivers.forEach((receiver) => {\n      let receiverObj = new Receiver(receiver.account, receiver.payload);\n\n      op.addReceiver(receiverObj);\n    });\n\n    decoded.changers.forEach((changer) => {\n      let changerObj = new Changer(changer.account);\n\n      changerObj.withNOperation(changer.nOperation);\n      if ((changer.changeType & 1) === 1) {\n        changerObj.withNewPublicKey(changer.newPublicKey);\n      }\n      if ((changer.changeType & 2) === 2) {\n        changerObj.withNewName(changer.newName);\n      }\n      if ((changer.changeType & 4) === 4) {\n        changerObj.withNewType(changer.newType);\n      }\n      op.addChanger(changerObj);\n    });\n\n    return op;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('multiop_sender_digest');\n    this.description('The coder for the digest representation of a MultiOperation.Sender');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('account')\n        .description('The account of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount sent by the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'MultiOperation.Sender (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('multiop_changer_digest');\n    this.description('The coder for the digest representation of a MultiOperation.Changer');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('account')\n        .description('The account of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName', 2)\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'MultiOperation.Changer (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Signer = require('./Signer');\nconst OperationListCoder = require('./RawOperationsCoder');\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_CODER = Symbol('coder');\nconst P_SIGNER = Symbol('signer');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass RawOperations {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n    this[P_CODER] = new OperationListCoder();\n    this[P_SIGNER] = new Signer();\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {RawOperations}\n   */\n  addMultiOperation(operation, keyPairs = null) {\n    if (keyPairs !== null) {\n      this[P_SIGNER].signMultiOperation(operation, keyPairs);\n    }\n    this[P_OPERATIONS].push({\n      optype: operation.opType,\n      operation: operation\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {RawOperations}\n   */\n  addOperation(keyPair, operation) {\n    if (!operation.isSigned) {\n      let sign = this[P_SIGNER].sign(keyPair, operation);\n\n      operation.withSign(sign.r, sign.s);\n    }\n    this[P_OPERATIONS].push({\n      optype: operation.opType,\n      operation: operation\n    });\n    return this;\n  }\n\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  get count() {\n    return this[P_OPERATIONS].length;\n  }\n}\n\nmodule.exports = RawOperations;\n"],"sourceRoot":""}