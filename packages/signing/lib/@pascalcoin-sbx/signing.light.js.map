{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/./src/Coding/PublicKeyWithLength.js","webpack://@pascalcoin-sbx/signing/./src/Coding/StringWithoutLength.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/OperationsBuilder.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/crypto\""],"names":["module","exports","OperationsBuilder","require","Signer","Coding","PublicKeyWithLength","StringWithoutLength","Operations","BC","Currency","Types","PascalCoinInfo","P_PAYLOAD","Symbol","P_S","P_R","P_FEE","P_N_OPERATION","P_RAW_CODER","P_DIGEST_CODER","Abstract","constructor","digestCoder","rawCoder","fromString","withPayload","payload","withFee","fee","withMinFee","lastKnownBlock","MIN_FEE","digest","encodeToBytes","sign","keyPair","nOperation","useDigest","signResult","signWithDigest","signWithHash","r","s","toRaw","raw","toRawDebug","fromRaw","Error","bcFromInt","value","size","fromInt","switchEndian","bcFromStringWithSize","concat","length","bcFromString","bcFromBcWithSize","readBCWithSize","offset","data","slice","toInt","bcFromSign","isSigned","PublicKey","Pascal","Keys","VariableString","Core","PascalPublicKey","publicKeyCoding","id","decodeFromBytes","bc","pubKey","parsed","x","y","curve","AbstractType","P_SIZE","from","AccountNumber","P_SENDER","P_TARGET","P_AMOUNT","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","P_NEW_PUBLIC_KEY","BuyAccount","OPTYPE","sender","target","amount","price","seller","newPublicKey","account","toMolina","empty","encode","AccountName","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_NEW_NAME","P_NEW_TYPE","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","getChangeType","op","changeType","ChangeAccountInfo","accountSigner","accountTarget","withNewPublicKey","publicKey","withNewName","newName","withNewType","newType","toString","ChangeKey","ChangeKeySigned","Endian","CompositeType","DigestCoder","opType","addField","NOperation","Int16","LITTLE_ENDIAN","OpType","setFixedValue","RawCoder","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","Operation","signer","withDataType","dataType","parseInt","withDataSequence","dataSequence","withAmount","Curve","Int32","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","accountToPay","lockedUntilBlock","asPrivateSale","digest2","toRaw2","Data","Transaction","ListAccountForSale","DeListAccountForSale","P_OPERATIONS","addOperation","operation","push","build","forEach","parse","Sha","hash","sha256"],"mappings":"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","file":"@pascalcoin-sbx/signing.light.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [\"@pascalcoin-sbx/common\", \"@pascalcoin-sbx/crypto\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory(root[\"@pascalcoin-sbx/common\"], root[\"@pascalcoin-sbx/crypto\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_common__, __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_crypto__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = {\n  OperationsBuilder: require('./src/OperationsBuilder'),\n  Signer: require('./src/Signer'),\n  Coding: {\n    PublicKeyWithLength: require('./src/Coding/PublicKeyWithLength'),\n    StringWithoutLength: require('./src/Coding/StringWithoutLength')\n  },\n  Operations: require('./src/Operations')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst Signer = require('./Signer');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst PascalCoinInfo = require('@pascalcoin-sbx/common').PascalCoinInfo;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_RAW_CODER = Symbol('raw_coder');\nconst P_DIGEST_CODER = Symbol('digest_coder');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n\n  /**\n   * Constructor.\n   *\n   * @param {CompositeType} digestCoder\n   * @param {CompositeType} rawCoder\n   */\n  constructor(digestCoder, rawCoder) {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n    this[P_DIGEST_CODER] = digestCoder;\n    this[P_RAW_CODER] = rawCoder;\n  }\n\n  /**\n     * Sets the payload of the transaction instance.\n     *\n     * @param {BC} payload\n     *\n     * @returns {Abstract}\n     */\n  withPayload(payload) {\n    this[P_PAYLOAD] = payload;\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee(lastKnownBlock = null) {\n    this[P_FEE] = PascalCoinInfo.MIN_FEE(lastKnownBlock);\n    return this;\n  }\n\n  /**\n     * Returns a BC with the digest that needs to be hashed.\n     *\n     * @return {BC}\n     */\n  digest() {\n    return this[P_DIGEST_CODER].encodeToBytes(this);\n  }\n\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, nOperation, useDigest = false) {\n    this[P_N_OPERATION] = nOperation;\n    const digest = this.digest();\n\n    let signResult;\n\n    if (useDigest === true) {\n      signResult = Signer.signWithDigest(keyPair, digest);\n    } else {\n      signResult = Signer.signWithHash(keyPair, digest);\n    }\n\n    // save results\n    this[P_R] = signResult.r;\n    this[P_S] = signResult.s;\n\n    return this;\n  }\n\n  /**\n   * Returns the BC for a rawoperations info.\n   *\n   * @return {BC}\n   */\n  toRaw() { // eslint-disable-line class-methods-use-this\n    const raw = this[P_RAW_CODER].encodeToBytes(this);\n\n    return raw;\n  }\n\n  /**\n   * Returns the BC for a rawoperations info.\n   *\n   * @return {BC}\n   */\n  toRawDebug() { // eslint-disable-line class-methods-use-this\n    return this[P_RAW_CODER].encodeToBytes(this, true);\n  }\n\n  /**\n     * Returns a new instance of the derived class based on the given raw\n     * string.\n     *\n     * @return {Abstract}\n     */\n  // eslint-disable-next-line class-methods-use-this\n  static fromRaw() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n     * Gets a BC from the given int value.\n     *\n     * @param {Number} value\n     * @param {Number|undefined} size\n     * @returns {BC}\n     */\n  // eslint-disable-next-line class-methods-use-this\n  bcFromInt(value, size = null) {\n    return (size === null ?\n      BC.fromInt(value) :\n      BC.fromInt(value, size)).switchEndian();\n  }\n\n  /**\n     * Gets the given string as a byte collection with the size of the string\n     * prepended.\n     *\n     * @param {String} value\n     * @returns {BC}\n     */\n  bcFromStringWithSize(value) {\n    return BC.concat(\n      this.bcFromInt(value.length, 2),\n      this.bcFromString(value),\n    );\n  }\n\n  /**\n   * Gets the given BC as a byte collection with the size of\n   * the BC prepended.\n   *\n   * @param {BC} value\n   * @returns {BC}\n   */\n  bcFromBcWithSize(value) {\n    return BC.concat(\n      this.bcFromInt(value.length, 2),\n      value,\n    );\n  }\n\n  /**\n   * Extracts a BC with size from the given BC.\n   *\n   * @param {BC} value\n   * @param {Number} offset\n   * @returns {BC}\n   */\n  static readBCWithSize(value, offset) {\n    const data = {\n      size: value.slice(offset, offset + 2).switchEndian().toInt()\n    };\n\n    data.value = value.slice(offset + 2, offset + 2 + data.size);\n    return data;\n  }\n\n  /**\n     * Gets the BC from the given string.\n     *\n     * @param {String} value\n     * @returns {BC}\n     */\n  bcFromString(value) { // eslint-disable-line class-methods-use-this\n    return BC.fromString(value);\n  }\n\n  /**\n     * Returns the BC for an r and s signing result.\n     *\n     * @param {BC} r\n     * @param {BC} s\n     * @returns {BC}\n     */\n  bcFromSign(r, s) {\n    return BC.concat(\n      this.bcFromBcWithSize(r),\n      this.bcFromBcWithSize(s),\n    );\n  }\n\n  /**\n     * Gets the prepared payload.\n     *\n     * @returns {BC}\n     */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n     * Gets the r value of the sign result.\n     *\n     * @returns {BC|null}\n     */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n     * Gets the s value of the sign result.\n     *\n     * @returns {BC|null}\n     */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n     * Gets the fee.\n     *\n     * @returns {Currency}\n     */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n     * Gets the n operation.\n     *\n     * @returns {Number}\n     */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n}\n\nmodule.exports = Abstract;\n","const PublicKey = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PublicKey;\nconst VariableString = require('@pascalcoin-sbx/common').Coding.Core.VariableString;\nconst PascalPublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst publicKeyCoding = new PublicKey();\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKeyWithLength extends VariableString {\n\n  constructor(id = null) {\n    super(id || 'pubkey');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc) {\n    const pubKey = super.decodeFromBytes(bc);\n    const parsed = publicKeyCoding.decodeFromBytes(pubKey);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {*} value\n   * @returns {PascalPublicKey}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(publicKeyCoding.encodeToBytes(value));\n  }\n}\n\nmodule.exports = PublicKeyWithLength;\n","const AbstractType = require('@pascalcoin-sbx/common').Coding.AbstractType;\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Reads the string from the BC.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    return bc;\n  }\n\n  /**\n   * Appends the string to the BC.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE] = BC.from(value).length;\n    return BC.from(value);\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return this[P_SIZE];\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this.bcFromInt(this[P_ACCOUNT_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_SELLER_ACCOUNT].account, 4),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      BC.fromInt(BuyAccount.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the signed raw operations.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(BuyAccount.OPTYPE, 4),\n      this.bcFromInt(this[P_SENDER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_TARGET].account, 4),\n      this.bcFromInt(this[P_AMOUNT].toMolina(), 8),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(2, 1), // buy account\n      this.bcFromInt(this[P_ACCOUNT_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_SELLER_ACCOUNT].account, 4),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n\n  /**\n   * Gets a new Operation object from the given signed operation.\n   *\n   * @param {BC|Buffer|String|Uint8Array} raw\n   * @returns {BC}\n   */\n  static fromRaw(raw) {\n    /*\n    raw = BC.from(raw);\n    const sender = raw.slice(4, 8).switchEndian().toInt();\n    const target = raw.slice(12, 16).switchEndian().toInt();\n    const amount = raw.slice(16, 24).switchEndian().toInt();\n    const fee = raw.slice(24, 32).switchEndian().toInt();\n    const payload = Abstract.readBCWithSize(raw, 32).value;\n    const publicKey = Abstract.readBCWithSize(raw, 34 + payload.length).value;\n    const price = raw.slice(36 + payload.length + publicKey.length, 8).switchEndian().toInt();\n    const seller = raw.slice(44 + payload.length + publicKey.length, 4).switchEndian().toInt();\n    const newPublicKey = Abstract.readBCWithSize(raw, 48 + payload.length + publicKey.length).value;\n\n    const op = new BuyAccount(sender, target, amount, price, seller, newPublicKey);\n\n    //op.withFee(dataType, dataSequence, amount);\n    //op.withFee(fee);\n    //op.withPayload(payload);\n\n    return op;*/\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * Gets the change type of the op.\n *\n * @param {ChangeAccountInfo} op\n * @returns {number}\n */\nfunction getChangeType(op) {\n  let changeType = 0;\n\n  if (op[P_WITH_NEW_PUBKEY] === true) {\n    changeType |= 1;\n  }\n  if (op[P_WITH_NEW_NAME] === true) {\n    changeType |= 2;\n  }\n  if (op[P_WITH_NEW_TYPE] === true) {\n    changeType |= 4;\n  }\n\n  return changeType;\n}\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 8;\n  }\n\n  /**\n     * Constructor.\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  /**\n     * Will set the new public key.\n     *\n     * @param {PublicKey} publicKey\n     * @returns {ChangeAccountInfo}\n     */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(getChangeType(this)),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromBcWithSize(BC.fromString(this[P_NEW_NAME].toString())),\n      this.bcFromInt(this[P_NEW_TYPE], 2),\n      this.bcFromInt(ChangeAccountInfo.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeAccountInfo.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(), // v2\n      this.bcFromInt(getChangeType(this)),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromBcWithSize(BC.fromString(this[P_NEW_NAME].toString())),\n      this.bcFromInt(this[P_NEW_TYPE], 2),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKey extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 2;\n  }\n\n  /**\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {PublicKey} newPublicKey\n     */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKey.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKey.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 7;\n  }\n\n  /**\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKeySigned.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the raw implementation.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKeySigned.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Data ops are signed with the digest, not the hash of the digest.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   */\n  sign(keyPair, nOperation) {\n    super.sign(keyPair, nOperation, true);\n  }\n}\n\nmodule.exports = Operation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst StringWithoutLength = require('./../../Coding/StringWithoutLength');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('price'));\n    this.addField(new Coding.Pascal.AccountNumber('accountToPay'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new StringWithoutLength('payload'));\n    this.addField(new Coding.Pascal.Keys.Curve('v2_pubkey_curve').setFixedValue(PublicKey.empty().curve));\n    this.addField(new Coding.Pascal.Keys.PublicKey('newPublicKey'));\n    this.addField(new Coding.Core.Int32('lockedUntilBlock'));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 5;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n}\n\nmodule.exports = Operation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.OpType(2).setFixedValue(opType));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst StringWithoutLength = require('./../../Coding/StringWithoutLength');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('price'));\n    this.addField(new Coding.Pascal.AccountNumber('accountToPay'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new StringWithoutLength('payload'));\n    this.addField(new Coding.Pascal.Keys.Curve('v2_pubkey_curve').setFixedValue(PublicKey.empty().curve));\n    this.addField(new Coding.Pascal.Keys.PublicKey('newPublicKey'));\n    this.addField(new Coding.Core.Int32('lockedUntilBlock'));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 4;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   * @param price\n   * @param accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest2() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_ACCOUNT_TO_PAY].account, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      // this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(this[P_LOCKED_UNTIL_BLOCK], 4),\n      this.bcFromInt(Operation.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw2() {\n    return BC.concat(\n      this.bcFromInt(Operation.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(4, 2), // list account for sale\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this[P_PRICE].toMolina(), 8),\n      this.bcFromInt(this[P_ACCOUNT_TO_PAY].account, 4),\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this.bcFromInt(0, 2), // x length\n      this.bcFromInt(0, 2), // y length\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(this[P_LOCKED_UNTIL_BLOCK], 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = Operation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('list_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('signer'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.OpType(2).setFixedValue(opType));\n    this.addField(new Coding.Pascal.NOperation());\n    this.addField(new Coding.Pascal.Currency('price'));\n    this.addField(new Coding.Pascal.AccountNumber('accountToPay'));\n    this.addField(new Coding.Pascal.Keys.PublicKey('v2_pubkey').setFixedValue(PublicKey.empty()));\n    this.addField(new PublicKeyWithLength('newPublicKey'));\n    this.addField(new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst StringWithoutLength = require('./../../Coding/StringWithoutLength');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('tx_operation_digest');\n    // config for digest creation\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.NOperation('nOperation'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new StringWithoutLength('payload'));\n    this.addField(new Coding.Pascal.Keys.Curve('v2_pubkey_curve').setFixedValue(PublicKey.empty().curve));\n    this.addField(new Coding.Pascal.OpType(1).setFixedValue(opType));\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst RawCoder = require('./RawCoder');\nconst DigestCoder = require('./DigestCoder');\n\nconst P_ACCOUNT_SENDER = Symbol('sender');\nconst P_ACCOUNT_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A transaction object that can be signed.\n */\nclass Operation extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 1;\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n     * Creates a new Transaction instance with the given data. The payload is\n     * empty by default and not encoded.\n     *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super(new DigestCoder(Operation.OPTYPE), new RawCoder(Operation.OPTYPE));\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n}\n\nmodule.exports = Operation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_raw');\n    this.addField(new Coding.Pascal.OpType(4).setFixedValue(opType));\n    this.addField(new Coding.Pascal.AccountNumber('sender'));\n    this.addField(new Coding.Pascal.NOperation('nOperation'));\n    this.addField(new Coding.Pascal.AccountNumber('target'));\n    this.addField(new Coding.Pascal.Currency('amount'));\n    this.addField(new Coding.Pascal.Currency('fee'));\n    this.addField(new Coding.Core.VariableString('payload'));\n    this.addField(new Coding.Pascal.Keys.PublicKey('v2_pubkey').setFixedValue(PublicKey.empty()));\n    this.addField(new Coding.Core.VariableString('r'));\n    this.addField(new Coding.Core.VariableString('s'));\n  }\n}\n\nmodule.exports = RawCoder;\n","module.exports = {\n  BuyAccount: require('./BuyAccount'),\n  ChangeAccountInfo: require('./ChangeAccountInfo'),\n  ChangeKey: require('./ChangeKey'),\n  ChangeKeySigned: require('./ChangeKeySigned'),\n  Data: {\n    Operation: require('./Data/Operation'),\n    RawCoder: require('./Data/RawCoder'),\n    DigestCoder: require('./Data/DigestCoder')\n  },\n  Transaction: {\n    Operation: require('./Transaction/Operation'),\n    RawCoder: require('./Transaction/RawCoder'),\n    DigestCoder: require('./Transaction/DigestCoder')\n  },\n  ListAccountForSale: {\n    Operation: require('./ListAccountForSale/Operation'),\n    RawCoder: require('./ListAccountForSale/RawCoder'),\n    DigestCoder: require('./ListAccountForSale/DigestCoder')\n  },\n  DeListAccountForSale: {\n    Operation: require('./DeListAccountForSale/Operation'),\n    RawCoder: require('./DeListAccountForSale/RawCoder'),\n    DigestCoder: require('./DeListAccountForSale/DigestCoder')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('@pascalcoin-sbx/common').BC;\n\nconst P_OPERATIONS = Symbol('operations');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass OperationsBuilder {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {OperationsBuilder}\n   */\n  addOperation(operation) {\n    if (!operation.isSigned) {\n      throw new Error('Operation needs to be signed.');\n    }\n\n    this[P_OPERATIONS].push(operation);\n    return this;\n  }\n\n  /**\n   * Builds the operations.\n   *\n   * @returns {BC}\n   */\n  build() {\n    let bc = BC.fromInt(this[P_OPERATIONS].length, 4).switchEndian();\n\n    this[P_OPERATIONS].forEach((op) => {\n      bc = BC.concat(bc, op.toRaw());\n    });\n\n    return bc;\n  }\n\n  parse(raw) {\n\n    // let numOperations = raw.slice(0, 3);\n    let bc = BC.fromInt(this[P_OPERATIONS].length, 4).switchEndian();\n\n    this[P_OPERATIONS].forEach((op) => {\n      bc = BC.concat(bc, op.toRaw());\n    });\n\n    return bc;\n  }\n}\n\nmodule.exports = OperationsBuilder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\n\nclass Signer {\n  /**\n   * Signs the given digest with the given keypair and returns the r and s\n   * values (because thats all that is needed).\n   *\n   * @param {KeyPair} keyPair\n   * @param {BC} digest\n   */\n  static signWithHash(keyPair, digest) {\n    const hash = Sha.sha256(digest);\n\n    return Keys.sign(keyPair, hash);\n  }\n\n  static signWithDigest(keyPair, digest) {\n    return Keys.sign(keyPair, digest);\n  }\n}\n\nmodule.exports = Signer;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_common__;","module.exports = __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_crypto__;"],"sourceRoot":""}