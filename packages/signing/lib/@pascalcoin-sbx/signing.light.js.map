{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/./src/Coding/PublicKeyWithLength.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/RawAndDigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Receiver/Receiver.js","webpack://@pascalcoin-sbx/signing/./src/Operations/MultiOperation/Sender/Sender.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/RawOperations.js","webpack://@pascalcoin-sbx/signing/./src/RawOperationsCoder.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/crypto\""],"names":["module","exports","Signer","require","RawOperations","RawOperationsCoder","Coding","PublicKeyWithLength","Operations","BC","Currency","Types","PascalCoinInfo","P_PAYLOAD","Symbol","P_S","P_R","P_FEE","P_N_OPERATION","Abstract","constructor","fromString","withPayload","payload","withFee","fee","withMinFee","lastKnownBlock","MIN_FEE","withNOperation","nOperation","withSign","r","s","isSigned","usesDigestToSign","PublicKey","Pascal","Keys","BytesWithLength","Core","PascalPublicKey","publicKeyCoding","id","decodeFromBytes","bc","options","all","pubKey","parsed","x","y","curve","encodeToBytes","value","CompositeType","DigestCoder","description","addSubType","AccountNumber","NOperation","BytesWithoutLength","Curve","withFixedValue","empty","OpType","typeInfo","info","name","hierarchy","push","canDecode","P_SENDER","P_TARGET","P_AMOUNT","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","P_NEW_PUBLIC_KEY","BuyAccount","opType","sender","target","amount","price","seller","newPublicKey","Endian","RawCoder","Int8","LITTLE_ENDIAN","decoded","op","AccountName","Int16","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_NEW_NAME","P_NEW_TYPE","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","ChangeAccountInfo","accountSigner","accountTarget","signer","newName","newType","changeType","withNewPublicKey","publicKey","withNewName","withNewType","type","P_SIGNER","ChangeKey","ChangeKeySigned","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","Data","withDataType","dataType","parseInt","withDataSequence","dataSequence","withAmount","Int32","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","DeListAccountForSale","accountToPay","lockedUntilBlock","DeList","StringWithoutLength","ListAccountForSale","asPrivateSale","ListOperation","Receiver","Sender","P_OPERATIONS","P_CHANGERS","P_SENDERS","P_RECEIVERS","P_RECEIVERS_UQ","P_KEYPAIRS","MultiOperation","addTransaction","keyPair","operation","receiverPayload","undefined","addAmount","receiver","uq","toHex","toStringOpt","Error","senders","Object","values","sendersCount","length","receivers","receiversCount","changers","changersCount","RawAndDigestCoder","Repeating","P_ACCOUNT","account","add","Transaction","Items","Operation","digestCoderFor","OperationListCoder","P_CODER","addOperation","sign","optype","operations","count","TransactionRawCoder","DataRawCoder","ListRawCoder","DeListRawCoder","BuyRawCoder","ChangeKeyRawCoder","ChangeKeySignedRawCoder","ChangeAccountInfoRawCoder","MultiOperationRawCoder","operationType","Decissive","markerValue","Sha","signWithHash","digest","hash","sha256","signWithDigest","signResult","signMultiOperation"],"mappings":"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","file":"@pascalcoin-sbx/signing.light.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [\"@pascalcoin-sbx/common\", \"@pascalcoin-sbx/crypto\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory(root[\"@pascalcoin-sbx/common\"], root[\"@pascalcoin-sbx/crypto\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_common__, __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_crypto__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = {\n  Signer: require('./src/Signer'),\n  RawOperations: require('./src/RawOperations'),\n  RawOperationsCoder: require('./src/RawOperationsCoder'),\n  Coding: {\n    PublicKeyWithLength: require('./src/Coding/PublicKeyWithLength')\n  },\n  Operations: require('./src/Operations')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst PascalCoinInfo = require('@pascalcoin-sbx/common').PascalCoinInfo;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n  }\n\n  /**\n   * Sets the payload of the transaction instance.\n   *\n   * @param {BC} payload\n   *\n   * @returns {Abstract}\n   */\n  withPayload(payload) {\n    this[P_PAYLOAD] = payload;\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee(lastKnownBlock = null) {\n    this[P_FEE] = PascalCoinInfo.MIN_FEE(lastKnownBlock);\n    return this;\n  }\n\n  withNOperation(nOperation) {\n    this[P_N_OPERATION] = nOperation;\n    return this;\n  }\n\n  withSign(r, s) {\n    this[P_R] = r;\n    this[P_S] = s;\n  }\n\n  /**\n   * Gets the prepared payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the r value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n   * Gets the s value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n   * Gets the fee.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the n operation.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n\n  usesDigestToSign() {\n    return false;\n  }\n\n}\n\nmodule.exports = Abstract;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PublicKey;\nconst BytesWithLength = require('@pascalcoin-sbx/common').Coding.Core.BytesWithLength;\nconst PascalPublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst publicKeyCoding = new PublicKey();\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKeyWithLength extends BytesWithLength {\n\n  constructor(id = null) {\n    super(id || 'pubkey', 2);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const pubKey = super.decodeFromBytes(bc);\n    const parsed = publicKeyCoding.decodeFromBytes(pubKey);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {*} value\n   * @returns {PascalPublicKey}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(publicKeyCoding.encodeToBytes(value));\n  }\n}\n\nmodule.exports = PublicKeyWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a BuyAccount Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('buy_op_digest');\n    super.description('Digest encoder for a BuyAccount operation.');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount paid for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey', true)\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(6)\n        .description('The buy account optype as 8 bit int8')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable BuyAccount operation.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the buyer account.\n   *\n   * @return {AccountNumber}\n   */\n  get sender() {\n    return this[P_SENDER];\n  }\n\n  /**\n   * Gets the account to buy.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the amount to be transferred.\n   *\n   * @return {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the price of the account.\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_ACCOUNT_PRICE];\n  }\n\n  /**\n   * Gets the account of the seller.\n   *\n   * @return {AccountNumber}\n   */\n  get seller() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  /**\n   * Gets the new public key of the bought account.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst BuyAccount = require('./Operation');\n\n/**\n * The raw coder for a BuyAccount operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('buy_op_raw');\n    this.description('The coder for the raw representation of a BuyAccount operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount to pay for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('type', true, Endian.LITTLE_ENDIAN)\n        .description('Fixed type for a \"Buy account\" transaction.')\n        .withFixedValue(2)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key that will own the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded BuyAccount operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {BuyAccount}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new BuyAccount(\n      decoded.sender,\n      decoded.target,\n      decoded.amount,\n      decoded.price,\n      decoded.seller,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeAccountInfo Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_info_op_digest');\n    this.description('Digest encoder for a ChangeAccountInfo operation.');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(8)\n        .description('The change account info optype as 8 bit int8')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Account Info Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * Representation of a signable ChangeAccountInfo operation.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 8;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {Account|AccountNumber|Number|String} accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  /**\n   * Gets the signer account of the operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the target account to change.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the new public key of the target.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the new name of the target.\n   *\n   * @return {AccountName}\n   */\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  /**\n   * Gets the new type of the target account.\n   *\n   * @return {Number}\n   */\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the change type of the op.\n   *\n   * @returns {number}\n   */\n  get changeType() {\n    let changeType = 0;\n\n    if (this[P_WITH_NEW_PUBKEY] === true) {\n      changeType |= 1;\n    }\n    if (this[P_WITH_NEW_NAME] === true) {\n      changeType |= 2;\n    }\n    if (this[P_WITH_NEW_TYPE] === true) {\n      changeType |= 4;\n    }\n\n    return changeType;\n  }\n\n  /**\n   * Will set the new public key.\n   *\n   * @param {PublicKey} publicKey\n   * @returns {ChangeAccountInfo}\n   */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeAccountInfo = require('./Operation');\n\n/**\n * The raw coder for a ChangeAccountInfo operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_account_info_op_raw');\n    this.description('The coder for the raw representation of a ChangeAccountInfo operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Account Info Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeAccountInfo operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeAccountInfo}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeAccountInfo(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withNewType(decoded.type);\n    op.withNewName(decoded.name);\n    op.withNewPublicKey(decoded.newPublicKey);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeKey Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_op_digest');\n    this.description('Digest encoder for a ChangeKey operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(2)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SIGNER = Symbol('signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass ChangeKey extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 2;\n  }\n\n  /**\n   * Constructor.\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the account number of the signer and the account to be changed.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_SIGNER];\n  }\n\n  /**\n   * Gets the new public key of the account.\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeKey = require('./Operation');\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_op_raw');\n    this.description('The coder for the raw representation of a ChangeKey operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKey operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKey(\n      decoded.signer,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a ChangeKey Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_signed_op_digest');\n    this.description('Digest encoder for a ChangeKeySigned operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that should be changed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(7)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Signed Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SIGNER = Symbol('signer');\nconst P_TARGET = Symbol('target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * Representation of a signable ChangeKeySigned operation.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 7;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {Account|AccountNumber|Number|String} accountTarget\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_SIGNER] = new AccountNumber(accountSigner);\n    this[P_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the account number of the signer.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_SIGNER];\n  }\n\n  /**\n   * Gets the account number of the account to be changed.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the new public key of the target account.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst ChangeKeySigned = require('./Operation');\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_signed_op_raw');\n    this.description('The coder for the raw representation of a ChangeKeySigned operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to be changed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Signed Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKeySigned operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKeySigned(\n      decoded.signer,\n      decoded.target,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a DATA Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_op_digest');\n    this.description('Digest encoder for a DATA operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated with the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(10)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Data Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable DATA operation.\n */\nclass Data extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Forces the signer to use the digest instead of the hash of the digest\n   * to sign the operation.\n   *\n   * @return {boolean}\n   */\n  usesDigestToSign() {\n    return true;\n  }\n}\n\nmodule.exports = Data;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst Data = require('./Operation');\n\n/**\n * The raw coder for a DATA operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_operation_raw');\n    this.description('The coder for the raw representation of a Data operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Data Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Data operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Data}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Data(\n      decoded.signer,\n      decoded.sender,\n      decoded.target\n    );\n\n    op.withDataType(decoded.dataType);\n    op.withDataSequence(decoded.dataSequence);\n    op.withAmount(decoded.amount);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a Delist Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('delist_op_digest');\n    this.description('Digest encoder for a Delist operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be de-listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock')\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(5)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Delist Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * Representation of a signable Delist operation.\n */\nclass DeListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 5;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Number|AccountNumber} accountSigner\n   * @param {Number|AccountNumber} accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n\n  }\n\n  /**\n   * Gets the signer of the delist operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the account that should be delisted.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the price of the account (defaulted to 0).\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account that should have received the amount on sale (defaulted to 0)\n   *\n   * @return {Currency}\n   */\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  /**\n   * Gets the new public key in case of a private sale (defaulted to an empty pubkey).\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the value until when the account is locked (defaulted to 0).\n   *\n   * @return {Number}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n}\n\nmodule.exports = DeListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst DeList = require('./Operation');\n\n/**\n * The raw coder for a Delist operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('delist_operation_raw');\n    this.description('The coder for the raw representation of a Delist Account operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(5)\n        .description('The optype of the operation (5)')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Delist Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Delist operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Data}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new DeList(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a List Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('list_op_digest');\n    this.description('Digest encoder for a List operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.StringWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(4)\n        .description('The optype as 8bit int.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'List Account Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * Representation of a signable List operation.\n */\nclass ListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 4;\n  }\n\n  /**\n   * Constructor.\n   *\n   * @param {Number|AccountNumber} accountSigner\n   * @param {Number|AccountNumber} accountTarget\n   * @param {Currency} price\n   * @param {Number|AccountNumber} accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  /**\n   * Gets the signer of the list operation.\n   *\n   * @return {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the account that should be listed.\n   *\n   * @return {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the price of the listed account (target)\n   *\n   * @return {Currency}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account where the money should be send to on sale.\n   *\n   * @return {AccountNumber}\n   */\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  /**\n   * Gets the new public key in case its a private sale.\n   *\n   * @return {PublicKey}\n   */\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  /**\n   * Gets the block number until when the account is locked in case of a\n   * private sale.\n   *\n   * @return {Number}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n}\n\nmodule.exports = ListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\nconst CompositeType = Coding.CompositeType;\nconst ListOperation = require('./Operation');\n\n/**\n * The raw coder for a List operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('list_operation_raw');\n    this.description('The coder for the raw representation of a List Account operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(4)\n        .description('The optype of the operation (4)')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'List Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded List operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ListOperation}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ListOperation(\n      decoded.signer,\n      decoded.target,\n      decoded.price,\n      decoded.accountToPay\n    );\n\n    op.asPrivateSale(decoded.newPublicKey, decoded.lockedUntilBlock);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Receiver = require('./Receiver/Receiver');\nconst Sender = require('./Sender/Sender');\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_CHANGERS = Symbol('changers');\nconst P_SENDERS = Symbol('senders');\nconst P_RECEIVERS = Symbol('receivers');\nconst P_RECEIVERS_UQ = Symbol('receivers_uq');\nconst P_KEYPAIRS = Symbol('keypairs');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass MultiOperation extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 9;\n  }\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super();\n    this[P_OPERATIONS] = [];\n    this[P_SENDERS] = {};\n    this[P_RECEIVERS] = [];\n    this[P_CHANGERS] = {};\n    this[P_RECEIVERS_UQ] = {};\n    this[P_KEYPAIRS] = {};\n  }\n\n  addTransaction(keyPair, operation, receiverPayload = null) {\n    // transaction operation, first create a single sender\n    if (this[P_SENDERS][operation.sender] === undefined) {\n      let sender = new Sender(\n        operation.sender,\n        operation.amount\n      );\n\n      sender.withNOperation(operation.nOperation);\n      sender.withPayload(operation.payload);\n      this[P_SENDERS][operation.sender] = sender;\n    } else {\n      this[P_SENDERS][operation.sender].addAmount(operation.amount);\n    }\n    this[P_KEYPAIRS][operation.sender] = keyPair;\n\n    let receiver = new Receiver(\n      operation.target,\n      operation.amount\n    );\n\n    receiver.withPayload(receiverPayload || operation.payload);\n    const uq = receiver.payload.toHex() + receiver.amount.toStringOpt();\n\n    if (this[P_RECEIVERS_UQ][uq] !== undefined) {\n      throw new Error('Receivers must have unique amount and payload.');\n    }\n    this[P_RECEIVERS_UQ][uq] = uq;\n    this[P_RECEIVERS].push(receiver);\n  }\n\n  get senders() {\n    return Object.values(this[P_SENDERS]);\n  }\n  get sendersCount() {\n    return this.senders.length;\n  }\n\n  get receivers() {\n    return this[P_RECEIVERS];\n  }\n  get receiversCount() {\n    return this[P_RECEIVERS].length;\n  }\n\n  get changers() {\n    return Object.values(this[P_CHANGERS]);\n  }\n  get changersCount() {\n    return this.changers.length;\n  }\n}\n\nmodule.exports = MultiOperation;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst ChangeKey = require('./Operation');\n\n/**\n * The raw coder for a ChangeKey operation.\n */\nclass RawAndDigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('change_key_op_raw');\n    this.description('The coder for the raw representation of a ChangeKey operation');\n    this.addSubType(\n      new Coding.Core.Int16('protocol')\n        .description('The protocol version (3).')\n        .withFixedValue(3)\n    );\n    this.addSubType(\n      new Coding.Core.Int16('sendersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of senders')\n    );\n    this.addSubType(\n      new Coding.Repeating('senders', new RawAndDigestCoder())\n        .description('Senders of the multi-operation')\n    );\n\n    this.addSubType(\n      new Coding.Core.Int16('receiversCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of receivers')\n    );\n    this.addSubType(\n      new Coding.Repeating('receivers', new RawAndDigestCoder())\n        .description('Receivers of the multi-operation')\n    );\n\n    this.addSubType(\n      new Coding.Core.Int16('changersCount', true, Endian.LITTLE_ENDIAN)\n        .description('The number of changers')\n    );\n    this.addSubType(\n      new Coding.Repeating('changers', new RawAndDigestCoder())\n        .description('Changers of the multi-operation')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Change Key Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded ChangeKey operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ChangeKey}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new ChangeKey(\n      decoded.signer,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawAndDigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass Receiver extends Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor(account, amount) {\n    super();\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Receiver;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable ChangeKey operation.\n */\nclass Sender extends Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor(account, amount) {\n    super();\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  addAmount(amount) {\n    this[P_AMOUNT] = this[P_AMOUNT].add(new Currency(amount));\n  }\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Sender;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * The digest encoder of a Transaction Operation.\n */\nclass DigestCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('tx_op_digest');\n    this.description('Digest encoder for a Transaction operation.');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .description('Operation type.')\n        .withFixedValue(1)\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Transaction Operation (DIGEST)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#canDecode\n   */\n  get canDecode() {\n    return false;\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SENDER = Symbol('sender');\nconst P_ACCOUNT_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * Representation of a signable Transaction operation.\n */\nclass Transaction extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 1;\n  }\n\n  /**\n   * Creates a new Transaction instance with the given data. The payload is\n   * empty by default and not encoded.\n   *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super();\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n}\n\nmodule.exports = Transaction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst Transaction = require('./Operation');\n\n/**\n * The raw coder for a Transaction operation.\n */\nclass RawCoder extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor() {\n    super('data_operation_raw');\n    this.description('The coder for the raw representation of a Transaction operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Transaction Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the encoded Transaction operation.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {ListOperation}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Transaction(\n      decoded.sender,\n      decoded.target,\n      decoded.amount\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.withNOperation(decoded.nOperation);\n    op.withSign(decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet Items = {\n  ChangeKey: {\n    Operation: require('./ChangeKey/Operation'),\n    RawCoder: require('./ChangeKey/RawCoder'),\n    DigestCoder: require('./ChangeKey/DigestCoder')\n  },\n  ChangeKeySigned: {\n    Operation: require('./ChangeKeySigned/Operation'),\n    RawCoder: require('./ChangeKeySigned/RawCoder'),\n    DigestCoder: require('./ChangeKeySigned/DigestCoder')\n  },\n  ChangeAccountInfo: {\n    Operation: require('./ChangeAccountInfo/Operation'),\n    RawCoder: require('./ChangeAccountInfo/RawCoder'),\n    DigestCoder: require('./ChangeAccountInfo/DigestCoder')\n  },\n  Data: {\n    Operation: require('./Data/Operation'),\n    RawCoder: require('./Data/RawCoder'),\n    DigestCoder: require('./Data/DigestCoder')\n  },\n  Transaction: {\n    Operation: require('./Transaction/Operation'),\n    RawCoder: require('./Transaction/RawCoder'),\n    DigestCoder: require('./Transaction/DigestCoder')\n  },\n  ListAccountForSale: {\n    Operation: require('./ListAccountForSale/Operation'),\n    RawCoder: require('./ListAccountForSale/RawCoder'),\n    DigestCoder: require('./ListAccountForSale/DigestCoder')\n  },\n  DeListAccountForSale: {\n    Operation: require('./DeListAccountForSale/Operation'),\n    RawCoder: require('./DeListAccountForSale/RawCoder'),\n    DigestCoder: require('./DeListAccountForSale/DigestCoder')\n  },\n  BuyAccount: {\n    Operation: require('./BuyAccount/Operation'),\n    RawCoder: require('./BuyAccount/RawCoder'),\n    DigestCoder: require('./BuyAccount/DigestCoder')\n  },\n  MultiOperation: {\n    Operation: require('./MultiOperation/Operation'),\n    RawCoder: require('./MultiOperation/RawAndDigestCoder'),\n    DigestCoder: require('./MultiOperation/RawAndDigestCoder')\n  }\n};\n\nItems.digestCoderFor = operation => {\n  return Items[operation.constructor.name].DigestCoder;\n};\nmodule.exports = Items;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Signer = require('./Signer');\nconst OperationListCoder = require('./RawOperationsCoder');\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_CODER = Symbol('coder');\nconst P_SIGNER = Symbol('signer');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass RawOperations {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n    this[P_CODER] = new OperationListCoder();\n    this[P_SIGNER] = new Signer();\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {RawOperations}\n   */\n  addOperation(keyPair, operation) {\n    if (operation.isSigned) {\n      throw new Error('Operation should not be signed.');\n    }\n\n    let sign = this[P_SIGNER].sign(keyPair, operation);\n\n    operation.withSign(sign.r, sign.s);\n    this[P_OPERATIONS].push({\n      optype: operation.opType,\n      operation: operation\n    });\n    return this;\n  }\n\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  get count() {\n    return this[P_OPERATIONS].length;\n  }\n}\n\nmodule.exports = RawOperations;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst TransactionRawCoder = require('./Operations/Transaction/RawCoder');\nconst DataRawCoder = require('./Operations/Data/RawCoder');\nconst ListRawCoder = require('./Operations/ListAccountForSale/RawCoder');\nconst DeListRawCoder = require('./Operations/DeListAccountForSale/RawCoder');\nconst BuyRawCoder = require('./Operations/BuyAccount/RawCoder');\nconst ChangeKeyRawCoder = require('./Operations/ChangeKey/RawCoder');\nconst ChangeKeySignedRawCoder = require('./Operations/ChangeKeySigned/RawCoder');\nconst ChangeAccountInfoRawCoder = require('./Operations/ChangeAccountInfo/RawCoder');\nconst MultiOperationRawCoder = require('./Operations/MultiOperation/RawAndDigestCoder');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawOperationsCoder extends CompositeType {\n  constructor() {\n    super('combined signed operations');\n    super.description('Coder to combine multiple operations');\n    this.addSubType(new Coding.Core.Int32('count', true, Endian.LITTLE_ENDIAN));\n    const operationType = new CompositeType('operation');\n\n    operationType.addSubType(new Coding.Pascal.OpType('optype', 4));\n    operationType.addSubType(new Coding.Decissive('operation', 'optype', (markerValue) => {\n      switch (markerValue) {\n        case 1:\n          return new TransactionRawCoder();\n        case 2:\n          return new ChangeKeyRawCoder();\n        case 4:\n          return new ListRawCoder();\n        case 5:\n          return new DeListRawCoder();\n        case 6:\n          return new BuyRawCoder();\n        case 7:\n          return new ChangeKeySignedRawCoder();\n        case 8:\n          return new ChangeAccountInfoRawCoder();\n        case 9:\n          return new MultiOperationRawCoder();\n        case 10:\n          return new DataRawCoder();\n        default:\n          throw new Error('Unable to map marker to a coder.');\n      }\n    }));\n    this.addSubType(new Coding.Repeating('operations', operationType));\n  }\n}\n\nmodule.exports = RawOperationsCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\nconst Operations = require('./Operations');\n\n/**\n * Signs the given digest with the given keypair and returns the r and s\n * values (because thats all that is needed).\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n */\nfunction signWithHash(keyPair, digest) {\n  const hash = Sha.sha256(digest);\n\n  return Keys.sign(keyPair, hash);\n}\n\n/**\n * Signs the digest.\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n * @return {{r: BC, s: BC}}\n */\nfunction signWithDigest(keyPair, digest) {\n  return Keys.sign(keyPair, digest);\n}\n\nclass Signer {\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, operation) {\n    const DigestCoder = Operations.digestCoderFor(operation);\n    const digest = new DigestCoder(operation.opType).encodeToBytes(operation);\n    let signResult;\n\n    if (operation.usesDigestToSign() === true) {\n      signResult = signWithDigest(keyPair, digest);\n    } else {\n      signResult = signWithHash(keyPair, digest);\n    }\n\n    // save results\n    return signResult;\n  }\n\n  /**\n   * TODO\n   * @param operation\n   */\n  signMultiOperation(operation) {\n    // const DigestCoder = Operations.digestCoderFor(operation);\n    // const digest = new DigestCoder(operation.opType).encodeToBytes(operation);\n  }\n}\n\nmodule.exports = Signer;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_common__;","module.exports = __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_crypto__;"],"sourceRoot":""}