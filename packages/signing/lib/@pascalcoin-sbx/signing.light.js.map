{"version":3,"sources":["webpack://@pascalcoin-sbx/signing/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/signing/webpack/bootstrap","webpack://@pascalcoin-sbx/signing/./index.js","webpack://@pascalcoin-sbx/signing/./src/Abstract.js","webpack://@pascalcoin-sbx/signing/./src/Coding/PublicKeyWithLength.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/BuyAccount/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeAccountInfo/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKey.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ChangeKeySigned.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Data/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/DeListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/ListAccountForSale/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/DigestCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/Operation.js","webpack://@pascalcoin-sbx/signing/./src/Operations/Transaction/RawCoder.js","webpack://@pascalcoin-sbx/signing/./src/Operations/index.js","webpack://@pascalcoin-sbx/signing/./src/RawOperations.js","webpack://@pascalcoin-sbx/signing/./src/RawOperationsCoder.js","webpack://@pascalcoin-sbx/signing/./src/Signer.js","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/common\"","webpack://@pascalcoin-sbx/signing/external \"@pascalcoin-sbx/crypto\""],"names":["module","exports","Signer","require","RawOperations","RawOperationsCoder","Coding","PublicKeyWithLength","Operations","BC","Currency","Types","PascalCoinInfo","P_PAYLOAD","Symbol","P_S","P_R","P_FEE","P_N_OPERATION","Abstract","constructor","fromString","withPayload","payload","withFee","fee","withMinFee","lastKnownBlock","MIN_FEE","withNOperation","nOperation","withSign","r","s","isSigned","usesDigestToSign","PublicKey","Pascal","Keys","BytesWithLength","Core","PascalPublicKey","publicKeyCoding","id","decodeFromBytes","bc","pubKey","parsed","x","y","curve","encodeToBytes","value","CompositeType","DigestCoder","opType","description","addSubType","AccountNumber","NOperation","BytesWithoutLength","Curve","withFixedValue","empty","OpType","P_SENDER","P_TARGET","P_AMOUNT","P_ACCOUNT_PRICE","P_SELLER_ACCOUNT","P_NEW_PUBLIC_KEY","BuyAccount","sender","target","amount","price","seller","newPublicKey","Endian","Operation","RawCoder","typeInfo","info","name","hierarchy","push","Int8","LITTLE_ENDIAN","decoded","op","signFromDecoded","AccountName","Int16","P_ACCOUNT_SIGNER","P_ACCOUNT_TARGET","P_NEW_NAME","P_NEW_TYPE","P_WITH_NEW_PUBKEY","P_WITH_NEW_NAME","P_WITH_NEW_TYPE","ChangeAccountInfo","accountSigner","accountTarget","signer","newName","newType","changeType","withNewPublicKey","publicKey","withNewName","withNewType","type","ChangeKey","OPTYPE","digest","concat","bcFromInt","account","toMolina","encode","toRaw","bcFromBcWithSize","length","bcFromSign","ChangeKeySigned","P_ACCOUNT_SENDER","P_DATA_TYPE","P_DATA_SEQUENCE","Data","withDataType","dataType","parseInt","withDataSequence","dataSequence","withAmount","Int32","P_PRICE","P_ACCOUNT_TO_PAY","P_LOCKED_UNTIL_BLOCK","DeListAccountForSale","accountToPay","lockedUntilBlock","StringWithoutLength","ListAccountForSale","asPrivateSale","Transaction","Items","digestCoderFor","operation","rawCoderFor","OperationListCoder","P_OPERATIONS","P_CODER","P_SIGNER","addOperation","keyPair","Error","sign","optype","operations","count","TransactionRawCoder","DataRawCoder","ListRawCoder","DeListRawCoder","ChangeAccountInfoRawCoder","operationType","Decissive","markerValue","Repeating","Sha","signWithHash","hash","sha256","signWithDigest","signResult"],"mappings":"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","file":"@pascalcoin-sbx/signing.light.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/signing\", [\"@pascalcoin-sbx/common\", \"@pascalcoin-sbx/crypto\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/signing\"] = factory(require(\"@pascalcoin-sbx/common\"), require(\"@pascalcoin-sbx/crypto\"));\n\telse\n\t\troot[\"@pascalcoin-sbx/signing\"] = factory(root[\"@pascalcoin-sbx/common\"], root[\"@pascalcoin-sbx/crypto\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_common__, __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_crypto__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","module.exports = {\n  Signer: require('./src/Signer'),\n  RawOperations: require('./src/RawOperations'),\n  RawOperationsCoder: require('./src/RawOperationsCoder'),\n  Coding: {\n    PublicKeyWithLength: require('./src/Coding/PublicKeyWithLength')\n  },\n  Operations: require('./src/Operations')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// const Payload = require('../Crypto/Payload');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst PascalCoinInfo = require('@pascalcoin-sbx/common').PascalCoinInfo;\n\nconst P_PAYLOAD = Symbol('payload');\nconst P_S = Symbol('s');\nconst P_R = Symbol('r');\nconst P_FEE = Symbol('fee');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n\n  /**\n   * Constructor.\n   */\n  constructor() {\n    this[P_PAYLOAD] = BC.fromString('');\n    this[P_S] = null;\n    this[P_R] = null;\n    this[P_FEE] = new Currency(0);\n  }\n\n  /**\n   * Sets the payload of the transaction instance.\n   *\n   * @param {BC} payload\n   *\n   * @returns {Abstract}\n   */\n  withPayload(payload) {\n    this[P_PAYLOAD] = payload;\n    return this;\n  }\n\n  /**\n   * Sets the fee.\n   *\n   * @param {Currency} fee\n   * @returns {Abstract}\n   */\n  withFee(fee) {\n    this[P_FEE] = new Currency(fee);\n    return this;\n  }\n\n  /**\n   * Sets the fee to the minimum.\n   *\n   * @returns {Abstract}\n   */\n  withMinFee(lastKnownBlock = null) {\n    this[P_FEE] = PascalCoinInfo.MIN_FEE(lastKnownBlock);\n    return this;\n  }\n\n  withNOperation(nOperation) {\n    this[P_N_OPERATION] = nOperation;\n    return this;\n  }\n\n  withSign(r, s) {\n    this[P_R] = r;\n    this[P_S] = s;\n  }\n\n  /**\n   * Gets the prepared payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the r value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get r() {\n    return this[P_R];\n  }\n\n  /**\n   * Gets the s value of the sign result.\n   *\n   * @returns {BC|null}\n   */\n  get s() {\n    return this[P_S];\n  }\n\n  /**\n   * Gets the fee.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the n operation.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets a value indicating whether the current operation is already signed.\n   *\n   * @returns {boolean}\n   */\n  get isSigned() {\n    return this[P_S] !== null && this[P_R] !== null;\n  }\n\n  usesDigestToSign() {\n    return false;\n  }\n\n}\n\nmodule.exports = Abstract;\n","const PublicKey = require('@pascalcoin-sbx/common').Coding.Pascal.Keys.PublicKey;\nconst BytesWithLength = require('@pascalcoin-sbx/common').Coding.Core.BytesWithLength;\nconst PascalPublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\n\nconst publicKeyCoding = new PublicKey();\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKeyWithLength extends BytesWithLength {\n\n  constructor(id = null) {\n    super(id || 'pubkey', 16);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc) {\n    const pubKey = super.decodeFromBytes(bc);\n    const parsed = publicKeyCoding.decodeFromBytes(pubKey);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {*} value\n   * @returns {PascalPublicKey}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(publicKeyCoding.encodeToBytes(value));\n  }\n}\n\nmodule.exports = PublicKeyWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('buy_operation_digest');\n    super.description('Digest for buy account operation');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount paid for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account to buy')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The buy account optype as 8 bit int8')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_SENDER = Symbol('sender');\nconst P_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\nconst P_ACCOUNT_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass BuyAccount extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 6;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {AccountNumber|Number} sender\n   * @param {AccountNumber|Number} target\n   * @param {Currency} amount\n   * @param {Currency} price\n   * @param {AccountNumber} seller\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(sender, target, amount, price, seller, newPublicKey) {\n    super();\n    this[P_SENDER] = new AccountNumber(sender);\n    this[P_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n    this[P_ACCOUNT_PRICE] = new Currency(price);\n    this[P_SELLER_ACCOUNT] = new AccountNumber(seller);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  get sender() {\n    return this[P_SENDER];\n  }\n\n  get target() {\n    return this[P_TARGET];\n  }\n\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  get price() {\n    return this[P_ACCOUNT_PRICE];\n  }\n\n  get seller() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n}\n\nmodule.exports = BuyAccount;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Buy Account Operation (RAW)';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  constructor(opType) {\n    super('buy_operation_raw');\n    this.description('The coder for the raw representation of a BuyAccount operation');\n    this.description('Encoded BuyAccount Operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The buyer account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account to buy.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount to pay for the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('type', true, Endian.LITTLE_ENDIAN)\n        .description('Fixed type for a \"Buy account\" transaction.')\n        .withFixedValue(2)\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('seller')\n        .description('The account number of the seller.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key that will own the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.sender,\n      decoded.target,\n      decoded.amount,\n      decoded.price,\n      decoded.seller,\n      decoded.newPublicKey\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('change_info_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The buy account optype as 8 bit int8')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\n\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst AccountName = require('@pascalcoin-sbx/common').Types.AccountName;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\n\nconst P_WITH_NEW_PUBKEY = Symbol('with_new_pubkey');\nconst P_WITH_NEW_NAME = Symbol('with_new_name');\nconst P_WITH_NEW_TYPE = Symbol('with_new_type');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeAccountInfo extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 8;\n  }\n\n  /**\n     * Constructor.\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_NEW_NAME] = BC.fromString('');\n    // TODO: Im not so sure if this is correct\n    this[P_NEW_TYPE] = 0;\n\n    this[P_WITH_NEW_PUBKEY] = false;\n    this[P_WITH_NEW_NAME] = false;\n    this[P_WITH_NEW_TYPE] = false;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the change type of the op.\n   *\n   * @returns {number}\n   */\n  get changeType() {\n    let changeType = 0;\n\n    if (this[P_WITH_NEW_PUBKEY] === true) {\n      changeType |= 1;\n    }\n    if (this[P_WITH_NEW_NAME] === true) {\n      changeType |= 2;\n    }\n    if (this[P_WITH_NEW_TYPE] === true) {\n      changeType |= 4;\n    }\n\n    return changeType;\n  }\n\n  /**\n     * Will set the new public key.\n     *\n     * @param {PublicKey} publicKey\n     * @returns {ChangeAccountInfo}\n     */\n  withNewPublicKey(publicKey) {\n    this[P_NEW_PUBLIC_KEY] = publicKey;\n    this[P_WITH_NEW_PUBKEY] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new name of the account.\n     *\n     * @param {String|AccountName} newName\n     * @returns {ChangeAccountInfo}\n     */\n  withNewName(newName) {\n    this[P_NEW_NAME] = new AccountName(newName);\n    this[P_WITH_NEW_NAME] = true;\n    return this;\n  }\n\n  /**\n     * Will set the new type of the account.\n     *\n     * @param {Number} newType\n     * @returns {ChangeAccountInfo}\n     */\n  withNewType(newType) {\n    this[P_NEW_TYPE] = newType;\n    this[P_WITH_NEW_TYPE] = true;\n    return this;\n  }\n}\n\nmodule.exports = ChangeAccountInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('buy_operation_raw');\n    this.description('Encoded BuyAccount Operation');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The signer of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The target account to change info of.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation value of the buyer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee paid for the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_public_key')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.Int8('changeType')\n        .description('The change type.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountName('newName')\n        .description('The new name of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('newType')\n        .description('The new type of the account.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the sign operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the sign operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withNewType(decoded.type);\n    op.withNewName(decoded.name);\n    op.withNewPublicKey(decoded.newPublicKey);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKey extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  static get OPTYPE() {\n    return 2;\n  }\n\n  /**\n     *\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {PublicKey} newPublicKey\n     */\n  constructor(accountSigner, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n     * Gets the digest of the operation.\n     *\n     * @returns {BC}\n     */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKey.OPTYPE),\n    );\n  }\n\n  /**\n     * Gets the raw implementation.\n     *\n     * @returns {BC}\n     */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKey.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../Abstract');\nconst BC = require('@pascalcoin-sbx/common').BC;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\n\n/**\n * A transaction object that can be signed.\n */\nclass ChangeKeySigned extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  static get OPTYPE() {\n    return 7;\n  }\n\n  /**\n   *\n   * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {PublicKey} newPublicKey\n   */\n  constructor(accountSigner, accountTarget, newPublicKey) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n  }\n\n  /**\n   * Gets the digest of the operation.\n   *\n   * @returns {BC}\n   */\n  digest() {\n    return BC.concat(\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.payload,\n      this.bcFromInt(PublicKey.empty().curve.id, 2), // just zero as curve id\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromInt(ChangeKeySigned.OPTYPE),\n    );\n  }\n\n  /**\n   * Gets the raw implementation.\n   *\n   * @returns {BC}\n   */\n  toRaw() {\n    return BC.concat(\n      this.bcFromInt(ChangeKeySigned.OPTYPE, 4),\n      this.bcFromInt(this[P_ACCOUNT_SIGNER].account, 4),\n      this.bcFromInt(this[P_ACCOUNT_TARGET].account, 4),\n      this.bcFromInt(this.nOperation, 4),\n      this.bcFromInt(this.fee.toMolina(), 8),\n      this.bcFromBcWithSize(this.payload),\n      PublicKey.empty().encode(),\n      this.bcFromInt(this[P_NEW_PUBLIC_KEY].encode().length, 2),\n      this[P_NEW_PUBLIC_KEY].encode(),\n      this.bcFromSign(this.r, this.s),\n    );\n  }\n}\n\nmodule.exports = ChangeKeySigned;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated with the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The optype as 8bit int.')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_SENDER = Symbol('account_sender');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_DATA_TYPE = Symbol('data_type');\nconst P_DATA_SEQUENCE = Symbol('data_sequence');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass Data extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 10;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|AccountNumber} signer\n   * @param {Number|AccountNumber} sender\n   * @param {Number|AccountNumber} target\n   */\n  constructor(signer, sender, target) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(signer);\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_DATA_TYPE] = 0;\n    this[P_DATA_SEQUENCE] = 0;\n    this[P_AMOUNT] = new Currency(0);\n  }\n\n  /**\n   * Sets the data type.\n   *\n   * @param {Number} dataType\n   * @returns {Data}\n   */\n  withDataType(dataType) {\n    this[P_DATA_TYPE] = parseInt(dataType, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the data information.\n   *\n   * @param {Number} dataSequence\n   * @returns {Data}\n   */\n  withDataSequence(dataSequence) {\n    this[P_DATA_SEQUENCE] = parseInt(dataSequence, 10);\n\n    return this;\n  }\n\n  /**\n   * Sets the amount to transfer.\n   *\n   * @param {Currency|Number|String} amount\n   * @returns {Data}\n   */\n  withAmount(amount) {\n    this[P_AMOUNT] = new Currency(amount);\n    return this;\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  /**\n   * Gets the sender account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the target account number.\n   *\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the data type.\n   *\n   * @returns {Number}\n   */\n  get dataType() {\n    return this[P_DATA_TYPE];\n  }\n\n  /**\n   * Gets the data sequence.\n   *\n   * @returns {Number}\n   */\n  get dataSequence() {\n    return this[P_DATA_SEQUENCE];\n  }\n\n  /**\n   * Gets the amount to send.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  usesDigestToSign() {\n    return true;\n  }\n}\n\nmodule.exports = Data;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The account that sends the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will receive the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataType', true, Endian.LITTLE_ENDIAN)\n        .description('The data type of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.Int16('dataSequence', true, Endian.LITTLE_ENDIAN)\n        .description('The data sequence of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.sender,\n      decoded.target\n    );\n\n    op.withDataType(decoded.dataType);\n    op.withDataSequence(decoded.dataSequence);\n    op.withAmount(decoded.amount);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be de-listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock')\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The optype as 8bit int.')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass DeListAccountForSale extends Abstract {\n  /**\n   * Gets the optype.\n   *\n   * @returns {number}\n   */\n  get opType() {\n    return 5;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   */\n  constructor(accountSigner, accountTarget) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(0);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(0);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n}\n\nmodule.exports = DeListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('delist_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(opType)\n        .description(`The optype of the operation (${opType})`)\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('R value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.target\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n    super('data_operation_digest');\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.StringWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .withFixedValue(PublicKey.empty().curve)\n        .description('Curve ID 0 - previously active in <= v2.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .withFixedValue(opType)\n        .description('The optype as 8bit int.')\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\n\nconst P_ACCOUNT_SIGNER = Symbol('account_signer');\nconst P_ACCOUNT_TARGET = Symbol('account_target');\nconst P_PRICE = Symbol('price');\nconst P_ACCOUNT_TO_PAY = Symbol('account_to_pay');\nconst P_NEW_PUBLIC_KEY = Symbol('new_public_key');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\n\n/**\n * A transaction object that can be signed.\n */\nclass ListAccountForSale extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 4;\n  }\n\n  /**\n   *\n   * @param accountSigner\n   * @param accountTarget\n   * @param price\n   * @param accountToPay\n   */\n  constructor(accountSigner, accountTarget, price, accountToPay) {\n    super();\n    this[P_ACCOUNT_SIGNER] = new AccountNumber(accountSigner);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(accountTarget);\n    this[P_PRICE] = new Currency(price);\n    this[P_ACCOUNT_TO_PAY] = new AccountNumber(accountToPay);\n    this[P_NEW_PUBLIC_KEY] = PublicKey.empty();\n    this[P_LOCKED_UNTIL_BLOCK] = 0;\n  }\n\n  get signer() {\n    return this[P_ACCOUNT_SIGNER];\n  }\n\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  get price() {\n    return this[P_PRICE];\n  }\n\n  get accountToPay() {\n    return this[P_ACCOUNT_TO_PAY];\n  }\n\n  get newPublicKey() {\n    return this[P_NEW_PUBLIC_KEY];\n  }\n\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Will mark the operation as a private sale to a public key.\n   *\n   * @param {PublicKey} newPublicKey\n   * @param {Number} lockedUntilBlock\n   */\n  asPrivateSale(newPublicKey, lockedUntilBlock = 0) {\n    this[P_NEW_PUBLIC_KEY] = newPublicKey;\n    this[P_LOCKED_UNTIL_BLOCK] = parseInt(lockedUntilBlock, 10);\n  }\n}\n\nmodule.exports = ListAccountForSale;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst PublicKeyWithLength = require('./../../Coding/PublicKeyWithLength');\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor(opType) {\n    super('list_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('signer')\n        .description('The account that executes the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The account that will be listed.')\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 2)\n        .withFixedValue(opType)\n        .description(`The optype of the operation (${opType})`)\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation()\n        .description('The next n_operation of the signer.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('price')\n        .description('The price of the target account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('accountToPay')\n        .description('The account where the amount goes to when the target is sold.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new PublicKeyWithLength('newPublicKey')\n        .description('The new public key of the buyer (private sale).')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('lockedUntilBlock', true, Endian.LITTLE_ENDIAN)\n        .description('The block number until the account is locked.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee associated with the operation')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.signer,\n      decoded.target,\n      decoded.price,\n      decoded.accountToPay\n    );\n\n    op.asPrivateSale(decoded.newPublicKey, decoded.lockedUntilBlock);\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass DigestCoder extends CompositeType {\n  constructor(opType) {\n\n    super('tx_operation_digest');\n\n    // config for digest creation\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithoutLength('payload')\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.Curve('v2_pubkey_curve')\n        .description('Curve ID 0 - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty().curve)\n    );\n    this.addSubType(\n      new Coding.Pascal.OpType('optype', 1)\n        .description('Operation type.')\n        .withFixedValue(opType)\n    );\n  }\n}\n\nmodule.exports = DigestCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./../../Abstract');\nconst Currency = require('@pascalcoin-sbx/common').Types.Currency;\nconst AccountNumber = require('@pascalcoin-sbx/common').Types.AccountNumber;\n\nconst P_ACCOUNT_SENDER = Symbol('sender');\nconst P_ACCOUNT_TARGET = Symbol('target');\nconst P_AMOUNT = Symbol('amount');\n\n/**\n * A transaction object that can be signed.\n */\nclass Transaction extends Abstract {\n  /**\n     * Gets the optype.\n     *\n     * @returns {number}\n     */\n  get opType() {\n    return 1;\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get sender() {\n    return this[P_ACCOUNT_SENDER];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get target() {\n    return this[P_ACCOUNT_TARGET];\n  }\n\n  /**\n   * Gets the sender account.\n   * @returns {AccountNumber}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n     * Creates a new Transaction instance with the given data. The payload is\n     * empty by default and not encoded.\n     *\n   * @param {AccountNumber|Account|String|Number} sender\n   * @param {AccountNumber|Account|String|Number} target\n   * @param {Currency} amount\n     */\n  constructor(sender, target, amount) {\n    super();\n    this[P_ACCOUNT_SENDER] = new AccountNumber(sender);\n    this[P_ACCOUNT_TARGET] = new AccountNumber(target);\n    this[P_AMOUNT] = new Currency(amount);\n  }\n}\n\nmodule.exports = Transaction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst PublicKey = require('@pascalcoin-sbx/common').Types.Keys.PublicKey;\nconst CompositeType = Coding.CompositeType;\nconst Operation = require('./Operation');\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawCoder extends CompositeType {\n  constructor() {\n    super('data_operation_raw');\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('sender')\n        .description('The sender account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.NOperation('nOperation')\n        .description('The next n_operation value of the sender.')\n    );\n    this.addSubType(\n      new Coding.Pascal.AccountNumber('target')\n        .description('The receiving account.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('amount')\n        .description('The amount that is sent from sender to receiver.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Currency('fee')\n        .description('The fee included in the operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('payload', 2)\n        .description('The payload of the operation.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('v2_pubkey')\n        .description('Empty pubkey (6 zero bytes) - previously active in <= v2.')\n        .withFixedValue(PublicKey.empty())\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('r', 2)\n        .description('R value of the signed operation.')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('s', 2)\n        .description('S value of the signed operation.')\n    );\n  }\n\n  decodeFromBytes(bc) {\n    const decoded = super.decodeFromBytes(bc);\n    const op = new Operation(\n      decoded.sender,\n      decoded.target,\n      decoded.amount\n    );\n\n    op.withFee(decoded.fee);\n    op.withPayload(decoded.payload);\n    op.signFromDecoded(decoded.nOperation, decoded.r, decoded.s);\n\n    return op;\n  }\n}\n\nmodule.exports = RawCoder;\n","let Items = {\n  ChangeKey: require('./ChangeKey'),\n  ChangeKeySigned: require('./ChangeKeySigned'),\n  ChangeAccountInfo: {\n    Operation: require('./ChangeAccountInfo/Operation'),\n    RawCoder: require('./ChangeAccountInfo/RawCoder'),\n    DigestCoder: require('./ChangeAccountInfo/DigestCoder')\n  },\n  Data: {\n    Operation: require('./Data/Operation'),\n    RawCoder: require('./Data/RawCoder'),\n    DigestCoder: require('./Data/DigestCoder')\n  },\n  Transaction: {\n    Operation: require('./Transaction/Operation'),\n    RawCoder: require('./Transaction/RawCoder'),\n    DigestCoder: require('./Transaction/DigestCoder')\n  },\n  ListAccountForSale: {\n    Operation: require('./ListAccountForSale/Operation'),\n    RawCoder: require('./ListAccountForSale/RawCoder'),\n    DigestCoder: require('./ListAccountForSale/DigestCoder')\n  },\n  DeListAccountForSale: {\n    Operation: require('./DeListAccountForSale/Operation'),\n    RawCoder: require('./DeListAccountForSale/RawCoder'),\n    DigestCoder: require('./DeListAccountForSale/DigestCoder')\n  },\n  BuyAccount: {\n    Operation: require('./BuyAccount/Operation'),\n    RawCoder: require('./BuyAccount/RawCoder'),\n    DigestCoder: require('./BuyAccount/DigestCoder')\n  }\n};\n\nItems.digestCoderFor = operation => {\n  return Items[operation.constructor.name].DigestCoder;\n};\nItems.rawCoderFor = operation => {\n  return Items[operation.constructor.name].RawCoder;\n};\n\nmodule.exports = Items;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Signer = require('./Signer');\nconst OperationListCoder = require('./RawOperationsCoder');\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_CODER = Symbol('coder');\nconst P_SIGNER = Symbol('signer');\n\n/**\n * This class combines multiple signed operations to a string that\n * can be executed by the node.\n */\nclass RawOperations {\n  /**\n   * Constructor\n   */\n  constructor() {\n    this[P_OPERATIONS] = [];\n    this[P_CODER] = new OperationListCoder();\n    this[P_SIGNER] = new Signer();\n  }\n\n  /**\n   * Adds a single operation to the list of Operations.\n   *\n   * @param operation\n   * @returns {RawOperations}\n   */\n  addOperation(keyPair, operation) {\n    if (operation.isSigned) {\n      throw new Error('Operation should not be signed.');\n    }\n\n    let sign = this[P_SIGNER].sign(keyPair, operation);\n\n    operation.withSign(sign.r, sign.s);\n    this[P_OPERATIONS].push({\n      optype: operation.opType,\n      operation: operation\n    });\n    return this;\n  }\n\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  get count() {\n    return this[P_OPERATIONS].length;\n  }\n}\n\nmodule.exports = RawOperations;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst TransactionRawCoder = require('./Operations/Transaction/RawCoder');\nconst DataRawCoder = require('./Operations/Data/RawCoder');\nconst ListRawCoder = require('./Operations/ListAccountForSale/RawCoder');\nconst DeListRawCoder = require('./Operations/DeListAccountForSale/RawCoder');\nconst ChangeAccountInfoRawCoder = require('./Operations/ChangeAccountInfo/RawCoder');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * A DATA operation object that can be signed.\n */\nclass RawOperationsCoder extends CompositeType {\n  constructor() {\n    super('combined signed operations');\n    super.description('Coder to combine multiple operations');\n    this.addSubType(new Coding.Core.Int32('count', true, Endian.LITTLE_ENDIAN));\n    const operationType = new CompositeType('operation');\n\n    operationType.addSubType(new Coding.Pascal.OpType('optype', 4));\n    operationType.addSubType(new Coding.Decissive('operation', 'optype', (markerValue) => {\n      switch (markerValue) {\n        case 1:\n          return new TransactionRawCoder(1);\n        case 4:\n          return new ListRawCoder(4);\n        case 5:\n          return new DeListRawCoder(5);\n        case 8:\n          return new ChangeAccountInfoRawCoder(8);\n        case 10:\n          return new DataRawCoder(10);\n        default:\n          throw new Error('Unable to map marker to a coder.');\n      }\n    }));\n    this.addSubType(new Coding.Repeating('operations', operationType));\n  }\n}\n\nmodule.exports = RawOperationsCoder;\n","const Sha = require('@pascalcoin-sbx/common').Sha;\nconst Keys = require('@pascalcoin-sbx/crypto').Keys;\nconst Operations = require('./Operations');\n\n/**\n * Signs the given digest with the given keypair and returns the r and s\n * values (because thats all that is needed).\n *\n * @param {KeyPair} keyPair\n * @param {BC} digest\n */\nfunction signWithHash(keyPair, digest) {\n  const hash = Sha.sha256(digest);\n\n  return Keys.sign(keyPair, hash);\n}\n\nfunction signWithDigest(keyPair, digest) {\n  return Keys.sign(keyPair, digest);\n}\n\nclass Signer {\n  /**\n   * Signs the given operation and returns a new rawoperations string.\n   *\n   * @param {KeyPair} keyPair\n   * @param {Number} nOperation\n   * @param {Boolean} useDigest\n   * @returns {Abstract}\n   */\n  sign(keyPair, operation) {\n    const DigestCoder = Operations.digestCoderFor(operation);\n    const digest = new DigestCoder(operation.opType).encodeToBytes(operation);\n    let signResult;\n\n    // TODO: check DATA operation\n    if (operation.usesDigestToSign() === true) {\n      signResult = signWithDigest(keyPair, digest);\n    } else {\n      signResult = signWithHash(keyPair, digest);\n    }\n\n    // save results\n    return signResult;\n  }\n}\n\nmodule.exports = Signer;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_common__;","module.exports = __WEBPACK_EXTERNAL_MODULE__pascalcoin_sbx_crypto__;"],"sourceRoot":""}