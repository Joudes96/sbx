{"version":3,"sources":["webpack://@pascalcoin-sbx/common/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/common/webpack/bootstrap","webpack://@pascalcoin-sbx/common/./src/BC.js","webpack://@pascalcoin-sbx/common/./src/Endian.js","webpack://@pascalcoin-sbx/common/./src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/common/./src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/BytesWithoutLength.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@pascalcoin-sbx/common/./src/Types/Currency.js","webpack://@pascalcoin-sbx/common/./src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/BytesWithLength.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/common/./src/Base58.js","webpack://@pascalcoin-sbx/common/./src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/common/./src/Sha.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/common/./src/Util.js","webpack://@pascalcoin-sbx/common/./src/Types/AccountName.js","webpack://@pascalcoin-sbx/common/./src/Types/OperationHash.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/StringWithLength.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/StringWithoutLength.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/common/./index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/common/(webpack)/buildin/global.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@pascalcoin-sbx/common/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/common/./src/Types/index.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/index.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/common/./src/Coding/index.js","webpack://@pascalcoin-sbx/common/./src/Coding/Repeating.js","webpack://@pascalcoin-sbx/common/./src/Coding/Decissive.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/BytesFixedLength.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/AccountName.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/OperationHash.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Buffer","Endian","require","P_BUFFER","BC","constructor","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","e","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","switchEndian","match","reverse","join","switchEndianIf","targetEndian","detect","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","method","readInt32","buf","allocUnsafe","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","P_HAS_FIXED_VALUE","P_DESCRIPTION","id","hasFixedValue","fixedValue","typeInfo","description","extra","hierarchy","encodedSize","decodeFromBytes","options","all","encodeToBytes","describe","type","fixed","withFixedValue","canDecode","AbstractInt","super","info","push","fromInt32","AbstractType","P_SUBTYPES","P_SIZE_ENCODED","subTypes","addSubType","field","toArray","obj","forEach","subType","values","objOrArray","empty","idx","subTypeValue","Array","isArray","arguments","decoded","encoded","P_ENDIAN","P_UNSIGNED","fromInt16","fromInt8","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","TypeError","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","isBuffer","len","checked","copy","val","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","x","y","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","BN","P_VALUE","toFixed","base","dm","divmod","mod","div","isNegative","Currency","pasc","isBN","split","negative","substring","comps","whole","fraction","molina","add","neg","isVague","toStringOpt","decimals","RegExp","toMolina","addValue","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","PascalCoinInfo","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","splitted","map","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","keys","xylPublicKey","xOrY","lPrivateKey","supported","Int8","Int16","Int32","BytesWithoutLength","P_LENGTH_FIELD","P_BYTES_FIELD","byteSize","decodedSimple","CurveType","bs58","encode","decode","block","fromMolina","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","assert","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","parseBase","num","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","w","off","limbLen","limbPow","total","word","imuln","_iaddn","dest","clone","_expand","_normSign","zeros","groupSizes","groupBases","smallMulTo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toBuffer","toArrayLike","ArrayType","reqLength","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","output","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","sha256","sha512","buffers","hasher","SHA256","update","digest","SHA512","version","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c2","c3","bin2longbin","longbin","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","Util","lh","rh","clear","ind","litteendian","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","ALLOWED_ALL","ALLOWED_START","AccountName","validate","toStringEscaped","c1","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","P_KEY","P_CURVE","privateKeyLength","ec","P_X","P_XL","P_Y","P_YL","PublicKey","yl","xl","ecdh","fromInt","validate64Bit","isUnsigned","StringWithoutLength","P_STRING_FIELD","AccountNumberType","Base58","Sha","Types","Coding","basex","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","Function","window","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","isLE","mLen","eLen","eMax","eBias","nBits","NaN","rt","LN2","webpackPolyfill","deprecate","paths","children","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","OperationHash","Keys","PrivateKey","KeyPair","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","publicKey","CompositeType","Repeating","Decissive","Core","Int64","StringWithLength","BytesWithLength","BytesFixedLength","Pascal","NOperation","OpType","P_REPEAT_LIMIT","P_TYPE","repeatLimit","result","counter","limitArrived","item","P_SUBTYPE_RESOLVER","P_MARKER_FIELD","markerField","subTypeResolver","P_SIZE","PublicKeyType","omitXYLenghts","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","PrivateKeyType","AccountNameType","CurrencyType","P_INT_TYPE","OperationHashType"],"mappings":"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","file":"@pascalcoin-sbx/common.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/common\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/common\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/common\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 30);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      try {\n        return BC.fromHex(data);\n      } catch (e) {\n        return BC.fromString(data);\n      }\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str, 'utf8'));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString('utf8');\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndian() {\n    return BC.fromHex(\n      this[P_BUFFER].toString('hex').match(/../g).reverse().join(''),\n    );\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndianIf(targetEndian) {\n    if (Endian.detect() !== targetEndian) {\n      return this.switchEndian();\n    }\n\n    return this;\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\nconst P_HAS_FIXED_VALUE = Symbol('has_fixed_value');\nconst P_DESCRIPTION = Symbol('description');\n\n/**\n * Abstract field type to encode and decode values. Abstracts encodeToBytes and decodeFromBytes as\n * basic implementations but in fact it can be anything.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string|null} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n    this[P_HAS_FIXED_VALUE] = false;\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Gets a value indicating whether the field type has a fixed value.\n   *\n   * @returns {Boolean}\n   */\n  get hasFixedValue() {\n    return this[P_HAS_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the fixed value.\n   *\n   * @returns {*}\n   */\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    return {\n      name: 'AbstractType',\n      description: this.description(),\n      extra: {},\n      hierarchy: ['AbstractType']\n    };\n  }\n\n  /**\n   * Gets the encoded size of the type.\n   *\n   * @return {Number}\n   */\n  get encodedSize() {\n    throw new Error('Encoded size getter not implemented');\n  }\n\n  /**\n   * Decodes a value using the rules defined in the method from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Returns the encoded bytes for the given value.\n   *\n   * @param {*} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Describes the type.\n   *\n   * @param {*} value\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    if (this.hasFixedValue) {\n      description.fixed = this.fixedValue;\n    }\n\n    return description;\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  withFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    this[P_HAS_FIXED_VALUE] = true;\n    return this;\n  }\n\n  /**\n   * Sets the description and returns the type or gets the description itself.\n   *\n   * @param {String} description\n   * @returns {AbstractType|String}\n   */\n  description(description = null) {\n    if (description === null) {\n      return this[P_DESCRIPTION];\n    }\n\n    this[P_DESCRIPTION] = description;\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the type can be decoded. It is\n   * not possible in some circumstances.\n   *\n   * @return {boolean}\n   */\n  get canDecode() {\n    return true;\n  }\n}\n\nmodule.exports = AbstractType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int32', unsigned, endian);\n    this.description('4byte 32bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int32';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 4;\n  }\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SUBTYPES = Symbol('subtypes');\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A Type that itself is made up of multiple other (sub-)types.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id || 'composite_type');\n    super.description('A type that itself is made up of multiple other types.');\n    this[P_SUBTYPES] = [];\n  }\n\n  /**\n   * Gets all subtypes.\n   *\n   * @returns {Array}\n   */\n  get subTypes() {\n    return this[P_SUBTYPES];\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'CompositeType';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Adds a new field (type) definition.\n   *\n   * @param {AbstractType} field\n   */\n  addSubType(field) {\n    this[P_SUBTYPES].push(field);\n    return this;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = { toArray: false }, all = null) {\n    if (this.canDecode === false) {\n      throw new Error('This type cannot be decoded.');\n    }\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.subTypes.forEach((subType) => {\n      obj[subType.id] = subType.decodeFromBytes(bc.slice(offset), options, obj);\n      offset += subType.encodedSize;\n    });\n\n    return options.toArray ? Object.values(obj) : obj;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array|*} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let bc = BC.empty();\n\n    this.subTypes.forEach((subType, idx) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = Array.isArray(objOrArray) ? objOrArray[idx] : objOrArray[subType.id];\n      }\n\n      // we will use the first available\n      bc = bc.append(subType.encodeToBytes(subTypeValue, objOrArray));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = this.decodeFromBytes(this.encodeToBytes(value));\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = description.encoded.length;\n    }\n\n    description.subTypes = [];\n\n    this.subTypes.forEach((subType) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = value[subType.id];\n      }\n\n      description.subTypes.push(subType.describe(subTypeValue));\n    });\n\n    return description;\n  }\n}\n\nmodule.exports = CompositeType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'AbstractInt';\n    info.extra = {\n      unsigned: this.unsigned,\n      endian: this.endian\n    };\n\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    description.encodedSize = this.encodedSize;\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.encoded = this.encodeToBytes(value).toHex();\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = AbstractInt;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for a 16bit int value.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int16', unsigned, endian);\n    this.description('2byte 16bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int16';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 2;\n  }\n\n  /**\n   * Decodes the int16 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Encodes the given Int16 value to a byte sequence.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int16;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8Bit int value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id || 'int8', unsigned, Endian.LITTLE_ENDIAN);\n    this.description('1byte 8bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int8';\n    info.hierarchy.push(info.name);\n\n    delete info.extra.endian;\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 1;\n  }\n\n  /**\n   * Reads the int8 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt8(0, this.unsigned);\n  }\n\n  /**\n   * Encodes the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned);\n  }\n}\n\nmodule.exports = Int8;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write bytes without prepending the length. This cannot be decoded in some circumstances.\n */\nclass BytesWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'bytes_without_length');\n    this.description('Bytes without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'BytesWithoutLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value);\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    if (arguments.length > 0) {\n      description.value = value;\n      description.encoded = this.encodeToBytes(value);\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = BytesWithoutLength;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\nconst BytesWithoutLength = require('./BytesWithoutLength');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic content in form of bytes (prepends the length).\n */\nclass BytesWithLength extends AbstractType {\n  /**\n   * Constructor\n   *\n   * @param {string} id\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize = 1) {\n    super(id || `bytes_with_length_${byteSize * 8}`);\n    this.description('Bytes with variable size prepended');\n    this[P_BYTES_FIELD] = new BytesWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8('length', true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('InByteSize must be either 8, 16 or 32');\n    }\n\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'BytesWithLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].decodeFromBytes(bc) + this[P_LENGTH_FIELD].encodedSize;\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    this[P_SIZE_ENCODED] = value.length + this[P_LENGTH_FIELD].encodedSize;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(\n      this[P_SIZE_ENCODED] - this[P_LENGTH_FIELD].encodedSize\n    );\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.decodedSimple = value.toHex();\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = BytesWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CurveType = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special pascal type that can en/decode a curve id.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', true, Endian.LITTLE_ENDIAN);\n    this.description('Key curve id');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Curve';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurveType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new CurveType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurveType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   * Tests are not performed.\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  /* istanbul ignore next */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (this[P_MD160].length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_KEY].length > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_KEY].length}`\n      );\n    }\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\nconst BN = require('bn.js');\n\nfunction validate64Bit(isUnsigned, value) {\n  if (isUnsigned) {\n    if (value.isNeg()) {\n      throw new Error('64bit value is negative. Only signed allowed.');\n    } else if (value.gt(new BN('18446744073709551615'))) {\n      throw new Error('Invalid unsigned 64 bit value.');\n    }\n  } else if (!isUnsigned) {\n    if (value.gt(new BN('9223372036854775807')) || value.lt(new BN('-9223372036854775808'))) {\n      throw new Error('Invalid signed 64 bit value.');\n    }\n  }\n\n  return value;\n}\n\n/**\n * Field type for 64bit int values using BN.js.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'int64', unsigned, endian);\n    this.description('8byte 64bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Int64';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 8;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BN}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let value = new BN(BC.from(bc).buffer, 10, this.endian.toLowerCase());\n\n    if (!this.unsigned) {\n      value = value.fromTwos(64);\n    }\n\n    return validate64Bit(this.unsigned, value);\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {BN} value\n   */\n  encodeToBytes(value) {\n    value = validate64Bit(this.unsigned, value);\n    if (!this.unsigned) {\n      value = value.toTwos(64);\n    }\n\n    return BC.from(value.toBuffer(this.endian.toLowerCase(), this.encodedSize));\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    description.encodedSize = this.encodedSize;\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.decodedSimple = value.toString(10, this.encodedSize);\n      description.encoded = this.encodeToBytes(value).toHex();\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = Int64;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../../BC');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\n\nconst StringWithoutLength = require('./StringWithoutLength');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_STRING_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithLength extends AbstractType {\n\n  constructor(id, byteSize = 1) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('String with size prepended');\n    this[P_STRING_FIELD] = new StringWithoutLength('value');\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8('length', true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32('length', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'StringWithLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc));\n    return this[P_STRING_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize,\n        this[P_LENGTH_FIELD].encodedSize + this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE_ENCODED] = value.length;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(this[P_SIZE_ENCODED]);\n\n    return bc.append(this[P_STRING_FIELD].encodeToBytes(value));\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.encoded = this.encodeToBytes(value);\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = StringWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write dynamic strings without prepending the length.\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'string_without_length');\n    this.description('Single string value without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'StringWithoutLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).toString();\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value, 'string');\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    if (arguments.length > 0) {\n      description.value = value;\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = this.encodedSize;\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumberType = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', true, Endian.LITTLE_ENDIAN);\n    this.description('An account number');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'AccountNumber';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNumberType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNumberType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNumberType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n    this.description('Accounts n_operation value.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'NOperation';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n}\n\nmodule.exports = NOperation;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AbstractType: require('./AbstractType'),\n  CompositeType: require('./CompositeType'),\n  Repeating: require('./Repeating'),\n  Decissive: require('./Decissive'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    StringWithLength: require('./Core/StringWithLength'),\n    StringWithoutLength: require('./Core/StringWithoutLength'),\n    BytesWithLength: require('./Core/BytesWithLength'),\n    BytesWithoutLength: require('./Core/BytesWithoutLength'),\n    BytesFixedLength: require('./Core/BytesFixedLength')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey'),\n      PrivateKey: require('./Pascal/Keys/PrivateKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    AccountName: require('./Pascal/AccountName'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType'),\n    OperationHash: require('./Pascal/OperationHash')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_REPEAT_LIMIT = Symbol('repeat_limit');\nconst P_TYPE = Symbol('type');\n\n/**\n * A Type that itself is made up of multiple other types.\n */\nclass Repeating extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, type, repeatLimit = -1) {\n    super(id || 'repeating');\n    super.description('A type that itself has one repeating type that will ' +\n      'be written / read until the limit is reached or data is empty.');\n    this[P_TYPE] = type;\n    this[P_REPEAT_LIMIT] = repeatLimit;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Repeating';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let result = [];\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    let counter = 0;\n    let limitArrived = false;\n\n    do {\n      const decoded = this[P_TYPE].decodeFromBytes(bc.slice(offset));\n\n      result.push(decoded);\n      offset += this[P_TYPE].encodedSize;\n      counter++;\n      limitArrived = (this[P_REPEAT_LIMIT] > -1 && this[P_REPEAT_LIMIT] === counter);\n\n    } while (offset < bc.length && !limitArrived);\n\n    return result;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(arr) {\n    let bc = BC.empty();\n\n    arr.forEach((item, idx) => {\n      if (idx >= this[P_REPEAT_LIMIT] && this[P_REPEAT_LIMIT] > -1) {\n        return;\n      }\n      bc = bc.append(this[P_TYPE].encodeToBytes(item));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = this.decodeFromBytes(this.encodeToBytes(value));\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = description.encoded.length;\n    }\n\n    description.subTypes = [];\n\n    this.subTypes.forEach((subType) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = value[subType.id];\n      }\n\n      description.subTypes.push(subType.describe(subTypeValue));\n    });\n\n    return description;\n  }\n}\n\nmodule.exports = Repeating;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CompositeType = require('./CompositeType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_SUBTYPE_RESOLVER = Symbol('subtype_resolver');\nconst P_MARKER_FIELD = Symbol('marker_field');\n\n/**\n * A Type that itself is made up of multiple other types. The types are selected dynamically\n * depending on the given resolver.\n */\nclass Decissive extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor(id, markerField, subTypeResolver) {\n    super(id || 'decissive');\n    super.description('A type that itself has many sub types but only some are triggere based on a marker.');\n    this[P_SUBTYPE_RESOLVER] = subTypeResolver;\n    this[P_MARKER_FIELD] = markerField;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Decissive';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n\n    this[P_SIZE_ENCODED] = subType.encodedSize;\n    return subType.decodeFromBytes(bc, options, all);\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray, all) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n    let bc = subType.encodeToBytes(objOrArray);\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    if (arguments.length > 0) {\n      description.decoded = this.decodeFromBytes(this.encodeToBytes(value));\n      description.encoded = this.encodeToBytes(value).toHex();\n      description.encodedSize = description.encoded.length;\n    }\n\n    description.subTypes = [];\n\n    this.subTypes.forEach((subType) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = value[subType.id];\n      }\n\n      description.subTypes.push(subType.describe(subTypeValue));\n    });\n\n    return description;\n  }\n}\n\nmodule.exports = Decissive;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to encode and decode bytes with a fixed length.\n */\nclass BytesFixedLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Number} length\n   */\n  constructor(id, length) {\n    super(id || 'bytes_fixed_length_' + length);\n    this.description('Bytes with a fixed length of ' + length);\n    this[P_SIZE] = length;\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'BytesFixedLength';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE];\n  }\n\n  /**\n   * Returns the values of the given bc in the configured length.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    return value.slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = {\n      id: this.id,\n      type: this.typeInfo\n    };\n\n    description.encodedSize = this[P_SIZE];\n    if (arguments.length > 0) {\n      description.value = value;\n      description.encoded = this.encodeToBytes(value);\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = BytesFixedLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst BytesWithoutLength = require('../../Core/BytesWithoutLength');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PublicKeyType = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A Public Key value.\n */\nclass PublicKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} omitXYLenghts\n   */\n  constructor(id = null, omitXYLenghts = false) {\n    super(id || 'public_key');\n    this.addSubType(new Curve('curve'));\n\n    // oh come on..\n    if (omitXYLenghts) {\n      this.addSubType(new BytesWithoutLength('x'));\n      this.addSubType(new BytesWithoutLength('y'));\n    } else {\n      this.addSubType(new BytesWithLength('x', 2));\n      this.addSubType(new BytesWithLength('y', 2));\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'PublicKey';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PublicKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PublicKeyType(decoded.x, decoded.y, decoded.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst PrivateKeyType = require('./../../../../src/Types/Keys/PrivateKey');\n\n/**\n * A coder for a private key.\n */\nclass PrivateKey extends CompositeType {\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'private_key');\n    this.addSubType(new Curve('curve'));\n    this.addSubType(new BytesWithLength('key', 2));\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'PrivateKey';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PrivateKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PrivateKeyType(decoded.key, decoded.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {PrivateKeyType} value\n   * @returns {PrivateKeyType}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNameType = require('./../../Types/AccountName');\nconst StringWithLength = require('../Core/StringWithLength');\n\n/**\n * A pascal related type that can de/encode an account name.\n */\nclass AccountName extends StringWithLength {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account_name');\n    this.description('An account name');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'AccountName';\n    info.hierarchy.push(info.name);\n\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNameType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNameType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNameType} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.toString());\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Int64 = require('./../Core/Int64');\nconst CurrencyType = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends Int64 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'currency', false, Endian.LITTLE_ENDIAN);\n    this.description('A type for currency values.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'Currency';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurrencyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return CurrencyType.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurrencyType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.bn);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_INT_TYPE = Symbol('int_type');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize) {\n    super(id || `optype_int${byteSize * 8}`);\n    switch (byteSize) {\n      case 1:\n        this[P_INT_TYPE] = new Int8('OpType[Int8]', true);\n        break;\n      case 2:\n        this[P_INT_TYPE] = new Int16('OpType[Int16]', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_INT_TYPE] = new Int32('OpType[Int32]', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n    this.description(`Operation type in ${byteSize * 8} bits`);\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = this[P_INT_TYPE].typeInfo;\n\n    info.name = 'OpType';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_INT_TYPE].encodedSize;\n  }\n\n  /**\n   * Decodes and returns the optype.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Number}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return this[P_INT_TYPE].decodeFromBytes(bc);\n  }\n\n  /**\n   * Encodes the given optype to bytes.\n   *\n   * @param {Number} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    return this[P_INT_TYPE].encodeToBytes(value);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    let description = super.describe(value);\n\n    description.encodedSize = this.encodedSize;\n\n    if (arguments.length > 0) {\n      description.decoded = value;\n      description.encoded = this.encodeToBytes(value).toHex();\n    }\n\n    return description;\n  }\n}\n\nmodule.exports = OpType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst CompositeType = require('./../CompositeType');\nconst Int32 = require('./../Core/Int32');\nconst AccountNumber = require('./AccountNumber');\nconst BytesWithoutLength = require('./../Core/BytesWithoutLength');\nconst NOperation = require('./NOperation');\nconst OperationHashType = require('./../../Types/OperationHash');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass OperationHash extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'ophash');\n    this.description('A pascalCoin operation hash');\n\n    this.addSubType(new Int32('block', true, Endian.LITTLE_ENDIAN));\n    this.addSubType(new AccountNumber('account'));\n    this.addSubType(new NOperation('nOperation', 4));\n    this.addSubType(new BytesWithoutLength('md160'));\n  }\n\n  /**\n   * @inheritDoc AbstractType#typeInfo\n   */\n  /* istanbul ignore next */\n  get typeInfo() {\n    let info = super.typeInfo;\n\n    info.name = 'OperationHash';\n    info.hierarchy.push(info.name);\n    return info;\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {OperationHash}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new OperationHashType(decoded.block, decoded.account, decoded.nOperation, decoded.md160);\n  }\n\n  /**\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {OperationHash} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n\n  /**\n   * @inheritDoc AbstractType#describe\n   */\n  /* istanbul ignore next */\n  describe(value) {\n    return super.describe(value);\n  }\n}\n\nmodule.exports = OperationHash;\n"],"sourceRoot":""}