{"version":3,"sources":["webpack://@pascalcoin-sbx/common/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/common/webpack/bootstrap","webpack://@pascalcoin-sbx/common/./src/BC.js","webpack://@pascalcoin-sbx/common/./src/Endian.js","webpack://@pascalcoin-sbx/common/./src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/common/./src/Types/Currency.js","webpack://@pascalcoin-sbx/common/./src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/common/./src/Base58.js","webpack://@pascalcoin-sbx/common/./src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/common/./src/Sha.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/common/./src/Util.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/common/./src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/VariableString.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/common/./index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/common/(webpack)/buildin/global.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/common/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/common//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/common/./src/Types/index.js","webpack://@pascalcoin-sbx/common/./src/Types/AccountName.js","webpack://@pascalcoin-sbx/common/./src/Types/OperationHash.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/index.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/common/./src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/common/./src/Coding/index.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/FixedString.js","webpack://@pascalcoin-sbx/common/./src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/common/./src/Coding/Pascal/OpType.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Buffer","Endian","require","P_BUFFER","BC","constructor","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","switchEndian","match","reverse","join","switchEndianIf","targetEndian","detect","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","method","readInt32","readInt64","buf","allocUnsafe","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","id","decodeFromBytes","encodeToBytes","setFixedValue","hasFixedValue","fixedValue","AbstractType","P_ENDIAN","P_UNSIGNED","super","global","base64","ieee754","isArray","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","TypeError","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","obj","isBuffer","len","checked","copy","val","type","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","x","y","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","values","keys","xylPublicKey","xOrY","lPrivateKey","supported","AbstractInt","fromInt16","fromInt32","BN","P_VALUE","toFixed","base","dm","divmod","mod","div","isNegative","Currency","pasc","isBN","split","negative","substring","comps","whole","fraction","molina","add","neg","isVague","toStringOpt","decimals","RegExp","toMolina","addValue","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","PascalCoinInfo","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","splitted","map","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","bs58","encode","decode","block","fromMolina","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","sha256","sha512","buffers","hasher","SHA256","forEach","update","digest","SHA512","version","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c2","c3","bin2longbin","longbin","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","Util","lh","rh","clear","xor","ind","litteendian","condition","action","whilst","then","Promise","resolve","P_X","P_XL","P_Y","P_YL","P_CURVE","PublicKey","yl","xl","ec","ecdh","fromInt","P_FIELDS","addField","field","fields","fieldType","returnExplanation","empty","explain","fieldValue","isStatic","fromInt8","Int16","P_SIZE","lengthField","v","PascalCurve","Base58","Sha","Types","Coding","basex","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","carry","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","g","Function","window","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","assert","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","parseBase","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","toArray","ceil","w","off","limbLen","limbPow","total","word","imuln","_iaddn","dest","clone","_expand","_normSign","zeros","groupSizes","groupBases","smallMulTo","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toBuffer","toArrayLike","ArrayType","reqLength","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","zeroBits","toTwos","width","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","webpackPolyfill","deprecate","paths","children","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","idx","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","AccountName","OperationHash","Keys","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","ALLOWED_ALL","ALLOWED_START","validate","toStringEscaped","c1","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","opHash","encodeAsPending","PrivateKey","KeyPair","P_KEY","P_LENGTH","privateKeyLength","encoded","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","publicKey","CompositeType","Core","FixedString","Int8","Int32","Int64","VariableString","Pascal","NOperation","OpType","P_APPEND","P_PREPEND","fromInt64","PascalPublicKey","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","decoded","PascalAccountNumber","PascalCurrency","P_CODER","byteSize"],"mappings":"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","file":"@pascalcoin-sbx/common.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/common\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/common\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/common\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      return BC.fromHex(data);\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString();\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndian() {\n    return BC.fromHex(\n      this[P_BUFFER].toString('hex').match(/../g).reverse().join(''),\n    );\n  }\n\n  /**\n   * Switches the endianness of the BC.\n   *\n   * @returns {BC}\n   */\n  switchEndianIf(targetEndian) {\n    if (Endian.detect() !== targetEndian) {\n      return this.switchEndian();\n    }\n\n    return this;\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 64 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt64(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int${endian}`;\n\n    return this[P_BUFFER][method](offset, 5);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 64 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt64(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int${endian}`;\n    const buf = Buffer.allocUnsafe(8);\n\n    buf[method](value, 0, 5);\n    return new BC(buf);\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","const P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\n\n/**\n * Abstract field type.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n  }\n\n  /**\n   * Read a value using the rules defined in the method from the given BC.\n   *\n   * @param {BC} bc\n   */\n  decodeFromBytes(bc) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Appends the given value to the given BC.\n   *\n   * @param {*} value\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  setFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    return this;\n  }\n\n  get hasFixedValue() {\n    return this.hasOwnProperty(P_FIXED_VALUE);\n  }\n\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n}\n\nmodule.exports = AbstractType;\n","const AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n}\n\nmodule.exports = AbstractInt;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 16bit ints.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Reads the int16 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int16 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {number}\n   */\n  get size() {\n    return 2;\n  }\n}\n\nmodule.exports = Int16;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the number of bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return 4;\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","class Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n\n  static promiseWhile(data, condition, action) {\n    let whilst = (data) => {\n      return condition(data) ?\n        action(data).then(whilst) :\n        Promise.resolve(data);\n    };\n\n    return whilst(data);\n  };\n\n  // https://stackoverflow.com/questions/46479169/check-if-value-is-a-symbol-in-javascript\n  static isSymbol(x) {\n    return typeof x === 'symbol' ||\n        typeof x === 'object' && Object.prototype.toString.call(x) === '[object Symbol]';\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_FIELDS = Symbol('fields');\n\n/**\n * A BC reader and writer for binary data.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id);\n    this[P_FIELDS] = [];\n  }\n\n  /**\n   * Adds a field config.\n   *\n   * @param {AbstractType} field\n   */\n  addField(field) {\n    this[P_FIELDS].push(field);\n  }\n\n  /**\n   * Gets the config for all fields.\n   *\n   * @returns {*}\n   */\n  get fields() {\n    return this[P_FIELDS];\n  }\n\n  /**\n   * Reads the given byte collection into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   */\n  decodeFromBytes(bc) {\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.fields.forEach((fieldType) => {\n      obj[fieldType.id] = fieldType.decodeFromBytes(bc.slice(offset));\n      offset += fieldType.size;\n    });\n\n    return obj;\n  }\n\n  /**\n   * Writes the given object to a BC.\n   *\n   * @param {Object} obj\n   * @returns {BC}\n   */\n  encodeToBytes(obj, returnExplanation = false) {\n    let bc = BC.empty();\n    let explain = {};\n\n    this.fields.forEach((field) => {\n      let fieldValue;\n\n      if (field.hasFixedValue) {\n        fieldValue = field.fixedValue;\n      } else {\n        if (field.isStatic) {\n          fieldValue = obj.constructor[field.id];\n        } else {\n          fieldValue = obj[field.id];\n        }\n      }\n\n      if (returnExplanation) {\n        explain[field.id] = field.encodeToBytes(fieldValue).toHex();\n      } else {\n        // we will use the first available\n        bc = bc.append(field.encodeToBytes(fieldValue));\n      }\n    });\n\n    if (returnExplanation) {\n      return explain;\n    }\n\n    return bc;\n  }\n}\n\nmodule.exports = CompositeType;\n","const AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8 Bit value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id, unsigned, Endian.LITTLE_ENDIAN);\n  }\n\n  /**\n   * Reads the int8 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt8(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {number}\n   */\n  get size() {\n    return 1;\n  }\n}\n\nmodule.exports = Int8;\n","const AbstractType = require('./../AbstractType');\nconst Int16 = require('./Int16');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE = Symbol('size');\n\nconst lengthField = new Int16('length', true, Endian.LITTLE_ENDIAN);\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass VariableString extends AbstractType {\n\n  /**\n   * Reads the string from the BC.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    this[P_SIZE] = lengthField.decodeFromBytes(bc) + lengthField.size;\n    return bc.slice(lengthField.size, this[P_SIZE]);\n  }\n\n  /**\n   * Appends the string to the BC.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let v = BC.from(value);\n\n    v = v.prepend(lengthField.encodeToBytes(v.length));\n    return v;\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return this[P_SIZE];\n  }\n}\n\nmodule.exports = VariableString;\n","const PascalCurve = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', false, Endian.LITTLE_ENDIAN);\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC} bc\n   * @returns {PascalCurve}\n   */\n  decodeFromBytes(bc) {\n    return new PascalCurve(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {PascalCurve} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","module.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (md160.length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Decodes the given operation hash.\n   *\n   * @param {BC|Buffer|Uint8Array|String} opHash\n   */\n  static decode(opHash) {\n    opHash = BC.from(opHash);\n    const block = opHash.slice(0, 4).switchEndian().toInt();\n    const account = new AccountNumber(opHash.slice(4, 8).switchEndian().toInt());\n    const nOperation = opHash.slice(8, 12).switchEndian().toInt();\n    const md160 = opHash.slice(12);\n\n    return new OperationHash(block, account, nOperation, md160);\n  }\n\n  /**\n   * Creates the pascal encoding for an operation hash.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    return BC.concat(\n      BC.fromInt(this[P_BLOCK], 4).switchEndian(),\n      BC.fromInt(this[P_ACCOUNT].account, 4).switchEndian(),\n      BC.fromInt(this[P_N_OPERATION], 4).switchEndian(),\n      this[P_MD160],\n    );\n  }\n\n  /**\n   * Gets the operation hash as a pending operation.\n   *\n   * @returns {BC}\n   */\n  encodeAsPending() {\n    return new OperationHash(0, this[P_ACCOUNT], this[P_N_OPERATION], this[P_MD160]).encode();\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","module.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\nconst P_LENGTH = Symbol('length');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n    this[P_LENGTH] = key.length;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_LENGTH] > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_LENGTH]}`\n      );\n    }\n\n    /*\n    if (this[P_LENGTH] < privateKeyLength) {\n      this[P_LENGTH] = privateKeyLength;\n      this[P_KEY] = key.prepend(BC.fromHex('00'.repeat(privateKeyLength - this[P_LENGTH])));\n    }*/\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {Number}\n     */\n  get length() {\n    return this[P_LENGTH];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Encodes a private key to a BC defined by PascalCoin.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    const curve = BC.fromInt(this.curve.id).switchEndian();\n    const length = BC.fromInt(this.length, 2).switchEndian();\n\n    return BC.concat(curve, length, this.key);\n  }\n\n  /**\n   * Decodes a PascalCoin private key string.\n   *\n   * @param {BC|Buffer|Uint8Array|String} encoded\n   * @returns {PrivateKey}\n   */\n  static decode(encoded) {\n    encoded = BC.from(encoded);\n    const curve = encoded.slice(0, 2).switchEndian().toInt();\n    const length = encoded.slice(2, 4).switchEndian().toInt();\n    const key = encoded.slice(4, 4 + length);\n\n    return new PrivateKey(key, new Curve(curve));\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","module.exports = {\n  CompositeType: require('./CompositeType'),\n  AbstractType: require('./AbstractType'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    FixedString: require('./Core/FixedString'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    VariableString: require('./Core/VariableString')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType')\n  }\n};\n","const AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\nconst P_APPEND = Symbol('append');\nconst P_PREPEND = Symbol('prepend');\n\n/**\n * Field types for string with an exact length.\n */\nclass FixedString extends AbstractType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Number} size\n   * @param {BC|null} append\n   * @param {BC|null} prepend\n   */\n  constructor(id, size, append = null, prepend = null) {\n    super(id);\n    this[P_SIZE] = size;\n    this[P_APPEND] = append;\n    this[P_PREPEND] = prepend;\n  }\n\n  /**\n   * Reads the string.\n   *\n   * @param {BC} bc\n   * @returns {BC}\n   */\n  decodeFromBytes(bc) {\n    return bc.slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Appends the given string to the given BC.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let v = BC.from(value);\n\n    if (v.length < this[P_SIZE]) {\n      if (this[P_APPEND] !== null) {\n        v = v.append(BC.fromHex(this[P_APPEND].toHex().repeat(this[P_SIZE] - v.length())));\n      } else {\n        v = v.prepend(BC.fromHex(this[P_PREPEND].toHex().repeat(this[P_SIZE] - v.length())));\n      }\n    }\n\n    return v;\n  }\n\n  /**\n   * Gets the size in bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return this[P_SIZE];\n  }\n}\n\nmodule.exports = FixedString;\n","const AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 64bit int values.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Reads the given int64 value.\n   *\n   * @param {BC} bc\n   * @returns {Number}\n   */\n  decodeFromBytes(bc) {\n    return bc.readInt64(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int64 value.\n   *\n   * @param {string} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt64(value, this.unsigned, this.endian);\n  }\n\n  /**\n   * Gets the number of bytes.\n   *\n   * @returns {Number}\n   */\n  get size() {\n    return 8;\n  }\n}\n\nmodule.exports = Int64;\n","const Curve = require('./Curve');\nconst VariableString = require('./../../Core/VariableString');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PascalPublicKey = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass PublicKey extends CompositeType {\n\n  constructor(id = null) {\n    super(id || 'pubkey');\n    this.addField(new Curve('curve'));\n    this.addField(new VariableString('x'));\n    this.addField(new VariableString('y'));\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalPublicKey}\n   */\n  decodeFromBytes(bc) {\n    const parsed = super.decodeFromBytes(bc);\n\n    return new PascalPublicKey(parsed.x, parsed.y, parsed.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","const PascalAccountNumber = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', false, Endian.LITTLE_ENDIAN);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC} bc\n   * @returns {PascalAccountNumber}\n   */\n  decodeFromBytes(bc) {\n    return new PascalAccountNumber(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {PascalAccountNumber} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n}\n\nmodule.exports = AccountNumber;\n","const AbstractType = require('./../AbstractType');\nconst PascalCurrency = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends AbstractType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'currency');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC} bc\n   * @returns {PascalCurrency}\n   */\n  decodeFromBytes(bc) {\n    return PascalCurrency.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {PascalCurrency} value\n   */\n  encodeToBytes(value) {\n    return value.bn.toArrayLike(Buffer, Endian.LITTLE_ENDIAN.toLowerCase(), 8);\n  }\n}\n\nmodule.exports = Currency;\n","const Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n  }\n}\n\nmodule.exports = NOperation;\n","const Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_CODER = Symbol('coder');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(byteSize) {\n    super(`int${byteSize * 8}_optype`);\n    switch (byteSize) {\n      case 1:\n        this[P_CODER] = new Int8('optype', true);\n        break;\n      case 2:\n        this[P_CODER] = new Int16('optype', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_CODER] = new Int32('optype', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n  }\n\n  decodeFromBytes(bc) {\n    return this[P_CODER].decodeFromBytes(bc);\n  }\n\n  encodeToBytes(value) {\n    return this[P_CODER].encodeToBytes(value);\n  }\n\n  get size() {\n    return this[P_CODER].size();\n  }\n}\n\nmodule.exports = OpType;\n"],"sourceRoot":""}