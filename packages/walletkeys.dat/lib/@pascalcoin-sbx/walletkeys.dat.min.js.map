{"version":3,"sources":["webpack://@pascalcoin-sbx/walletkeys.dat/webpack/universalModuleDefinition","webpack://@pascalcoin-sbx/walletkeys.dat/webpack/bootstrap","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/BC.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Endian.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/AbstractType.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int32.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/CompositeType.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/AbstractInt.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int16.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int8.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Currency.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/AccountNumber.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/Curve.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/BytesWithLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/BytesWithoutLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Keys/Curve.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/File.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/Key.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/KeyCoder.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Base58.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/PascalCoinInfo.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bn.js/lib/bn.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Sha.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Util.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/AccountName.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/OperationHash.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/PublicKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/Int64.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/StringWithLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/StringWithoutLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Core/BytesFixedLength.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/AccountNumber.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/NOperation.js","webpack://@pascalcoin-sbx/walletkeys.dat/./index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/(webpack)/buildin/global.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/(webpack)/buildin/module.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@pascalcoin-sbx/walletkeys.dat//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Types/Keys/KeyPair.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/index.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Repeating.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Decissive.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Keys/PublicKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Keys/PrivateKey.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/AccountName.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/Currency.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/OpType.js","webpack://@pascalcoin-sbx/walletkeys.dat/../common/src/Coding/Pascal/OperationHash.js","webpack://@pascalcoin-sbx/walletkeys.dat/./src/FileCoder.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Buffer","Endian","require","P_BUFFER","BC","constructor","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","e","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","readInt8","offset","unsigned","readInt16","endian","detect","method","readInt32","buf","allocUnsafe","split","size","pos","splitted","push","detected","BIG_ENDIAN","LITTLE_ENDIAN","b","ArrayBuffer","a","Uint32Array","P_ID","P_FIXED_VALUE","P_HAS_FIXED_VALUE","P_DESCRIPTION","id","hasFixedValue","fixedValue","encodedSize","decodeFromBytes","options","all","encodeToBytes","withFixedValue","description","undefined","canDecode","AbstractInt","super","fromInt32","AbstractType","P_SUBTYPES","P_SIZE_ENCODED","subTypes","addSubType","field","toArray","obj","forEach","subType","values","objOrArray","empty","idx","subTypeValue","Array","isArray","P_ENDIAN","P_UNSIGNED","fromInt16","fromInt8","Base58","PascalCoinInfo","Sha","Util","Types","Coding","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","TypeError","array","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","isBuffer","len","checked","copy","val","type","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","readUInt16BE","foundIndex","found","j","hexWrite","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","x","y","list","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","BN","P_VALUE","toFixed","base","dm","divmod","mod","div","isNegative","Currency","pasc","isBN","negative","substring","comps","whole","fraction","molina","add","neg","isVague","toStringOpt","decimals","RegExp","toMolina","addValue","fromMolina","subValue","toPositive","isNeg","eq","gt","lt","lteq","lte","gteq","gte","bn","serialize","pascal","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","AccountNumber","account","map","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","keys","xylPublicKey","xOrY","lPrivateKey","supported","Int8","Int16","Int32","BytesWithoutLength","P_LENGTH_FIELD","P_BYTES_FIELD","P_HAS_LEADING_ZB","byteSize","lengthId","lengthDesc","hasLeadingZeroByte","lengthField","encoded","CurveType","P_MAGIC","P_VERSION","P_KEYS","magic","version","countKeys","addKey","P_NAME","P_PUBKEY","P_ENC_PRIVATE_KEY","publicKey","encryptedPrivateKey","Key","CompositeType","Core","StringWithLength","Pascal","Keys","PublicKey","BytesWithLength","decoded","bs58","encode","decode","block","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","MAX_PAYLOAD_LENGTH","assert","msg","inherits","ctor","superCtor","super_","TempCtor","number","words","red","_init","wordSize","parseHex","parseBase","num","left","right","cmp","_initNumber","_initArray","_parseHex","_parseBase","strip","ceil","w","off","limbLen","limbPow","total","word","imuln","_iaddn","dest","clone","_expand","_normSign","zeros","groupSizes","groupBases","smallMulTo","carry","k","ncarry","rword","maxJ","padding","groupSize","groupBase","isZero","modn","idivn","toNumber","toBuffer","toArrayLike","ArrayType","reqLength","q","andln","iushrn","clz32","_countBits","_zeroBits","bitLength","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","comb10MulTo","mid","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","jumboMulTo","FFTM","mulp","mulTo","hncarry","bigMulTo","makeRBT","N","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","rtwdf","cos","PI","itwdf","sin","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","muln","sqr","isqr","toBitArray","iushln","bits","carryMask","newCarry","ishln","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","shift","_wordDiv","bhi","diff","qj","positive","divn","umod","divRound","half","r2","acc","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gten","ltn","lten","eqn","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","input","output","outLen","next","mod3","one","nOne","lpow","z","inv","wnd","current","currentLen","mont","u","sha256","sha512","buffers","hasher","SHA256","update","digest","SHA512","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c2","c3","bin2longbin","longbin","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","ind","litteendian","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","ALLOWED_ALL","ALLOWED_START","AccountName","validate","toStringEscaped","c1","P_BLOCK","P_N_OPERATION","P_MD160","nOperation","md160","opHash","ignoreBlock","blockResult","P_KEY","P_CURVE","privateKeyLength","ec","P_X","P_XL","P_Y","P_YL","yl","xl","ecdh","validate64Bit","isUnsigned","StringWithoutLength","P_STRING_FIELD","P_SIZE","AccountNumberType","File","KeyCoder","FileCoder","basex","ALPHABET","BASE_MAP","xc","BASE","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","Function","window","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","isLE","mLen","eLen","eMax","eBias","nBits","NaN","rt","LN2","webpackPolyfill","deprecate","paths","children","base_1","hashSize","K","init","H","bufferIndex","count","h0","h1","h2","h3","h4","h5","h6","h7","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","OperationHash","PrivateKey","KeyPair","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","Repeating","Decissive","Int64","BytesFixedLength","NOperation","OpType","P_REPEAT_LIMIT","P_REPEAT_MARKER","P_TYPE","repeatLimit","repeatMarker","result","counter","item","repeatingType","P_SUBTYPE_RESOLVER","P_MARKER_FIELD","markerField","subTypeResolver","PublicKeyType","omitXYLenghts","encodeToBase58","prefix","suffix","raw","decodeFromBase58","base58","PrivateKeyType","AccountNameType","CurrencyType","P_INT_TYPE","intType","BytesWithFixedLength","OperationHashType","decissiveCoder","versionValue","V100Coder","keyFile","versioned"],"mappings":"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","file":"@pascalcoin-sbx/walletkeys.dat.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@pascalcoin-sbx/walletkeys.dat\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@pascalcoin-sbx/walletkeys.dat\"] = factory();\n\telse\n\t\troot[\"@pascalcoin-sbx/walletkeys.dat\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 35);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./Endian');\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      try {\n        return BC.fromHex(data);\n      } catch (e) {\n        return BC.fromString(data);\n      }\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n   * Gets an empty BC.\n   *\n   * @returns {BC}\n   */\n  static empty() {\n    return BC.from([]);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str, 'utf8'));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString('utf8');\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end = null) {\n    if (end === null) {\n      return new BC(this[P_BUFFER].slice(start));\n    }\n\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n\n  /**\n   * Reads an 8 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @returns {Number}\n   */\n  readInt8(offset, unsigned = true) {\n    return this[P_BUFFER][unsigned ? 'readUInt8' : 'readInt8'](offset);\n  }\n\n  /**\n   * Reads a 16 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt16(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int16${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Reads a 32 bit integer value from the bc from the given offset.\n   *\n   * @param {Number} offset\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {Number}\n   */\n  readInt32(offset, unsigned = true, endian = Endian.detect()) {\n    const method = `read${unsigned ? 'U' : ''}Int32${endian}`;\n\n    return this[P_BUFFER][method](offset);\n  }\n\n  /**\n   * Creates an 8 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @returns {BC}\n   */\n  static fromInt8(value, unsigned = true) {\n    const method = `write${unsigned ? 'U' : ''}Int8`;\n    const buf = Buffer.allocUnsafe(1);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 16 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt16(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int16${endian}`;\n    const buf = Buffer.allocUnsafe(2);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Creates a 32 bit integer BC.\n   *\n   * @param {Number} value\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   * @returns {BC}\n   */\n  static fromInt32(value, unsigned = true, endian = Endian.detect()) {\n    const method = `write${unsigned ? 'U' : ''}Int32${endian}`;\n    const buf = Buffer.allocUnsafe(4);\n\n    buf[method](value);\n    return new BC(buf);\n  }\n\n  /**\n   * Small helper to split a byte collection.\n   *\n   * @param {Number} size\n   * @return {BC[]}\n   */\n  split(size) {\n    let pos = 0;\n\n    let splitted = [];\n\n    for (; pos < this.length; pos += size) {\n      splitted.push(this.slice(pos, pos + size));\n    }\n\n    return splitted;\n  }\n\n}\n\nmodule.exports = BC;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nlet detected = null;\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    if (detected === null) {\n      const b = new ArrayBuffer(4);\n      const a = new Uint32Array(b);\n      const c = new Uint8Array(b);\n\n      a[0] = 0xdeadbeef;\n      if (c[0] === 0xef) {\n        detected = Endian.LITTLE_ENDIAN;\n      }\n      if (c[0] === 0xde) {\n        detected = Endian.BIG_ENDIAN;\n      }\n    }\n\n    return detected;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_ID = Symbol('id');\nconst P_FIXED_VALUE = Symbol('fixed_value');\nconst P_HAS_FIXED_VALUE = Symbol('has_fixed_value');\nconst P_DESCRIPTION = Symbol('description');\n\n/**\n * Abstract field type to encode and decode values. Abstracts encodeToBytes and decodeFromBytes as\n * basic implementations but in fact it can be anything.\n */\nclass AbstractType {\n  /**\n   * Constructor.\n   *\n   * @param {string|null} id\n   */\n  constructor(id = null) {\n    this[P_ID] = id;\n    this[P_HAS_FIXED_VALUE] = false;\n  }\n\n  /**\n   * Gets the field ident.\n   *\n   * @returns {String}\n   */\n  get id() {\n    return this[P_ID];\n  }\n\n  /**\n   * Gets a value indicating whether the field type has a fixed value.\n   *\n   * @returns {Boolean}\n   */\n  get hasFixedValue() {\n    return this[P_HAS_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the fixed value.\n   *\n   * @returns {*}\n   */\n  get fixedValue() {\n    return this[P_FIXED_VALUE];\n  }\n\n  /**\n   * Gets the encoded size of the type.\n   *\n   * @return {Number}\n   */\n  get encodedSize() {\n    throw new Error('Encoded size getter not implemented');\n  }\n\n  /**\n   * Decodes a value using the rules defined in the method from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    throw new Error('Missing implementation for decodeFromBytes.');\n  }\n\n  /**\n   * Returns the encoded bytes for the given value.\n   *\n   * @param {*} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    throw new Error('Missing implementation for encodeToBytes.');\n  }\n\n  /**\n   * Sets a fixed value.\n   *\n   * @param {*} value\n   * @returns {AbstractType}\n   */\n  withFixedValue(value) {\n    this[P_FIXED_VALUE] = value;\n    this[P_HAS_FIXED_VALUE] = true;\n    return this;\n  }\n\n  /**\n   * Sets the description and returns the type or gets the description itself.\n   *\n   * @param {String} description\n   * @returns {AbstractType|String}\n   */\n  description(description = null) {\n    if (description === null) {\n      return this[P_DESCRIPTION];\n    }\n\n    if (this[P_DESCRIPTION] === undefined) {\n      this[P_DESCRIPTION] = [];\n    }\n    this[P_DESCRIPTION].push(description);\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the type can be decoded. It is\n   * not possible in some circumstances.\n   *\n   * @return {boolean}\n   */\n  get canDecode() {\n    return true;\n  }\n}\n\nmodule.exports = AbstractType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for 32bit int values.\n */\nclass Int32 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int32', unsigned, endian);\n    this.description('4byte 32bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 4;\n  }\n\n  /**\n   * Reads the given int32 value.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt32(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Appends the given Int32 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt32(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int32;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SUBTYPES = Symbol('subtypes');\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A Type that itself is made up of multiple other (sub-)types.\n */\nclass CompositeType extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id) {\n    super(id || 'composite_type');\n    super.description('A type that itself is made up of multiple other types.');\n    this[P_SUBTYPES] = [];\n  }\n\n  /**\n   * Gets all subtypes.\n   *\n   * @returns {Array}\n   */\n  get subTypes() {\n    return this[P_SUBTYPES];\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Adds a new field (type) definition.\n   *\n   * @param {AbstractType} field\n   */\n  addSubType(field) {\n    this[P_SUBTYPES].push(field);\n    return this;\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {*}\n   */\n  decodeFromBytes(bc, options = { toArray: false }, all = null) {\n    if (this.canDecode === false) {\n      throw new Error('This type cannot be decoded.');\n    }\n    const obj = {};\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    this.subTypes.forEach((subType) => {\n      obj[subType.id] = subType.decodeFromBytes(bc.slice(offset), options, obj);\n      offset += subType.encodedSize;\n    });\n    this[P_SIZE_ENCODED] = offset;\n\n    return options.toArray ? Object.values(obj) : obj;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array|*} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let bc = BC.empty();\n\n    this.subTypes.forEach((subType, idx) => {\n      let subTypeValue;\n\n      if (subType.hasFixedValue) {\n        subTypeValue = subType.fixedValue;\n      } else {\n        subTypeValue = Array.isArray(objOrArray) ? objOrArray[idx] : objOrArray[subType.id];\n      }\n\n      // we will use the first available\n      bc = bc.append(subType.encodeToBytes(subTypeValue, objOrArray));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = CompositeType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst P_ENDIAN = Symbol('endian');\nconst P_UNSIGNED = Symbol('unsigned');\n\n/**\n * Abstract integer field type.\n */\nclass AbstractInt extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id);\n    this[P_UNSIGNED] = unsigned;\n    this[P_ENDIAN] = endian;\n  }\n\n  /**\n   * Gets the endianness.\n   *\n   * @returns {String}\n   */\n  get endian() {\n    return this[P_ENDIAN];\n  }\n\n  /**\n   * Gets a value indicating whether the value is an unsigned integer.\n   *\n   * @returns {Boolean}\n   */\n  get unsigned() {\n    return this[P_UNSIGNED];\n  }\n}\n\nmodule.exports = AbstractInt;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\n\n/**\n * Field type for a 16bit int value.\n */\nclass Int16 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned, endian) {\n    super(id || 'int16', unsigned, endian);\n    this.description('2byte 16bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 2;\n  }\n\n  /**\n   * Decodes the int16 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt16(0, this.unsigned, this.endian);\n  }\n\n  /**\n   * Encodes the given Int16 value to a byte sequence.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt16(value, this.unsigned, this.endian);\n  }\n}\n\nmodule.exports = Int16;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\n/**\n * Fields type for an 8Bit int value.\n */\nclass Int8 extends AbstractInt {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   */\n  constructor(id, unsigned) {\n    super(id || 'int8', unsigned, Endian.LITTLE_ENDIAN);\n    this.description('1byte 8bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 1;\n  }\n\n  /**\n   * Reads the int8 value from the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {Number|*}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).readInt8(0, this.unsigned);\n  }\n\n  /**\n   * Encodes the given int8 value.\n   *\n   * @param {Number} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    return BC.fromInt8(value, this.unsigned);\n  }\n}\n\nmodule.exports = Int8;\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  PascalCoinInfo: require('./src/PascalCoinInfo'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types'),\n  Coding: require('./src/Coding')\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BN = require('bn.js');\n\nconst P_VALUE = Symbol('value');\n\nfunction toFixed(x) {\n  let base = new BN(10).pow(new BN(4));\n  let dm = x.divmod(base);\n\n  let mod = dm.mod.toString(10, 4);\n  let m = dm.div.toString();\n\n  let isNegative = false;\n\n  if (x.toString().substr(0, 1) === '-') {\n    if (m.substr(0, 1) === '-') {\n      m = m.substr(1);\n    }\n    if (mod.substr(0, 1) === '-') {\n      mod = mod.substr(1);\n    }\n    isNegative = true;\n  }\n\n  return `${isNegative ? '-' : ''}${m}.${mod}`;\n}\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (BN.isBN(pasc)) {\n      this[P_VALUE] = pasc;\n      return;\n    }\n\n    pasc = pasc.toString();\n    pasc = pasc.split(',').join(''); // remove commas\n    // now split the '.'\n\n    const ten = new BN(10);\n    const base = ten.pow(new BN(4));\n\n    // Is it negative?\n    let negative = (pasc.substring(0, 1) === '-');\n\n    if (negative) {\n      pasc = pasc.substring(1);\n    }\n\n    if (pasc === '.') {\n      throw new Error(\n        `Invalid value ${pasc} cannot be converted to` +\n          ' base unit with 4 decimals.');\n    }\n\n    // Split it into a whole and fractional part\n    let comps = pasc.split('.');\n\n    if (comps.length > 2) { throw new Error('Too many decimal points'); }\n\n    let whole = comps[0], fraction = comps[1];\n\n    if (!whole) { whole = '0'; }\n    if (!fraction) { fraction = '0'; }\n    if (fraction.length > 4) {\n      throw new Error('Too many decimal places');\n    }\n\n    while (fraction.length < 4) {\n      fraction += '0';\n    }\n\n    whole = new BN(whole);\n    fraction = new BN(fraction);\n    let molina = (whole.mul(base)).add(fraction);\n\n    if (negative) {\n      molina = molina.neg();\n    }\n\n    this[P_VALUE] = new BN(molina.toString(10), 10);\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BN(molina.toString())\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return toFixed(this[P_VALUE]);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return toFixed(this[P_VALUE])\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return this[P_VALUE].toString();\n  }\n\n  /**\n   * Adds the given value to the current value and returns a **new**\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} addValue\n   * @returns {Currency}\n   */\n  add(addValue) {\n    return new Currency(\n      this.value.add(new Currency(addValue).value),\n    );\n  }\n\n  /**\n   * Adds the given value to the current value and returns a **new**\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} addValue\n   * @returns {Currency}\n   */\n  mul(val) {\n    return Currency.fromMolina(\n      this.value.mul(new BN(val))\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.sub(new Currency(subValue).value)\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (this[P_VALUE].isNeg() === true) {\n      return new Currency(\n        this[P_VALUE].neg(),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].eq(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].gt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].lt(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].lte(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].gte(new Currency(value).value);\n  }\n\n  get bn() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst PascalCoinInfo = require('../PascalCoinInfo');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = PascalCoinInfo.isDeveloperReward(this[P_CREATED_IN_BLOCK]) &&\n        this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\nconst BytesWithoutLength = require('./BytesWithoutLength');\nconst Endian = require('./../../Endian');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_BYTES_FIELD = Symbol('bytes_field');\nconst P_HAS_LEADING_ZB = Symbol('has_leading_zerobyte');\n\n/**\n * A field type to write dynamic content in form of bytes (prepends the length).\n */\nclass BytesWithLength extends AbstractType {\n  /**\n   * Constructor\n   *\n   * @param {string} id\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize = 1, lengthId = 'length', lengthDesc = null,\n    endian = Endian.LITTLE_ENDIAN, hasLeadingZeroByte = false) {\n    super(id || `bytes_with_length_${byteSize * 8}`);\n    this.description('Bytes with variable size prepended');\n    this[P_BYTES_FIELD] = new BytesWithoutLength('value');\n    this[P_HAS_LEADING_ZB] = hasLeadingZeroByte;\n\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8(lengthId, true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16(lengthId, true, endian);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32(lengthId, true, endian);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n\n    if (lengthDesc !== null) {\n      this[P_LENGTH_FIELD].description(lengthDesc);\n    }\n\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].encodedSize +\n      this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc)) +\n      (+this[P_HAS_LEADING_ZB]);\n    return this[P_BYTES_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize + (+this[P_HAS_LEADING_ZB]),\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    this[P_SIZE_ENCODED] = value.length + this[P_LENGTH_FIELD].encodedSize;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(\n      this[P_SIZE_ENCODED] - this[P_LENGTH_FIELD].encodedSize\n    );\n\n    return bc.append(this[P_BYTES_FIELD].encodeToBytes(value));\n  }\n\n  get lengthField() {\n    return this[P_LENGTH_FIELD];\n  }\n}\n\nmodule.exports = BytesWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write bytes without prepending the length. This cannot be decoded in some circumstances.\n */\nclass BytesWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'bytes_without_length');\n    this.description('Bytes without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * In fact this does nothing other than updating the internal size.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value);\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = BytesWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CurveType = require('./../../../Types/Keys/Curve');\nconst Endian = require('./../../../Endian');\nconst Int16 = require('./../../Core/Int16');\n\n/**\n * A special pascal type that can en/decode a curve id.\n */\nclass Curve extends Int16 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'curve', true, Endian.LITTLE_ENDIAN);\n    this.description('Key curve id');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurveType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new CurveType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurveType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.id);\n  }\n}\n\nmodule.exports = Curve;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_MAGIC = Symbol('magic');\nconst P_VERSION = Symbol('version');\nconst P_KEYS = Symbol('keys');\n\n/**\n * Represents the contents of a WalletKeys.dat file.\n */\nclass File {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} magic\n   * @param {Number} version\n   */\n  constructor(magic, version) {\n    this[P_MAGIC] = magic;\n    this[P_VERSION] = version;\n    this[P_KEYS] = [];\n  }\n\n  /**\n   * Gets the magic string.\n   *\n   * @return {String}\n   */\n  get magic() {\n    return this[P_MAGIC];\n  }\n\n  /**\n   * Gets the file version.\n   *\n   * @return {Number}\n   */\n  get version() {\n    return this[P_VERSION];\n  }\n\n  /**\n   * Gets the number of keys.\n   *\n   * @return {Number}\n   */\n  get countKeys() {\n    return this[P_KEYS].length;\n  }\n\n  /**\n   * Gets the keys in the file.\n   *\n   * @return {Key[]}\n   */\n  get keys() {\n    return this[P_KEYS];\n  }\n\n  /**\n   * Adds a key to the list of keys.\n   *\n   * @param {Key} key\n   */\n  addKey(key) {\n    this[P_KEYS].push(key);\n  }\n}\n\nmodule.exports = File;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_NAME = Symbol('name');\nconst P_PUBKEY = Symbol('public_key');\nconst P_ENC_PRIVATE_KEY = Symbol('encrypted_private_key');\n\n/**\n * Represents a key entry.\n */\nclass Key {\n  /**\n   * Constructor.\n   *\n   * @param {String} name\n   * @param {PublicKey} publicKey\n   * @param {BC} encryptedPrivateKey\n   */\n  constructor(name, publicKey, encryptedPrivateKey) {\n    this[P_NAME] = name;\n    this[P_PUBKEY] = publicKey;\n    this[P_ENC_PRIVATE_KEY] = encryptedPrivateKey;\n  }\n\n  /**\n   * Gets the name of the key.\n   *\n   * @return {String}\n   */\n  get name() {\n    return this[P_NAME];\n  }\n\n  /**\n   * Gets the associated public key.\n   *\n   * @return {PublicKey}\n   */\n  get publicKey() {\n    return this[P_PUBKEY];\n  }\n\n  /**\n   * Gets the encrypted private key.\n   *\n   * @return {BC}\n   */\n  get encryptedPrivateKey() {\n    return this[P_ENC_PRIVATE_KEY];\n  }\n}\n\nmodule.exports = Key;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Key = require('./Key');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * Coder for a key entry in the WalletKeys.dat file.\n */\nclass KeyCoder extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'walletkeys.dat_key');\n    this.description('The coder for a key entry in the walletkeys.dat file from the classic wallet.');\n    this.addSubType(\n      new Coding.Core.StringWithLength('name', 2, 'name_length', 'Length of the key name')\n        .description('The name of the key.')\n    );\n    this.addSubType(\n      new Coding.Pascal.Keys.PublicKey('publicKey')\n        .description('The public key')\n    );\n    this.addSubType(\n      new Coding.Core.BytesWithLength('encryptedPrivateKey', 2, 'encryptedPrivateKeyLength', 'Length of crypted')\n        .description('The crypted key')\n    );\n  }\n\n  /**\n   * Decodes the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Key}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc, options, all);\n\n    return new Key(decoded.name, decoded.publicKey, decoded.encryptedPrivateKey);\n  }\n}\n\nmodule.exports = KeyCoder;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('./Types/Currency');\n\n/**\n * Gets information about forks and features.\n */\nclass PascalCoinInfo {\n\n  /**\n   * Gets the min fee.\n   *\n   * @param {Number|null} block\n   * @returns {Currency}\n   * @constructor\n   */\n  static MIN_FEE(block = null) {\n    return Currency.fromMolina(1);\n  }\n\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return PascalCoinInfo.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= PascalCoinInfo.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return PascalCoinInfo.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= PascalCoinInfo.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return PascalCoinInfo.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= PascalCoinInfo.DEVELOPER_REWARD;\n  }\n\n  /**\n   * Gets the max payload length in bytes.\n   *\n   * @return {number}\n   * @constructor\n   */\n  static get MAX_PAYLOAD_LENGTH() {\n    return 255;\n  }\n}\n\nmodule.exports = PascalCoinInfo;\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   * Tests are not performed.\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  /* istanbul ignore next */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (this[P_MD160].length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n\n  /**\n   * Gets a value indicating whether the given ophash equals the current ophash.\n   *\n   * @param opHash\n   * @param ignoreBlock\n   * @return {boolean}\n   */\n  equals(opHash, ignoreBlock = false) {\n    let blockResult = true;\n\n    if (!ignoreBlock) {\n      blockResult = this.block === opHash.block;\n    }\n\n    return blockResult &&\n      this.nOperation === opHash.nOperation &&\n      this.account.account === opHash.account.account &&\n      this.md160.equals(opHash.md160);\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_KEY].length > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_KEY].length}`\n      );\n    }\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ecdh public key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    if (this.curve.id === Curve.CI_P521) {\n      return BC.concat(BC.fromHex('0400'), this.x, BC.fromHex('00'), this.y);\n    }\n\n    return BC.concat(BC.fromHex('04'), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractInt = require('./AbstractInt');\nconst BC = require('./../../BC');\nconst Endian = require('./../../Endian');\nconst BN = require('bn.js');\n\nfunction validate64Bit(isUnsigned, value) {\n  if (isUnsigned) {\n    if (value.isNeg()) {\n      throw new Error('64bit value is negative. Only signed allowed.');\n    } else if (value.gt(new BN('18446744073709551615'))) {\n      throw new Error('Invalid unsigned 64 bit value.');\n    }\n  } else if (!isUnsigned) {\n    if (value.gt(new BN('9223372036854775807')) || value.lt(new BN('-9223372036854775808'))) {\n      throw new Error('Invalid signed 64 bit value.');\n    }\n  }\n\n  return value;\n}\n\n/**\n * Field type for 64bit int values using BN.js.\n */\nclass Int64 extends AbstractInt {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Boolean} unsigned\n   * @param {String} endian\n   */\n  constructor(id, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'int64', unsigned, endian);\n    this.description('8byte 64bit int value');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return 8;\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BN}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let value = new BN(BC.from(bc).slice(0, this.encodedSize).buffer, 10, this.endian.toLowerCase());\n\n    if (!this.unsigned) {\n      value = value.fromTwos(64);\n    }\n\n    return validate64Bit(this.unsigned, value);\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {BN} value\n   */\n  encodeToBytes(value) {\n    value = validate64Bit(this.unsigned, value);\n    if (!this.unsigned) {\n      value = value.toTwos(64);\n    }\n\n    return BC.from(value.toBuffer(this.endian.toLowerCase(), this.encodedSize));\n  }\n}\n\nmodule.exports = Int64;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../../BC');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./Int8');\nconst Int16 = require('./Int16');\nconst Int32 = require('./Int32');\n\nconst StringWithoutLength = require('./StringWithoutLength');\nconst Endian = require('./../../Endian');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_HAS_LEADING_ZB = Symbol('has_leading_zerobyte');\nconst P_LENGTH_FIELD = Symbol('length_field');\nconst P_STRING_FIELD = Symbol('bytes_field');\n\n/**\n * A field type to write dynamic strings (prepends the length).\n */\nclass StringWithLength extends AbstractType {\n\n  constructor(id, byteSize = 1, lengthId = 'length', lengthDesc = null,\n    endian = Endian.LITTLE_ENDIAN, hasLeadingZeroByte = false) {\n    super(id || `bytes_size${byteSize * 8}`);\n    this.description('String with size prepended');\n    this[P_STRING_FIELD] = new StringWithoutLength('value');\n    this[P_HAS_LEADING_ZB] = hasLeadingZeroByte;\n    switch (byteSize) {\n      case 1:\n        this[P_LENGTH_FIELD] = new Int8(lengthId, true);\n        break;\n      case 2:\n        this[P_LENGTH_FIELD] = new Int16(lengthId, true, endian);\n        break;\n      case 4:\n        this[P_LENGTH_FIELD] = new Int32(lengthId, true, endian);\n        break;\n      default:\n        throw new Error('ByteSize must be either 1, 2 or 4');\n    }\n\n    if (lengthDesc !== null) {\n      this[P_LENGTH_FIELD].description(lengthDesc);\n    }\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    this[P_SIZE_ENCODED] = this[P_LENGTH_FIELD].encodedSize +\n      this[P_LENGTH_FIELD].decodeFromBytes(BC.from(bc)) +\n      (+this[P_HAS_LEADING_ZB]);\n    return this[P_STRING_FIELD].decodeFromBytes(\n      bc.slice(\n        this[P_LENGTH_FIELD].encodedSize + (+this[P_HAS_LEADING_ZB]),\n        this[P_SIZE_ENCODED]\n      )\n    );\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    this[P_SIZE_ENCODED] = value.length;\n    let bc = this[P_LENGTH_FIELD].encodeToBytes(this[P_SIZE_ENCODED]);\n\n    if (this[P_HAS_LEADING_ZB]) {\n      bc = bc.append('00');\n    }\n\n    return bc.append(this[P_STRING_FIELD].encodeToBytes(value));\n  }\n}\n\nmodule.exports = StringWithLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\n\n/**\n * A field type to write dynamic strings without prepending the length.\n */\nclass StringWithoutLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'string_without_length');\n    this.description('Single string value without length prepended.');\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the string value from the given bytes\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {String}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).toString();\n  }\n\n  /**\n   * Encodes the given value.\n   *\n   * @param {String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    let encoded = BC.from(value, 'string');\n\n    this[P_SIZE_ENCODED] = encoded.length;\n    return encoded;\n  }\n}\n\nmodule.exports = StringWithoutLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AbstractType = require('./../AbstractType');\nconst BC = require('./../../BC');\n\nconst P_SIZE = Symbol('size');\n\n/**\n * A field type to encode and decode bytes with a fixed length.\n */\nclass BytesFixedLength extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   * @param {Number} length\n   */\n  constructor(id, length) {\n    super(id || 'bytes_fixed_length_' + length);\n    this.description('Bytes with a fixed length of ' + length);\n    this[P_SIZE] = length;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE];\n  }\n\n  /**\n   * Returns the values of the given bc in the configured length.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {BC}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return BC.from(bc).slice(0, this[P_SIZE]);\n  }\n\n  /**\n   * Encodes the given value to a collection of bytes.\n   *\n   * @param {Buffer|Uint8Array|BC|String} value\n   * @returns {BC}\n   */\n  encodeToBytes(value) {\n    value = BC.from(value);\n    return value.slice(0, this[P_SIZE]);\n  }\n}\n\nmodule.exports = BytesFixedLength;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNumberType = require('./../../Types/AccountNumber');\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass AccountNumber extends Int32 {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'account', true, Endian.LITTLE_ENDIAN);\n    this.description('An account number');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNumberType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNumberType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNumberType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.account);\n  }\n}\n\nmodule.exports = AccountNumber;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst Int32 = require('./../Core/Int32');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass NOperation extends Int32 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'nOperation', true, Endian.LITTLE_ENDIAN);\n    this.description('Accounts n_operation value.');\n  }\n}\n\nmodule.exports = NOperation;\n","module.exports = {\n  File: require('./src/File'),\n  Key: require('./src/Key'),\n  KeyCoder: require('./src/KeyCoder'),\n  FileCoder: require('./src/FileCoder')\n};\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nmodule.exports = {\n  AbstractType: require('./AbstractType'),\n  CompositeType: require('./CompositeType'),\n  Repeating: require('./Repeating'),\n  Decissive: require('./Decissive'),\n  Core: {\n    AbstractInt: require('./Core/AbstractInt'),\n    Int8: require('./Core/Int8'),\n    Int16: require('./Core/Int16'),\n    Int32: require('./Core/Int32'),\n    Int64: require('./Core/Int64'),\n    StringWithLength: require('./Core/StringWithLength'),\n    StringWithoutLength: require('./Core/StringWithoutLength'),\n    BytesWithLength: require('./Core/BytesWithLength'),\n    BytesWithoutLength: require('./Core/BytesWithoutLength'),\n    BytesFixedLength: require('./Core/BytesFixedLength')\n  },\n  Pascal: {\n    Keys: {\n      Curve: require('./Pascal/Keys/Curve'),\n      PublicKey: require('./Pascal/Keys/PublicKey'),\n      PrivateKey: require('./Pascal/Keys/PrivateKey')\n    },\n    AccountNumber: require('./Pascal/AccountNumber'),\n    AccountName: require('./Pascal/AccountName'),\n    Currency: require('./Pascal/Currency'),\n    NOperation: require('./Pascal/NOperation'),\n    OpType: require('./Pascal/OpType'),\n    OperationHash: require('./Pascal/OperationHash')\n  }\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('./../BC');\nconst AbstractType = require('./AbstractType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_REPEAT_LIMIT = Symbol('repeat_limit');\nconst P_REPEAT_MARKER = Symbol('repeat_marker');\nconst P_TYPE = Symbol('type');\n\n/**\n * A Type that itself is made up of multiple other types.\n */\nclass Repeating extends AbstractType {\n  /**\n   * Constructor\n   */\n  constructor(id, type, repeatLimit = -1, repeatMarker = null) {\n    super(id || 'repeating');\n    super.description('A type that itself has one repeating type that will ' +\n      'be written / read until the limit is reached or data is empty.');\n    this[P_TYPE] = type;\n    this[P_REPEAT_LIMIT] = repeatLimit;\n    this[P_REPEAT_MARKER] = repeatMarker;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let result = [];\n    let offset = 0;\n\n    bc = BC.from(bc);\n\n    let limit = this[P_REPEAT_MARKER] !== null ? all[this[P_REPEAT_MARKER]] : this[P_REPEAT_LIMIT];\n    let counter = limit;\n\n    while ((limit > -1 && counter > 0) || (limit === -1 && bc.length > offset)) {\n      const decoded = this[P_TYPE].decodeFromBytes(bc.slice(offset));\n\n      result.push(decoded);\n      offset += this[P_TYPE].encodedSize;\n      counter--;\n    }\n\n    this[P_SIZE_ENCODED] = offset;\n\n    return result;\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(arr) {\n    let bc = BC.empty();\n\n    arr.forEach((item, idx) => {\n      if (idx >= this[P_REPEAT_LIMIT] && this[P_REPEAT_LIMIT] > -1) {\n        return;\n      }\n      bc = bc.append(this[P_TYPE].encodeToBytes(item));\n    });\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n\n  get repeatingType() {\n    return this[P_TYPE];\n  }\n}\n\nmodule.exports = Repeating;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst CompositeType = require('./CompositeType');\n\nconst P_SIZE_ENCODED = Symbol('size_encoded');\nconst P_SUBTYPE_RESOLVER = Symbol('subtype_resolver');\nconst P_MARKER_FIELD = Symbol('marker_field');\n\n/**\n * A Type that itself is made up of multiple other types. The types are selected dynamically\n * depending on the given resolver.\n */\nclass Decissive extends CompositeType {\n  /**\n   * Constructor\n   */\n  constructor(id, markerField, subTypeResolver) {\n    super(id || 'decissive');\n    super.description('A type that itself has many sub types but only some are triggere based on a marker.');\n    this[P_SUBTYPE_RESOLVER] = subTypeResolver;\n    this[P_MARKER_FIELD] = markerField;\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_SIZE_ENCODED];\n  }\n\n  /**\n   * Decodes the given bytes into an object.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Object}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n\n    this[P_SIZE_ENCODED] = subType.encodedSize;\n    return subType.decodeFromBytes(bc, options, all);\n  }\n\n  /**\n   * Encodes the given object to a list of bytes.\n   *\n   * @param {Object|Array} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray, all) {\n    let subType = this[P_SUBTYPE_RESOLVER](all[this[P_MARKER_FIELD]]);\n    let bc = subType.encodeToBytes(objOrArray);\n\n    this[P_SIZE_ENCODED] = bc.length;\n    return bc;\n  }\n}\n\nmodule.exports = Decissive;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst BytesWithoutLength = require('../../Core/BytesWithoutLength');\nconst CompositeType = require('../../CompositeType');\nconst BC = require('../../../BC');\nconst Sha = require('../../../Sha');\nconst Base58 = require('../../../Base58');\nconst PublicKeyType = require('./../../../../src/Types/Keys/PublicKey');\n\n/**\n * A Public Key value.\n */\nclass PublicKey extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   * @param {Boolean} omitXYLenghts\n   */\n  constructor(id = null, omitXYLenghts = false) {\n    super(id || 'public_key');\n    this.addSubType(new Curve('curve'));\n\n    // oh come on..\n    if (omitXYLenghts) {\n      this.addSubType(\n        new BytesWithoutLength('x')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(new BytesWithoutLength('y'));\n    } else {\n      this.addSubType(\n        new BytesWithLength('x', 2, 'x_length', 'Length of X value')\n          .description('The X value of the public key.')\n      );\n      this.addSubType(\n        new BytesWithLength('y', 2, 'y_length', 'Length of Y value')\n          .description('The X value of the public key.')\n      );\n    }\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PublicKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PublicKeyType(decoded.x, decoded.y, decoded.curve);\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  encodeToBase58(publicKey) {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encodeToBytes(publicKey);\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  decodeFromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return this.decodeFromBytes(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Curve = require('./Curve');\nconst BytesWithLength = require('../../Core/BytesWithLength');\nconst CompositeType = require('../../CompositeType');\nconst PrivateKeyType = require('./../../../../src/Types/Keys/PrivateKey');\n\n/**\n * A coder for a private key.\n */\nclass PrivateKey extends CompositeType {\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'private_key');\n    this.addSubType(\n      new Curve('curve')\n    );\n    this.addSubType(\n      new BytesWithLength('key', 2)\n        .description('The private key value.')\n    );\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {PrivateKeyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new PrivateKeyType(decoded.key, decoded.curve);\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin PublicKey instance.\n   *\n   * @param {PrivateKeyType} value\n   * @returns {PrivateKeyType}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst AccountNameType = require('./../../Types/AccountName');\nconst StringWithLength = require('../Core/StringWithLength');\n\n/**\n * A pascal related type that can de/encode an account name.\n */\nclass AccountName extends StringWithLength {\n\n  /**\n   * Constructor\n   *\n   * @param {String} id\n   */\n  constructor(id = null, byteSize = 2) {\n    super(id || 'account_name', byteSize);\n    this.description('An account name');\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {AccountNameType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return new AccountNameType(super.decodeFromBytes(bc));\n  }\n\n  /**\n   *\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {AccountNameType} value\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.toString());\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Int64 = require('./../Core/Int64');\nconst CurrencyType = require('./../../Types/Currency');\nconst Endian = require('./../../Endian');\n\n/**\n * A special Int64 type that can handle pascalcoin currencies.\n */\nclass Currency extends Int64 {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null, unsigned = true, endian = Endian.LITTLE_ENDIAN) {\n    super(id || 'currency', unsigned, endian);\n    this.description('A type for currency values.');\n  }\n\n  /**\n   * Reads the pascal currency value from the given BC.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {CurrencyType}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return CurrencyType.fromMolina(super.decodeFromBytes(bc));\n  }\n\n  /**\n   * Appends the given currency value to the given BC.\n   *\n   * @param {CurrencyType} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value.bn);\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst AbstractType = require('./../AbstractType');\nconst Int8 = require('./../Core/Int8');\nconst Int16 = require('./../Core/Int16');\nconst Int32 = require('./../Core/Int32');\n\nconst P_INT_TYPE = Symbol('int_type');\n\n/**\n * A special Int32 type that can handle account number.\n */\nclass OpType extends AbstractType {\n\n  /**\n   * Constructor\n   *\n   * @param {Number} byteSize\n   */\n  constructor(id, byteSize) {\n    super(id || `optype_int${byteSize * 8}`);\n    switch (byteSize) {\n      case 1:\n        this[P_INT_TYPE] = new Int8('OpType[Int8]', true);\n        break;\n      case 2:\n        this[P_INT_TYPE] = new Int16('OpType[Int16]', true, Endian.LITTLE_ENDIAN);\n        break;\n      case 4:\n        this[P_INT_TYPE] = new Int32('OpType[Int32]', true, Endian.LITTLE_ENDIAN);\n        break;\n      default:\n        throw Error('Invalid byte size.');\n    }\n    this.description(`Operation type in ${byteSize * 8} bits`);\n  }\n\n  /**\n   * @inheritDoc AbstractType#encodedSize\n   */\n  get encodedSize() {\n    return this[P_INT_TYPE].encodedSize;\n  }\n\n  /**\n   * Decodes and returns the optype.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {Number}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    return this[P_INT_TYPE].decodeFromBytes(bc);\n  }\n\n  /**\n   * Encodes the given optype to bytes.\n   *\n   * @param {Number} value\n   * @return {*}\n   */\n  encodeToBytes(value) {\n    return this[P_INT_TYPE].encodeToBytes(value);\n  }\n\n  get intType() {\n    return this[P_INT_TYPE];\n  }\n}\n\nmodule.exports = OpType;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Endian = require('./../../Endian');\nconst CompositeType = require('./../CompositeType');\nconst Int32 = require('./../Core/Int32');\nconst AccountNumber = require('./AccountNumber');\nconst BytesWithFixedLength = require('./../Core/BytesFixedLength');\nconst NOperation = require('./NOperation');\nconst OperationHashType = require('./../../Types/OperationHash');\n\n/**\n * Simple wrapper for an unsigned Int32 value (used for the n_operation value)\n */\nclass OperationHash extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'ophash');\n    this.description('A pascalCoin operation hash');\n\n    this.addSubType(\n      new Int32('block', true, Endian.LITTLE_ENDIAN)\n        .description('The block the operation is in.')\n    );\n    this.addSubType(\n      new AccountNumber('account')\n        .description('The account number that signed the operation.')\n    );\n    this.addSubType(\n      new NOperation('nOperation', 4)\n        .description('The n_operation value of the account with the current operation.')\n    );\n    this.addSubType(\n      new BytesWithFixedLength('md160', 20)\n        .description('The RIPEMD160 hash of the operation data.')\n    );\n  }\n\n  /**\n   * Reads a value and returns a new PascalCoin AccountNumber instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @returns {OperationHash}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc);\n\n    return new OperationHashType(decoded.block, decoded.account, decoded.nOperation, decoded.md160);\n  }\n\n  /**\n   * Appends the given pascalcoin account number to the BC.\n   *\n   * @param {OperationHash} value\n   * @return {BC}\n   */\n  encodeToBytes(value) {\n    return super.encodeToBytes(value);\n  }\n}\n\nmodule.exports = OperationHash;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Coding = require('@pascalcoin-sbx/common').Coding;\nconst Endian = require('@pascalcoin-sbx/common').Endian;\nconst File = require('./File');\nconst KeyCoder = require('./KeyCoder');\nconst CompositeType = Coding.CompositeType;\n\n/**\n * Coder for a WalletKeys.dat file from the classic wallet.\n */\nclass FileCoder extends CompositeType {\n\n  /**\n   * Constructor.\n   *\n   * @param {String} id\n   */\n  constructor(id = null) {\n    super(id || 'walletkeys.dat');\n    this.description('The coder for the walletkeys.dat file from the classic wallet.');\n    this.addSubType(\n      new Coding.Core.StringWithLength('magic', 1, 'magic_length', 'Length of the magic', Endian.LITTLE_ENDIAN, true)\n        .description('The name of the magic.')\n    );\n    this.addSubType(\n      new Coding.Core.Int32('version', true, Endian.LITTLE_ENDIAN)\n        .description('Version of file')\n    );\n    const decissiveCoder = new Coding.Decissive('versioned', 'version', (versionValue) => {\n      // Decide here when the version is updated, currently only 100 is supported\n      if (versionValue === 100 || true) {\n        const V100Coder = new Coding.CompositeType('v100');\n\n        V100Coder.addSubType(\n          new Coding.Core.Int32('countKeys', true, Endian.LITTLE_ENDIAN)\n            .description('The number of keys in the file')\n        );\n\n        V100Coder.addSubType(\n          new Coding.Repeating('keys', new KeyCoder('keys'), -1, 'countKeys')\n            .description('List of keys')\n        );\n\n        return V100Coder;\n      }\n\n      throw new Error('Invalid walletkeys version');\n    });\n\n    this.addSubType(decissiveCoder);\n  }\n\n  /**\n   * Decodes the given bytes.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @param {Object} options\n   * @param {*} all\n   * @return {File}\n   */\n  decodeFromBytes(bc, options = {}, all = null) {\n    const decoded = super.decodeFromBytes(bc, options, all);\n    const keyFile = new File(decoded.magic, decoded.version);\n\n    decoded.versioned.keys.forEach((key => {\n      keyFile.addKey(key);\n    }));\n\n    return keyFile;\n  }\n\n  /**\n   * Encodes the given File object to a list of bytes.\n   *\n   * @param {File} objOrArray\n   * @returns {BC}\n   */\n  encodeToBytes(objOrArray) {\n    let obj = {\n      magic: objOrArray.magic,\n      version: objOrArray.version,\n      versioned: {\n        countKeys: objOrArray.countKeys,\n        keys: objOrArray.keys\n      }\n    };\n\n    return super.encodeToBytes(obj);\n  }\n}\n\nmodule.exports = FileCoder;\n"],"sourceRoot":""}