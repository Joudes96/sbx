{"version":3,"sources":["webpack://@sbx/json-rpc/webpack/universalModuleDefinition","webpack://@sbx/json-rpc/webpack/bootstrap","webpack://@sbx/json-rpc/../common/index.js","webpack://@sbx/json-rpc/./src/Types/Abstract.js","webpack://@sbx/json-rpc/../common/src/BC.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isObject.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isFunction.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseGetTag.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isObjectLike.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isArray.js","webpack://@sbx/json-rpc/./src/Actions/BaseAction.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/buffer/index.js","webpack://@sbx/json-rpc/../common/src/Types/Keys/Curve.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_root.js","webpack://@sbx/json-rpc/./src/Actions/OperationAction.js","webpack://@sbx/json-rpc/./src/Executor.js","webpack://@sbx/json-rpc/../common/src/Base58.js","webpack://@sbx/json-rpc/(webpack)/buildin/global.js","webpack://@sbx/json-rpc/../common/src/History.js","webpack://@sbx/json-rpc/../common/src/Sha.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/base.js","webpack://@sbx/json-rpc/../common/src/Util.js","webpack://@sbx/json-rpc/../common/src/Types/AccountNumber.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bignumber.js/bignumber.js","webpack://@sbx/json-rpc/./src/Types/Block.js","webpack://@sbx/json-rpc/./src/Types/WalletPublicKey.js","webpack://@sbx/json-rpc/./src/Types/Account.js","webpack://@sbx/json-rpc/./src/Caller.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseAssignValue.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_defineProperty.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_Symbol.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_freeGlobal.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/eq.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/identity.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isArrayLike.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isLength.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isIndex.js","webpack://@sbx/json-rpc/(webpack)/buildin/module.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isUndefined.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/uuid/v4.js","webpack://@sbx/json-rpc/./src/Errors/ConnectionError.js","webpack://@sbx/json-rpc/./src/Errors/ResultError.js","webpack://@sbx/json-rpc/./src/Actions/PagedAction.js","webpack://@sbx/json-rpc/./src/Actions/SignOperationAction.js","webpack://@sbx/json-rpc/./src/Types/RawOperations.js","webpack://@sbx/json-rpc/./src/Types/NetProtocol.js","webpack://@sbx/json-rpc/./src/Types/NetStats.js","webpack://@sbx/json-rpc/./src/Types/NodeServer.js","webpack://@sbx/json-rpc/./src/Types/Sender.js","webpack://@sbx/json-rpc/./src/Types/Receiver.js","webpack://@sbx/json-rpc/./src/Types/Changer.js","webpack://@sbx/json-rpc/./index.js","webpack://@sbx/json-rpc/./src/Client.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bs58/index.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base-x/index.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/safe-buffer/index.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/base64-js/index.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/ieee754/index.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/isarray/index.js","webpack://@sbx/json-rpc/../common/src/Endian.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha256.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/mipher/dist/sha512.js","webpack://@sbx/json-rpc/../common/src/Types/index.js","webpack://@sbx/json-rpc/../common/src/Types/AccountName.js","webpack://@sbx/json-rpc/../common/src/Types/Currency.js","webpack://@sbx/json-rpc/../common/src/Types/OperationHash.js","webpack://@sbx/json-rpc/../common/src/Types/Keys/index.js","webpack://@sbx/json-rpc/../common/src/Types/Keys/PrivateKey.js","webpack://@sbx/json-rpc/../common/src/Types/Keys/PublicKey.js","webpack://@sbx/json-rpc/../common/src/Types/Keys/KeyPair.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/jayson/lib/client/browser.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/extend.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/assignIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_copyObject.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_assignValue.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_getNative.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseIsNative.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_getRawTag.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_objectToString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isMasked.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_coreJsData.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_toSource.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_getValue.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_createAssigner.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseRest.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_overRest.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_apply.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_setToString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseSetToString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/constant.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_shortOut.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isIterateeCall.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/keysIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_arrayLikeKeys.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseTimes.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isArguments.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseIsArguments.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isBuffer.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/stubFalse.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isTypedArray.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseIsTypedArray.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseUnary.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_nodeUtil.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseKeysIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isPrototype.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_nativeKeysIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/negate.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/uuid/lib/rng-browser.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/uuid/lib/bytesToUuid.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/jayson/lib/generateRequest.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/node-fetch/browser.js","webpack://@sbx/json-rpc/./src/Actions/index.js","webpack://@sbx/json-rpc/./src/Errors/index.js","webpack://@sbx/json-rpc/./src/Types/index.js","webpack://@sbx/json-rpc/./src/Types/NodeStatus.js","webpack://@sbx/json-rpc/./src/Types/Operation.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Base58","require","BC","Endian","History","Sha","Util","Types","P_INITIALIZATION_DATA","Abstract","constructor","initializationData","TypeError","__initializationData","Buffer","P_BUFFER","buffer","from","[object Object]","data","stringType","Uint8Array","fromHex","fromString","hex","strict","length","Error","test","str","int","nBytes","parseInt","toString","instance","prepend","repeat","toBinary","toHex","lowerCase","toLowerCase","toUpperCase","toInt","hexLength","switchEndian","match","reverse","join","slice","start","end","bytes","reduce","prev","curr","append","concat","equals","bc","compare","type","baseGetTag","isObject","asyncTag","funcTag","genTag","proxyTag","tag","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","undefined","isArray","Array","P_PARAMS","P_METHOD","P_EXECUTOR","method","params","executor","changeParam","execute","destinationType","executeTransformArray","executeTransformItem","isValid","global","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","allocUnsafe","ArrayBuffer","array","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","obj","isBuffer","len","checked","copy","val","fromObject","assertSize","size","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","a","x","y","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","inspect","max","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","CURVES","0","714","715","729","716","XYL_PUBKEYS","L_PRIVKEYS","ID","NAME","Curve","CN_SECP256K1","CN_P384","CN_SECT283K1","CN_P521","CI_SECP256K1","CI_P384","CI_SECT283K1","CI_P521","curve","values","keys","id","xylPublicKey","xOrY","lPrivateKey","supported","freeGlobal","freeSelf","Function","BaseAction","Currency","super","fee","payload","payload_method","withPayload","payloadMethod","password","pwd","withFee","P_CALLER","AccountNumber","AccountName","OperationHash","PublicKey","Keys","KeyPair","Block","WalletPublicKey","Account","caller","transformCallback","Promise","resolve","reject","newParams","forEach","field","item","newField","encode","publicKey","account","block","isVague","toStringOpt","transformRpcParams","then","response","catch","error","action","all","result","DestinationType","map","ri","bs58","decode","g","window","PIP_0010","INFLATION_REDUCTION","PIP_0009","RANDOM_HASH","PIP_0011","DEVELOPER_REWARD","sha256","sha512","buffers","hasher","SHA256","update","digest","SHA512","version","Convert","str2bin","bin","hex2bin","int2bin","integer","number2bin","f","Float64Array","base642bin","strlen","charAt","atob","split","decodingTable","Int8Array","sextet_a","sextet_b","sextet_c","sextet_d","triple","bin2hex","uppercase","bin2str","c2","c3","bin2longbin","longbin","Uint32Array","bin2number","bin2base64","url","btoa","encodingTable","octet_a","octet_b","octet_c","lh","rh","clear","xor","ind","litteendian","condition","whilst","P_ACCOUNT","P_CHECKSUM","P_CREATED_IN_BLOCK","P_IS_FOUNDATION_REWARD","splitted","calculateChecksum","isDeveloperReward","checksum","createdInBlock","isFoundationReward","accountNumber","__WEBPACK_AMD_DEFINE_RESULT__","globalObject","BigNumber","isNumeric","hasSymbol","iterator","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","z","xc","yc","k","intCheck","isOdd","toExponential","toFixedPoint","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","v","alphabet","caseChanged","isNum","_isBigNumber","search","substring","round","DEBUG","format","rm","c0","ne","maxOrMin","args","normalise","pop","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","gt","random","dp","rand","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","sign","callerIsToString","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","for","P_BLOCK","P_ENC_PUBKEY","P_REWARD","P_FEE","P_VER","P_VER_A","P_TIMESTAMP","P_TARGET","P_NONCE","P_PAYLOAD","P_SBH","P_OPH","P_POW","P_HASHRATEKHS","P_MATURATION","P_OPERATIONS","enc_pubkey","reward","ver","ver_a","timestamp","nonce","sbh","oph","hashratekhs","maturation","operations","verA","createdAccounts","P_NAME","P_CAN_USE","P_B58_PUBKEY","P_EC_NID","P_X","P_Y","can_use","b58_pubkey","ec_nid","canUse","base58PublicKey","ecNid","P_BALANCE","P_N_OPERATION","P_UPDATED_B","P_STATE","P_TYPE","P_LOCKED_UNTIL_BLOCK","P_PRICE","P_SELLER_ACCOUNT","P_PRIVATE_SALE","P_NEW_ENC_PUBKEY","STATE_LISTED","STATE_NORMAL","balance","n_operation","updated_b","state","locked_until_block","price","seller_account","private_sale","new_enc_pubkey","nOperation","updatedB","lockedUntilBlock","sellerAccount","privateSale","newPublicKey","isForSale","jaysonBrowserClient","fetch","ConnectionError","ResultError","P_CLIENT","host","request","callback","body","headers","Content-Type","text","err","message","writable","getNative","func","other","isFunction","isLength","reIsUint","webpackPolyfill","deprecate","paths","children","rng","bytesToUuid","options","rnds","ii","P_ORIGINAL","P_MESSAGE","originalFetchError","original","P_CODE","executeAllReport","reporter","executeAllTransformArrayReport","RawOperations","OperationAction","last_n_operation","rawoperations","withLastNOperation","lastNOperation","withRawOperations","P_AMOUNT","P_RAWOPERATIONS","amount","P_BRECEIVED","P_SERVERS_T","P_TSERVERS","P_TOTAL","P_BSEND","P_SERVERS","P_CLIENTS","P_ACTIVE","P_TCLIENTS","breceived","servers_t","tservers","total","bsend","servers","clients","active","tclients","serversT","P_PORT","P_LASTCON","P_ATTEMPTS","P_IP","port","lastcon","attempts","ip","P_NEW_NAME","P_NEW_TYPE","P_ACCOUNT_PRICE","new_name","new_type","account_price","newName","newType","accountPrice","Client","Executor","Caller","Actions","Errors","RPCCaller","PagedAction","SignOperationAction","rpcHostAddress","addNode","nodes","getAccount","getWalletAccounts","pubkey","getWalletAccountsCount","getWalletPublicKeys","getWalletPublicKey","getWalletCoins","getBlock","getBlocks","last","getBlockCount","getBlockOperation","opBlock","opblock","getBlockOperations","getAccountOperations","depth","getPendings","getPendingsCount","findOperation","opHash","ophash","findAccounts","onlyAccountsForSale","exact","minBalance","maxBalance","listed","min_balance","max_balance","sendTo","sender","changeKey","new_pubkey","listAccountForSale","accountTarget","accountSigner","account_target","account_signer","delistAccountForSale","buyAccount","buyerAccount","accountToPurchase","buyer_account","account_to_purchase","changeAccountInfo","operationsInfo","rawOperations","executeOperations","signChangeAccountInfo","signerPublicKey","signer_pubkey","signSendTo","senderPublicKey","targetPublicKey","sender_pubkey","target_pubkey","signChangeKey","oldPublicKey","old_pubkey","signListAccountForSale","nodeStatus","decodePubKey","payloadDecrypt","passwords","pwds","basex","BASE_MAP","LEADER","FACTOR","log","iFACTOR","decodeUnsafe","source","psz","zeroes","b256","it","vch","pbegin","pend","b58","copyProps","SafeBuffer","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","output","isLE","mLen","eLen","eMax","eBias","nBits","rt","LN2","BIG_ENDIAN","LITTLE_ENDIAN","detect","base_1","hashSize","K","init","H","bufferIndex","count","transform","h","h0","h1","h2","h3","h4","h5","h6","h7","w","msg","idx","hash","selftest","cumulative","sha","toBeHashed","gamma0xl","gamma0xh","gamma0l","gamma0h","gamma1xl","gamma1xh","gamma1l","gamma1h","wrl","wrh","wr16l","chl","majl","majh","sig0l","sig0h","krl","t1l","t1h","t2l","h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","P_VALUE","CHARS_TO_ESCAPE","REGEX_TO_ESCAPE","escapeRegex","ALLOWED_ALL","ALLOWED_START","validate","toStringEscaped","c1","MIN_FEE","pasc","molina","decimals","toMolina","parseFloat","add","addValue","subValue","toPositive","lteq","gteq","serialize","pascal","P_MD160","md160","fromInt","encodeAsPending","PrivateKey","P_KEY","P_CURVE","P_LENGTH","privateKeyLength","ec","encoded","P_XL","P_YL","yl","xl","ecdh","toBase58","raw","base58","decoded","P_PRIVATE_KEY","P_PUBLIC_KEY","privateKey","extend","isUndefined","negate","uuid","generateRequest","ClientBrowser","callServer","defaults","reviver","replacer","generator","isBatch","isRaw","hasCallback","JSON","stringify","_parseResponse","responseText","parse","isError","filter","copyObject","createAssigner","keysIn","assignIn","assignValue","baseAssignValue","props","customizer","isNew","index","newValue","objValue","baseIsNative","getValue","isMasked","toSource","reIsHostCtor","funcProto","objectProto","funcToString","reIsNative","nativeObjectToString","isOwn","unmasked","uid","coreJsData","maskSrcKey","exec","IE_PROTO","baseRest","isIterateeCall","assigner","sources","guard","identity","overRest","setToString","nativeMax","otherArgs","thisArg","baseSetToString","shortOut","constant","HOT_COUNT","HOT_SPAN","nativeNow","Date","now","lastCalled","stamp","isArrayLike","isIndex","arrayLikeKeys","baseKeysIn","baseTimes","isArguments","isTypedArray","inherited","isArr","isArg","isBuff","isType","skipIndexes","iteratee","baseIsArguments","isObjectLike","propertyIsEnumerable","argsTag","stubFalse","freeExports","nodeType","freeModule","baseIsTypedArray","baseUnary","nodeUtil","nodeIsTypedArray","typedArrayTags","freeProcess","process","types","binding","isPrototype","nativeKeysIn","isProto","Ctor","FUNC_ERROR_TEXT","predicate","msCrypto","rnds8","byteToHex","bth","isString","jsonrpc","stringTag","getGlobal","default","Headers","Request","Response","NodeStatus","NetStats","NetProtocol","NodeServer","Operation","Changer","Receiver","Sender","P_READY","P_READY_S","P_STATUS_S","P_LOCKED","P_BLOCKS","P_NODESERVERS","P_NETSTATS","P_VERSION","P_NETPROTOCOL","P_OPENSSL","ready","ready_s","status_s","locked","blocks","openssl","netprotocol","netstats","nodeservers","readyS","statusS","P_VALID","P_ERRORS","P_TIME","P_OPBLOCK","P_OPTYPE","P_OPTXT","P_OPHASH","P_OLD_OPHASH","P_SUBTYPE","P_SIGNER_ACCOUNT","P_CHANGERS","P_SENDERS","P_RECEIVERS","BLOCKCHAIN_REWARD","TRANSACTION","CHANGE_KEY","RECOVER_FUNDS","LIST_FOR_SALE","DELIST","BUY","CHANGE_KEY_ACCOUNT","CHANGE_ACCOUNT_INFO","MULTI_OPERATION","DATA","valid","errors","time","optype","optxt","old_ophash","subtype","signer_account","senders","receivers","changers","opType","opTxt","oldOpHash","signerAccount","isBlockchainReward","isTransaction","isChangeKey","isRecoverFunds","isListForSale","isDelist","isBuy","isChangeKeyAccount","isChangeAccountInfo","isMultiOperation","isData","isPending","isZeroFeeError"],"mappings":"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","file":"@sbx/json-rpc.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@sbx/json-rpc\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@sbx/json-rpc\"] = factory();\n\telse\n\t\troot[\"@sbx/json-rpc\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 49);\n","module.exports = {\n  Base58: require('./src/Base58'),\n  BC: require('./src/BC'),\n  Endian: require('./src/Endian'),\n  History: require('./src/History'),\n  Sha: require('./src/Sha'),\n  Util: require('./src/Util'),\n  Types: require('./src/Types')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_INITIALIZATION_DATA = Symbol('__initialization_data');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n  /**\n     * Constructor.\n     *\n     * @param {Object} initializationData\n     */\n  constructor(initializationData) {\n    if (new.target === Abstract) {\n      throw new TypeError('Cannot construct Abstract instances directly');\n    }\n\n    this[P_INITIALIZATION_DATA] = initializationData;\n  }\n\n  /**\n     * Gets the initialization data. This should normally not be used at all but\n     * in case there are new fields which are not implemented in the library yet,\n     * the user will still have access to it.\n     *\n     * @returns {Object}\n     */\n  get __initializationData() {\n    return this[P_INITIALIZATION_DATA];\n  }\n}\n\nmodule.exports = Abstract;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_BUFFER = Symbol('buffer');\n\n/**\n * A BC value as defined in PascalCoin. In essence its a wrapper for\n * a buffer.\n */\nclass BC {\n  /**\n     * Constructor\n     *\n   * @param {Buffer|Uint8Array} buffer\n     */\n  constructor(buffer) {\n    this[P_BUFFER] = Buffer.from(buffer);\n  }\n\n  /**\n   * Gets a BC instance from the given value. If a string it expects it to be\n   * in hex format.\n   *\n   * This method it called everywhere, so we make sure that\n   *\n   * @param {Buffer|Uint8Array|BC|String} data\n   * @param {String} stringType\n   * @returns {BC}\n   */\n  static from(data, stringType = 'hex') {\n    if (data instanceof BC) {\n      return data;\n    } else if (data instanceof Buffer) {\n      return new BC(data);\n    } else if (data instanceof Uint8Array) {\n      return new BC(data);\n    }\n\n    if (stringType === 'hex') {\n      return BC.fromHex(data);\n    }\n\n    return BC.fromString(data);\n  }\n\n  /**\n     * Creates a new BC instance from the given hex string.\n     *\n   * @param {string} hex\n   * @param {Boolean} strict\n     * @returns {BC}\n     */\n  static fromHex(hex, strict = true) {\n    if (hex instanceof BC) {\n      return hex;\n    }\n\n    if (hex.length % 2 === 1) {\n      if (strict) {\n        throw new Error('Invalid hex - number of nibbles need to be divideable by 2');\n      } else {\n        hex = `0${hex}`; // eslint-disable-line no-param-reassign\n      }\n    }\n\n    if (hex.length > 0 && /^[0-9a-fA-F]+$/.test(hex) === false) {\n      throw new Error('Invalid hex');\n    }\n\n    return new BC(Buffer.from(hex, 'hex'));\n  }\n\n  /**\n     * Creates a new BC instance from the given string.\n     *\n     * @param {string} str\n     * @returns {BC}\n     */\n  static fromString(str) {\n    if (str instanceof BC) {\n      return str;\n    }\n\n    // TODO: UTF8?\n    return new BC(Buffer.from(str));\n  }\n\n  /**\n     * Gets a new BC from an integer.\n     *\n     * @param {Number} int\n     * @param {Number} nBytes\n     * @returns {BC}\n     */\n  static fromInt(int, nBytes = null) {\n    let hex = parseInt(int, 10).toString(16);\n\n    const instance = BC.fromHex(hex, false);\n\n    if (nBytes !== null && instance.length < nBytes) {\n      return instance.prepend(BC.fromHex('00'.repeat(nBytes - instance.length)));\n    }\n    return instance;\n  }\n\n  /**\n     * Gets the binary presentation of the hexa string.\n     *\n     * @returns {string}\n     */\n  toBinary() {\n    return this[P_BUFFER].toString('binary');\n  }\n\n  /**\n     * Gets the BC as a string.\n     *\n     * @returns {string}\n     * // TODO: UTF8?\n     */\n  toString() {\n    return this[P_BUFFER].toString();\n  }\n\n  /**\n   * Gets the BC as hex.\n   *\n   * @returns {string}\n   */\n  toHex(lowerCase = false) {\n    if (lowerCase) {\n      return this[P_BUFFER].toString('hex').toLowerCase();\n    }\n\n    return this[P_BUFFER].toString('hex').toUpperCase();\n  }\n\n  /**\n     * Gets the integer value of the BC.\n     *\n     * @return {Number}\n     */\n  toInt() {\n    return parseInt(this.toHex(), 16);\n  }\n\n  /**\n     * Gets the length of BC bytes.\n     *\n     * @returns {number}\n     */\n  get length() {\n    return this[P_BUFFER].length;\n  }\n\n  /**\n     * Gets the length of the parsed BC (the bytes).\n     *\n     * @returns {number}\n     */\n  get hexLength() {\n    return this.length * 2;\n  }\n\n  /**\n     * Gets a copy of the current buffer.\n     *\n     * @returns {Buffer}\n     */\n  get buffer() {\n    return Buffer.from(this[P_BUFFER].toString('hex'), 'hex');\n  }\n\n  /**\n     * Switches the endianness of the BC.\n     *\n     * @returns {BC}\n     */\n  switchEndian() {\n    return BC.fromHex(\n      this[P_BUFFER].toString('hex').match(/../g).reverse().join(''),\n    );\n  }\n\n  /**\n     * Returns a sub-BC defined by the start and end position.\n     *\n     * @param {Number}start\n     * @param {Number} end\n     * @returns {BC}\n     */\n  slice(start, end) {\n    return new BC(this[P_BUFFER].slice(start, end));\n  }\n\n  /**\n     * Concatenates one or more BC instances and returns a new instance.\n     *\n     * @param {...BC} bytes\n     * @returns {BC}\n     */\n  static concat(...bytes) {\n    return BC.fromHex(bytes.reduce((prev, curr) => {\n      if (prev instanceof Object) {\n        return `${prev.toHex()}${curr.toHex()}`;\n      }\n      return `${prev}${curr.toHex()}`;\n    }));\n  }\n\n  /**\n   * Appends a single BC instance to the current BC and\n   * returns a new instance.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bytes\n   * @returns {BC}\n   */\n  append(bytes) {\n    return BC.concat(this, BC.from(bytes));\n  }\n\n  /**\n     * Appends a single BC instance to the current BC and\n     * returns a new instance.\n     *\n     * @param {BC|Buffer|Uint8Array|String} bytes\n     * @returns {BC}\n     */\n  prepend(bytes) {\n    return BC.concat(BC.from(bytes), this);\n  }\n\n  /**\n   * Gets a value indicating the current bc equals the given bc.\n   *\n   * @param {BC|Buffer|Uint8Array|String} bc\n   * @returns {boolean}\n   */\n  equals(bc) {\n    return Buffer.compare(BC.from(bc).buffer, this.buffer) === 0;\n  }\n}\n\nmodule.exports = BC;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_PARAMS = Symbol('params');\nconst P_METHOD = Symbol('method');\nconst P_EXECUTOR = Symbol('executor');\n\n/**\n * A basic action that holds the rpc method and its parameters.\n */\nclass BaseAction {\n  /**\n     * Constructor.\n     *\n     * @param {String} method\n     * @param {Object} params\n     * @param {Executor} executor\n     */\n  constructor(method, params, executor) {\n    this[P_METHOD] = method;\n    this[P_PARAMS] = params;\n    this[P_EXECUTOR] = executor;\n  }\n\n  /**\n     * Gets the params for the rpc call.\n     *\n   * @returns {Object}\n     */\n  get params() {\n    return this[P_PARAMS];\n  }\n\n  /**\n   * Changes a single param of the params object.\n   *\n   * @param {String} name\n   * @param {*} value\n   * @returns {BaseAction}\n   */\n  changeParam(name, value) {\n    this[P_PARAMS][name] = value;\n    return this;\n  }\n\n  /**\n     * Gets the method.\n     *\n     * @returns {*}\n     */\n  get method() {\n    return this[P_METHOD];\n  }\n\n  /**\n     * Executes the current action and returns the raw result.\n     *\n     * @returns {Promise}\n     */\n  async execute() {\n    return this[P_EXECUTOR].execute(this[P_METHOD], this[P_PARAMS]);\n  }\n\n  /**\n   * Executes the current action and transforms the result to an array\n   *  of the defined type.\n   *\n   *  @param {Object} destinationType\n   * @returns {Promise}\n   */\n  async executeTransformArray(destinationType) {\n    return this[P_EXECUTOR].executeTransformArray(\n      this[P_METHOD], this[P_PARAMS], destinationType,\n    );\n  }\n\n  /**\n     * Executes the current action and transforms the result to an object\n     *  of the defined type.\n     *\n     *  @param {Object} destinationType\n     * @returns {Promise}\n     */\n  async executeTransformItem(destinationType) {\n    return this[P_EXECUTOR].executeTransformItem(\n      this[P_METHOD], this[P_PARAMS], destinationType,\n    );\n  }\n\n  /**\n     * Gets a flag indicating whether the current action is valid.\n     *\n     * @returns {boolean}\n     */\n  isValid() {\n    return true;\n  }\n}\n\nmodule.exports = BaseAction;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * The list of available curves in pascalcoin.\n */\nconst CURVES = {\n  0: 'empty',\n  714: 'secp256k1',\n  715: 'p384',\n  729: 'sect283k1',\n  716: 'p521'\n};\n\nconst XYL_PUBKEYS = {\n  714: {x: 32, y: 32},\n  715: {x: 48, y: 48},\n  716: {x: 66, y: 66},\n  729: {x: 36, y: 36},\n  0: {x: 0, y: 0}\n};\n\nconst L_PRIVKEYS = {\n  714: 32,\n  715: 48,\n  716: 66,\n  729: 36\n};\n\nconst ID = Symbol('id');\nconst NAME = Symbol('name');\n\n/**\n * Simple elliptic curve representation of keys in pascalcoin.\n */\nclass Curve {\n\n  /**\n   * Gets the curve name of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECP256K1() {\n    return 'secp256k1';\n  }\n\n  /**\n   * Gets the curve name of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P384() {\n    return 'p384';\n  }\n\n  /**\n   * Gets the curve name of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_SECT283K1() {\n    return 'sect283k1';\n  }\n\n  /**\n   * Gets the curve name of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CN_P521() {\n    return 'p521';\n  }\n\n  /**\n   * Gets the curve id of the secp256k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECP256K1() {\n    return 714;\n  }\n\n  /**\n   * Gets the curve id of the p384 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P384() {\n    return 715;\n  }\n\n  /**\n   * Gets the curve id of the sect283k1 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_SECT283K1() {\n    return 729;\n  }\n\n  /**\n   * Gets the curve id of the p521 curve.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get CI_P521() {\n    return 716;\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Number|String} curve\n   */\n  constructor(curve) {\n    if (typeof curve === 'number') {\n      if (CURVES[curve] === undefined) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[ID] = curve;\n      this[NAME] = CURVES[curve];\n    } else {\n      if (Object.values(CURVES).indexOf(curve.toString()) === -1) {\n        throw new Error(`Unknown curve: ${curve}`);\n      }\n\n      this[NAME] = curve.toString();\n      this[ID] = parseInt(Object.keys(CURVES)[Object.values(CURVES).indexOf(this[NAME])], 10);\n    }\n  }\n\n  /**\n     * Gets the id of the curve.\n     *\n     * @returns {Number}\n     */\n  get id() {\n    return this[ID];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[NAME];\n  }\n\n  /**\n     * Gets the name of the curve.\n     *\n     * @returns {String}\n     */\n  toString() {\n    return this.name;\n  }\n\n  /**\n     * Gets the default curve.\n     *\n     * @returns {Curve}\n     */\n  static getDefaultCurve() {\n    return new Curve(Curve.CI_SECP256K1);\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  xylPublicKey(xOrY) {\n    return XYL_PUBKEYS[this.id][xOrY];\n  }\n\n  /**\n   * Gets the length of either x and y for validation.\n   *\n   * @returns {array}\n   */\n  lPrivateKey() {\n    return L_PRIVKEYS[this.id];\n  }\n\n  /**\n   * Gets a value indicating whether the key is supported for signing /\n   * generation etc.\n   *\n   * @returns {boolean}\n   */\n  get supported() {\n    return this.id !== Curve.CI_SECT283K1 && this.id !== 0;\n  }\n}\n\nmodule.exports = Curve;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BaseAction = require('./BaseAction');\nconst Currency = require('@sbx/common').Types.Currency;\n\n/**\n * An object that holds infos about an operation action. It extends the\n * BaseAction functionality by methods which are useful for operations.\n */\nclass OperationAction extends BaseAction {\n  /**\n     * Constructor\n     *\n     * @param {String} method\n     * @param {Object} params\n     * @param {Executor} executor\n     */\n  constructor(method, params, executor) {\n    super(method, params, executor);\n    this.params.fee = new Currency(0);\n    this.params.payload = '';\n    this.params.payload_method = 'none';\n  }\n\n  /**\n     * Sets the payload of the action.\n     *\n     * @param {String|BC} payload\n     * @param {String} payloadMethod\n     * @param {String} password\n     * @returns {OperationAction}\n     */\n  withPayload(payload, payloadMethod = 'none', password = null) {\n    this.params.payload = payload;\n    this.params.payload_method = payloadMethod;\n    if (password !== null) {\n      this.params.pwd = password;\n    }\n\n    return this;\n  }\n\n  /**\n     * Sets the fee.\n     *\n     * @param {Number|Currency} fee\n     * @returns {OperationAction}\n     */\n  withFee(fee) {\n    this.fee = new Currency(fee);\n    return this;\n  }\n\n  /**\n     * Gets a flag indicating whether the current action is valid.\n     *\n     * @returns {boolean}\n     */\n  isValid() {\n    return super.isValid();\n  }\n}\n\nmodule.exports = OperationAction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_CALLER = Symbol('caller');\n\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst OperationHash = require('@sbx/common').Types.OperationHash;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst KeyPair = require('@sbx/common').Types.Keys.KeyPair;\nconst Currency = require('@sbx/common').Types.Currency;\nconst BC = require('@sbx/common').BC;\n\nconst Block = require('./Types/Block');\nconst WalletPublicKey = require('./Types/WalletPublicKey');\nconst Account = require('./Types/Account');\n\n/**\n * Simple function that transforms the values of an object to make them usable\n * in rpc calls.\n *\n * @param {Object} params\n * @returns {Object}\n */\nfunction transformRpcParams(params) {\n  const newParams = {};\n\n  Object.keys(params).forEach((field) => {\n    const item = params[field];\n\n    // we weill delete fields that are null\n    if (item === null) {\n\n    } else if (field.indexOf('pubkey') !== -1) {\n      // correct the field name..\n      let newField = field.replace('pubkey', 'enc_pubkey');\n\n      // and set the value\n      if (item instanceof BC) {\n        newParams[newField] = item.toHex();\n      } else if (item instanceof PublicKey) {\n        newParams[newField] = item.encode().toHex();\n      } else if (item instanceof WalletPublicKey) {\n        newParams[newField] = item.publicKey.encode().toHex();\n      } else if (item instanceof KeyPair) {\n        newParams[newField] = item.publicKey.encode().toHex();\n      } else {\n        newField = newField.replace('enc_pubkey', 'b58_pubkey');\n        newParams[newField] = item.toString();\n      }\n    } else if (field === 'payload' && !(item instanceof BC)) {\n      newParams[field] = BC.fromString(item).toHex();\n    } else if (field === 'max' || field === 'start' || field === 'end' || field === 'depth') {\n      newParams[field] = parseInt(item, 10);\n    } else if ((field === 'fee' || field === 'amount' || field === 'price') &&\n        !(params[field] instanceof Currency)\n    ) {\n      newParams[field] = new Currency(item);\n      if (newParams[field].isVague()) {\n        throw new Error('Currency value has more that 4 decimals, you need ' +\n            'to round the value by yourself. We will not round automagically.');\n      } else {\n        newParams[field] = newParams[field].toStringOpt();\n      }\n    } else if (typeof item === 'boolean') {\n      newParams[field] = item;\n    } else if (item instanceof BC) {\n      newParams[field] = item.toHex();\n    } else if (item instanceof OperationHash) {\n      newParams[field] = item.encode().toHex();\n    } else if (item instanceof Account) {\n      newParams[field] = item.account.account; // NICE!!!!! :-D\n    } else if (item instanceof AccountNumber) {\n      newParams[field] = item.account;\n    } else if (item instanceof AccountName) {\n      newParams[field] = item.toString();\n    } else if (item instanceof Block) {\n      newParams[field] = item.block;\n    } else if (item instanceof Currency) {\n      if (item.isVague()) {\n        throw new Error('Currency value has more that 4 decimals, you need ' +\n            'to round the value by yourself. We will not round automagically.');\n      }\n      newParams[field] = item.toStringOpt();\n    } else if (typeof item === 'number') {\n      newParams[field] = item;\n    } else {\n      newParams[field] = item.toString();\n    }\n  });\n\n  return newParams;\n}\n\n/**\n * This class will execute an rpc call and returns a promise.\n */\nclass Executor {\n  /**\n     * Constructor\n     *\n     * @param {Caller} caller\n     */\n  constructor(caller) {\n    this[P_CALLER] = caller;\n  }\n\n  /**\n   * Calls the given method with the given params and returns a promise that\n   * itself will transform the returned value and resolve the promise.\n   *\n   * @param {String} method\n   * @param {Object} params\n   * @param {Function} transformCallback\n   * @returns {Promise<any>}\n   */\n  async execute(method, params, transformCallback = r => r) {\n    return new Promise((resolve, reject) => {\n      this[P_CALLER].call(method, transformRpcParams(params))\n        .then(response => resolve(transformCallback(response)))\n        .catch(error => reject(error));\n    });\n  }\n\n  /**\n   * Calls the given method with the given params and returns a promise that\n   * itself will transform the returned value and resolve the promise.\n   *\n   * @param {Object} action\n   * @param {Function} transformCallback\n   * @returns {Promise<any>}\n   */\n  async executeAll(action, transformCallback = r => r) {\n    const all = [];\n    let result = [];\n\n    do {\n      result = await this.execute(action.method, action.params, transformCallback);\n      result.forEach(item => all.push(item));\n      action.changeParam('start', action.params.start + action.params.max);\n    } while (result.length > 0 && result.length === action.params.max);\n\n    return all;\n  }\n\n  /**\n     * Calls the rpc method with the given parameters and returns a promise that\n     * resolves with an array of objects of the given Destination type.\n     *\n     * @param {String} method\n     * @param {Object} params\n     * @param {*} DestinationType\n     * @returns {Promise<any>}\n     */\n  async executeTransformArray(method, params, DestinationType) {\n    return this.execute(method, params, r => r.map(ri => new DestinationType(ri)));\n  }\n\n  /**\n     * Calls the rpc method with the given parameters and returns a promise that\n     * resolves with an object of the given Destination type.\n     *\n     * @param {String} method\n     * @param {Object} params\n     * @param {*} DestinationType\n     * @returns {Promise<any>}\n     */\n  async executeTransformItem(method, params, DestinationType) {\n    return this.execute(method, params, (r) => {\n      return new DestinationType(r);\n    });\n  }\n}\n\nmodule.exports = Executor;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst bs58 = require('bs58');\nconst BC = require('./BC');\n\n/**\n * Contains methods to convert stuff to various formats.\n */\nclass Base58 {\n  /**\n     * Gets the base58 representation of the given buffer.\n     *\n     * @param {BC|Buffer|Uint8Array|String} data\n     * @returns {String}\n     */\n  static encode(data) {\n    return bs58.encode(BC.from(data).buffer);\n  }\n\n  /**\n   * Decodes a Base58 encoded string.\n   *\n   * @param {String} str\n   * @returns {BC}\n   */\n  static decode(str) {\n    return new BC(bs58.decode(str));\n  }\n}\n\nmodule.exports = Base58;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/**\n * Gets information about forks and features.\n */\nclass History {\n  /**\n   * Gets the block number when 50% inflation reduction was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0010() {\n    return 210240;\n  }\n\n  /**\n   * Gets the block number when PIP-10 was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get INFLATION_REDUCTION() {\n    return History.PIP_0010;\n  }\n\n  /**\n   * Gets a value indicating whether the given block has inflation reduction\n   * activated (PIP-10).\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isInflationReduction(block) {\n    return block >= History.INFLATION_REDUCTION;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0009() {\n    return 260000;\n  }\n\n  /**\n   * Gets the block number when RandomHash was activated.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get RANDOM_HASH() {\n    return History.PIP_0009;\n  }\n\n  /**\n   * Gets a value indicating if randomhash was active at the given block.\n   *\n   * @param {Number} block\n   * @returns {boolean}\n   */\n  static isRandomHash(block) {\n    return block >= History.RANDOM_HASH;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get PIP_0011() {\n    return 210000;\n  }\n\n  /**\n   * Gets the block number when developer reward was introduced.\n   *\n   * @returns {Number}\n   * @constructor\n   */\n  static get DEVELOPER_REWARD() {\n    return History.PIP_0011;\n  }\n\n  /**\n   * Gets a value indicating whether the given block was mined with activated\n   * developer award.\n   *\n   * @param {number} block\n   * @returns {boolean}\n   */\n  static isDeveloperReward(block) {\n    return block >= History.DEVELOPER_REWARD;\n  }\n}\n\nmodule.exports = History;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n'use strict';\n\nconst sha256 = require('mipher/dist/sha256');\nconst sha512 = require('mipher/dist/sha512');\nconst BC = require('./BC');\n\n/**\n * Holds methods to hash.\n */\nclass Sha {\n  /**\n   * Calculates the sha256 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {BC}\n   */\n  static sha256(...buffers) {\n    const hasher = new sha256.SHA256();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n\n  /**\n   * Calculates the sha512 hash from the given buffers.\n   *\n   * @param {...BC} buffers\n   * @returns {Buffer}\n   */\n  static sha512(...buffers) {\n    const hasher = new sha512.SHA512();\n\n    buffers.forEach(buffer => hasher.update(buffer.buffer));\n    return new BC(Buffer.from(hasher.digest()));\n  }\n}\n\nmodule.exports = Sha;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief mipher interface, convert and util functions\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n///////////////////////////////////////////////////////////////////////////////\r\n// V E R S I O N\r\nexports.version = '1.1.4';\r\n///////////////////////////////////////////////////////////////////////////////\r\n// C O N V E R T E R\r\nvar Convert;\r\n(function (Convert) {\r\n    /**\r\n     * Convert a string (UTF-8 encoded) to a byte array\r\n     * @param {String} str UTF-8 encoded string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function str2bin(str) {\r\n        str = str.replace(/\\r\\n/g, '\\n');\r\n        var bin = new Uint8Array(str.length * 3), p = 0;\r\n        for (var i = 0, len = str.length; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if (c < 128) {\r\n                bin[p++] = c;\r\n            }\r\n            else if (c < 2048) {\r\n                bin[p++] = (c >>> 6) | 192;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n            else {\r\n                bin[p++] = (c >>> 12) | 224;\r\n                bin[p++] = ((c >>> 6) & 63) | 128;\r\n                bin[p++] = (c & 63) | 128;\r\n            }\r\n        }\r\n        return bin.subarray(0, p);\r\n    }\r\n    Convert.str2bin = str2bin;\r\n    /**\r\n     * Convert a hex string to byte array\r\n     * @param {String} hex Hex string\r\n     * @return {Uint8Array} Byte array\r\n     */\r\n    function hex2bin(hex) {\r\n        if (hex.indexOf('0x') === 0 || hex.indexOf('0X') === 0) {\r\n            hex = hex.substr(2);\r\n        }\r\n        if (hex.length % 2) {\r\n            hex += '0';\r\n        }\r\n        var bin = new Uint8Array(hex.length >>> 1);\r\n        for (var i = 0, len = hex.length >>> 1; i < len; i++) {\r\n            bin[i] = parseInt(hex.substr(i << 1, 2), 16);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.hex2bin = hex2bin;\r\n    /**\r\n     * Convert a 32 bit integer number to a 4 byte array, LSB is first\r\n     * @param {Number} integer Integer number\r\n     * @return {Uint8Array} bin 4 byte array\r\n     */\r\n    function int2bin(integer) {\r\n        var bin = new Uint8Array(4);\r\n        bin[0] = (integer) & 0xff;\r\n        bin[1] = (integer >>> 8) & 0xff;\r\n        bin[2] = (integer >>> 16) & 0xff;\r\n        bin[3] = (integer >>> 24) & 0xff;\r\n        return bin;\r\n    }\r\n    Convert.int2bin = int2bin;\r\n    /**\r\n     * Convert a number to a 8 byte array, LSB is first\r\n     * @param {Number} value Long number\r\n     * @return {Uint8Array} bin 8 byte array\r\n     */\r\n    function number2bin(value) {\r\n        var bin = new Uint8Array(8);\r\n        if (Math.floor(value) === value) {\r\n            var TWO_PWR_32 = 4294967296;\r\n            var lo = (value % TWO_PWR_32) | 0, hi = (value / TWO_PWR_32) | 0;\r\n            if (value < 0) {\r\n                lo = ~(-value % TWO_PWR_32) | 0, hi = ~(-value / TWO_PWR_32) | 0;\r\n                lo = (lo + 1) & 0xffffffff;\r\n                if (!lo)\r\n                    hi++;\r\n            }\r\n            var i = 0;\r\n            bin[i++] = (lo & 0xff);\r\n            bin[i++] = (lo >>> 8) & 0xff;\r\n            bin[i++] = (lo >>> 16) & 0xff;\r\n            bin[i++] = (lo >>> 24) & 0xff;\r\n            bin[i++] = (hi & 0xff);\r\n            bin[i++] = (hi >>> 8) & 0xff;\r\n            bin[i++] = (hi >>> 16) & 0xff;\r\n            bin[i] = (hi >>> 24) & 0xff;\r\n        }\r\n        else {\r\n            var f = new Float64Array([value]);\r\n            var d = new Uint8Array(f.buffer);\r\n            bin.set(d);\r\n        }\r\n        return bin;\r\n    }\r\n    Convert.number2bin = number2bin;\r\n    /**\r\n     * Convert a base64/base64url string to a byte array\r\n     * @param {String} base64 Base64/Base64url encoded string\r\n     * @return {Uint8Array} Byte array or undefined if error\r\n     */\r\n    function base642bin(base64) {\r\n        // remove base64url encoding\r\n        base64 = base64.replace(/-/g, '+').replace(/_/g, '/').replace(/%3d/g, '=');\r\n        // length must be multiple of 4\r\n        if (base64.length % 4 !== 0)\r\n            return;\r\n        var strlen = base64.length / 4 * 3;\r\n        if (base64.charAt(base64.length - 1) === '=')\r\n            strlen--;\r\n        if (base64.charAt(base64.length - 2) === '=')\r\n            strlen--;\r\n        if (typeof atob !== 'undefined') {\r\n            return new Uint8Array(atob(base64).split('').map(function (c) { return c.charCodeAt(0); }));\r\n        }\r\n        else {\r\n            // atob not available\r\n            var decodingTable = new Int8Array([\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, -1, -1, -1, -1, -1,\r\n                -1, -1, -1, 62, -1, 62, -1, 63,\r\n                52, 53, 54, 55, 56, 57, 58, 59,\r\n                60, 61, -1, -1, -1, -2, -1, -1,\r\n                -1, 0, 1, 2, 3, 4, 5, 6,\r\n                7, 8, 9, 10, 11, 12, 13, 14,\r\n                15, 16, 17, 18, 19, 20, 21, 22,\r\n                23, 24, 25, -1, -1, -1, -1, 63,\r\n                -1, 26, 27, 28, 29, 30, 31, 32,\r\n                33, 34, 35, 36, 37, 38, 39, 40,\r\n                41, 42, 43, 44, 45, 46, 47, 48,\r\n                49, 50, 51, -1, -1, -1, -1, -1 // x y z .  . . . .\r\n            ]);\r\n            var p = 0, bin = new Uint8Array(strlen);\r\n            for (var i = 0, len = base64.length; i < len;) {\r\n                var sextet_a = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_b = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_c = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var sextet_d = base64.charAt(i) === '=' || base64.charCodeAt(i) > 'z'.charCodeAt(0) ? 0 : decodingTable[base64.charCodeAt(i)];\r\n                i++;\r\n                var triple = (sextet_a << 18) +\r\n                    (sextet_b << 12) +\r\n                    (sextet_c << 6) +\r\n                    (sextet_d);\r\n                if (base64.charAt(i - 3) !== '=')\r\n                    bin[p++] = (triple >>> 16) & 0xff;\r\n                if (base64.charAt(i - 2) !== '=')\r\n                    bin[p++] = (triple >>> 8) & 0xff;\r\n                if (base64.charAt(i - 1) !== '=')\r\n                    bin[p++] = (triple) & 0xff;\r\n            }\r\n            return bin;\r\n        }\r\n    }\r\n    Convert.base642bin = base642bin;\r\n    /**\r\n     * Convert a byte array to hex string\r\n     * @param {Uint8Array} bin The input byte array\r\n     * @param {Boolean} uppercase True for upper case hex numbers\r\n     * @return {String} Hex sting\r\n     */\r\n    function bin2hex(bin, uppercase) {\r\n        if (uppercase === void 0) { uppercase = false; }\r\n        var hex = uppercase ? '0123456789ABCDEF' : '0123456789abcdef';\r\n        var str = '';\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            str += hex.charAt((bin[i] >>> 4) & 0x0f) + hex.charAt(bin[i] & 0x0f);\r\n            // str += bin[i].toString(16);\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2hex = bin2hex;\r\n    /**\r\n     * Convert a byte array to string (UTF-8 dedode)\r\n     * @param {Uint8Array} bin UTF-8 text given as array of bytes\r\n     * @return {String} UTF-8 Text string\r\n     */\r\n    function bin2str(bin) {\r\n        var str = '', len = bin.length, i = 0, c, c2, c3;\r\n        while (i < len) {\r\n            c = bin[i];\r\n            if (c < 128) {\r\n                str += String.fromCharCode(c);\r\n                i++;\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                c2 = bin[i + 1];\r\n                str += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                i += 2;\r\n            }\r\n            else {\r\n                c2 = bin[i + 1];\r\n                c3 = bin[i + 2];\r\n                str += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                i += 3;\r\n            }\r\n        }\r\n        return str;\r\n    }\r\n    Convert.bin2str = bin2str;\r\n    /**\r\n     * Convert a byte value array in a long value array\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @return {Uint32Array} bin values in long format\r\n     */\r\n    function bin2longbin(bin) {\r\n        var longbin = new Uint32Array(bin.length >>> 2);\r\n        for (var i = 0, len = bin.length; i < len; i++) {\r\n            longbin[i >>> 2] |= (bin[i] << ((i % 4) << 3));\r\n        }\r\n        return longbin;\r\n    }\r\n    Convert.bin2longbin = bin2longbin;\r\n    /**\r\n     * Convert a 8 byte (int64) array into a number\r\n     * @param {Uint8Array} bin Array of 8 bytes (int64), LSB is [0], MSB is [7]\r\n     * @return {Number} int64 value as number\r\n     */\r\n    function bin2number(bin) {\r\n        var TWO_PWR_32 = 4294967296;\r\n        var i = 0;\r\n        var lo = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i++] << 24;\r\n        var hi = bin[i++] | bin[i++] << 8 | bin[i++] << 16 | bin[i] << 24;\r\n        return hi * TWO_PWR_32 + ((lo >= 0) ? lo : TWO_PWR_32 + lo);\r\n    }\r\n    Convert.bin2number = bin2number;\r\n    /**\r\n     * Convert byte array to base64/base64url string\r\n     * @param {Uint8Array} bin Array of bytes\r\n     * @param {Boolean} url True if the string should be URL encoded (base64url encoding)\r\n     * @return {String} Base64 encoded string\r\n     */\r\n    function bin2base64(bin, url) {\r\n        if (url === void 0) { url = false; }\r\n        if (typeof btoa !== 'undefined') {\r\n            return url ? btoa(String.fromCharCode.apply(null, bin)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '%3d') :\r\n                btoa(String.fromCharCode.apply(null, bin));\r\n        }\r\n        else {\r\n            // btoa not available\r\n            var base64 = '', encodingTable = url ? 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' :\r\n                'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n            for (var i = 0, len = bin.length; i < len;) {\r\n                var octet_a = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_b = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var octet_c = i < bin.length ? bin[i] : 0;\r\n                i++;\r\n                var triple = (octet_a << 0x10) + (octet_b << 0x08) + octet_c;\r\n                base64 += encodingTable.charAt((triple >>> 18) & 0x3F);\r\n                base64 += encodingTable.charAt((triple >>> 12) & 0x3F);\r\n                base64 += (i < bin.length + 2) ? encodingTable.charAt((triple >>> 6) & 0x3F) : (url ? '%3d' : '=');\r\n                base64 += (i < bin.length + 1) ? encodingTable.charAt((triple >>> 0) & 0x3F) : (url ? '%3d' : '=');\r\n            }\r\n            return base64;\r\n        }\r\n    }\r\n    Convert.bin2base64 = bin2base64;\r\n})(Convert = exports.Convert || (exports.Convert = {}));\r\n///////////////////////////////////////////////////////////////////////////////\r\n// U T I L S\r\nvar Util;\r\n(function (Util) {\r\n    /**\r\n     * Time constant comparison of two arrays\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Boolean} True if the arrays are equal (length and content), false otherwise\r\n     */\r\n    function compare(lh, rh) {\r\n        if (lh.length !== rh.length) {\r\n            // abort\r\n            return false;\r\n        }\r\n        var i, d = 0, len = lh.length;\r\n        for (i = 0; i < len; i++) {\r\n            d |= lh[i] ^ rh[i];\r\n        }\r\n        return d === 0;\r\n    }\r\n    Util.compare = compare;\r\n    /**\r\n     * Clear an array\r\n     * @param {Uint8Array | Uint16Array | Uint32Array} Array to clear\r\n     */\r\n    function clear(data) {\r\n        data.fill(0);\r\n    }\r\n    Util.clear = clear;\r\n    /**\r\n     * XOR two arrays and return the result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} XORed result array\r\n     */\r\n    function xor(lh, rh) {\r\n        return lh.map(function (val, ind) { return val ^ rh[ind]; });\r\n    }\r\n    Util.xor = xor;\r\n    /**\r\n     * Concat two arrays and returns a new result array\r\n     * @param {Uint8Array} lh First array of bytes\r\n     * @param {Uint8Array} rh Second array of bytes\r\n     * @return {Uint8Array} Concatenated result array\r\n     */\r\n    function concat(lh, rh) {\r\n        var x = new Uint8Array(lh.length + rh.length);\r\n        x.set(lh, 0);\r\n        x.set(rh, lh.length);\r\n        return x;\r\n    }\r\n    Util.concat = concat;\r\n    /**\r\n     * Returns true if LITTLE endian is detected\r\n     * @return {Boolean} True for LE, false for BE\r\n     */\r\n    function litteendian() {\r\n        return (new Uint32Array((new Uint8Array([1, 2, 3, 4])).buffer))[0] === 0x04030201;\r\n    }\r\n    Util.litteendian = litteendian;\r\n})(Util = exports.Util || (exports.Util = {}));\r\n","class Util {\n\n  /**\n   * https://github.com/MauroJr/escape-regex/blob/master/index.js\n   *\n   * @param {String} string\n   * @returns {string}\n   */\n  static escapeRegex(string) {\n    return ('' + string).replace(/([?!${}*:()|=^[\\]\\/\\\\.+])/g, '\\\\$1');\n  }\n\n  static promiseWhile(data, condition, action) {\n    let whilst = (data) => {\n      return condition(data) ?\n        action(data).then(whilst) :\n        Promise.resolve(data);\n    };\n\n    return whilst(data);\n  };\n}\n\nmodule.exports = Util;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst History = require('../History');\n\nconst P_ACCOUNT = Symbol('account');\nconst P_CHECKSUM = Symbol('checksum');\nconst P_CREATED_IN_BLOCK = Symbol('created_in_block');\nconst P_IS_FOUNDATION_REWARD = Symbol('is_foundation_reward');\n\n/**\n * A simple type that holds an account number in a reliable way.\n */\nclass AccountNumber {\n  /**\n   * Creates a new AccountNumber instance, either from an account string\n   * without checksum (which can be a number), an account string with checksum\n   * or another account instance.\n   *\n   * @param {String|Number|AccountNumber|Account} account\n   */\n  constructor(account) {\n    if (account instanceof AccountNumber) {\n      this[P_ACCOUNT] = account[P_ACCOUNT];\n      this[P_CHECKSUM] = account[P_CHECKSUM];\n    } else if (typeof account === 'string') {\n      const splitted = account.split('-');\n\n      splitted.map(s => {\n        if (isNaN(s) || parseInt(s, 10).toString() !== s) {\n          throw new Error(`Invalid account number part: ${s}`);\n        }\n      });\n\n      if (splitted.length === 2) {\n        this[P_ACCOUNT] = parseInt(splitted[0], 10);\n        this[P_CHECKSUM] = parseInt(splitted[1], 10);\n        if (this[P_CHECKSUM] !== AccountNumber.calculateChecksum(this[P_ACCOUNT])) {\n          throw new Error(`Invalid checksum for account ${this[P_ACCOUNT]}`);\n        }\n      } else {\n        this[P_ACCOUNT] = parseInt(account, 10);\n        this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n      }\n    } else if (typeof account === 'number') {\n      this[P_ACCOUNT] = account;\n      this[P_CHECKSUM] = AccountNumber.calculateChecksum(this[P_ACCOUNT]);\n    } else {\n      throw new Error(`Unable to parse Account: ${account.toString()}`);\n    }\n\n    this[P_CREATED_IN_BLOCK] = Math.floor(this[P_ACCOUNT] / 5);\n    this[P_IS_FOUNDATION_REWARD] = History.isDeveloperReward(this[P_CREATED_IN_BLOCK]) && this[P_ACCOUNT] % 5 === 4;\n  }\n\n  /**\n   * Gets the account number.\n   *\n   * @returns {Number}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the checksum of the account.\n   *\n   * @returns {Number}\n   */\n  get checksum() {\n    return this[P_CHECKSUM];\n  }\n\n  /**\n   * Gets the block number the account was created in.\n   *\n   * @returns {Number}\n   */\n  get createdInBlock() {\n    return this[P_CREATED_IN_BLOCK];\n  }\n\n  /**\n   * Gets a value indicating whether the foundation got this account initially.\n   *\n   * @returns {Boolean}\n   */\n  get isFoundationReward() {\n    return this[P_IS_FOUNDATION_REWARD];\n  }\n\n  /**\n   * Gets the account string.\n   *\n   * @returns {string}\n   */\n  toString() {\n    return `${this.account}-${this.checksum}`;\n  }\n\n  /**\n   * Gets a value indicating whether the given account equals the current\n   * account.\n   *\n   * @param {AccountNumber|String|Number} accountNumber\n   * @returns {boolean}\n   */\n  equals(accountNumber) {\n    return (accountNumber !== null && this.toString() === accountNumber.toString());\n  }\n\n  /**\n   * Calculates the checksum for the given account number.\n   *\n   * @param {Number} account\n   * @returns {Number}\n   */\n  static calculateChecksum(account) {\n    return ((account * 101) % 89) + 10;\n  }\n}\n\nmodule.exports = AccountNumber;\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BigNumber = require('bignumber.js');\nconst Abstract = require('./Abstract');\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@sbx/common').Types.Currency;\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst BC = require('@sbx/common').BC;\n\nconst P_BLOCK = Symbol('block');\nconst P_ENC_PUBKEY = Symbol('enc_pubkey');\nconst P_REWARD = Symbol('reward');\nconst P_FEE = Symbol('fee');\nconst P_VER = Symbol('ver');\nconst P_VER_A = Symbol('ver_a');\nconst P_TIMESTAMP = Symbol('timestamp');\nconst P_TARGET = Symbol('target');\nconst P_NONCE = Symbol('nonce');\nconst P_PAYLOAD = Symbol('payload');\nconst P_SBH = Symbol('sbh');\nconst P_OPH = Symbol('oph');\nconst P_POW = Symbol('pow');\nconst P_HASHRATEKHS = Symbol('hashratekhs');\nconst P_MATURATION = Symbol('maturation');\nconst P_OPERATIONS = Symbol('operations');\n\n/**\n * Represents a block.\n */\nclass Block extends Abstract {\n  /**\n   * Creates a new instance of the Block class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_BLOCK] = parseInt(data.block, 10);\n    this[P_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.enc_pubkey));\n    this[P_REWARD] = new Currency(data.reward);\n    this[P_FEE] = new Currency(data.fee);\n    this[P_VER] = parseInt(data.ver, 10);\n    this[P_VER_A] = parseInt(data.ver_a, 10);\n    this[P_TIMESTAMP] = parseInt(data.timestamp, 10);\n    this[P_TARGET] = new BigNumber(data.target.toString());\n    this[P_NONCE] = new BigNumber(data.nonce.toString());\n    this[P_PAYLOAD] = BC.fromString(data.payload);\n    this[P_SBH] = BC.fromHex(data.sbh);\n    this[P_OPH] = BC.fromHex(data.oph);\n    this[P_POW] = BC.fromHex(data.pow);\n    this[P_HASHRATEKHS] = new BigNumber(data.hashratekhs.toString());\n    this[P_MATURATION] = parseInt(data.maturation, 10);\n    this[P_OPERATIONS] = null;\n    if (data.operations !== undefined) {\n      this[P_OPERATIONS] = parseInt(data.operations, 10);\n    }\n  }\n\n  /**\n   * Gets the number of a block.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the public key of the miner of the block.\n   *\n   * @returns {PublicKey}\n   */\n  get publicKey() {\n    return this[P_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets the reward.\n   *\n   * @returns {Currency}\n   */\n  get reward() {\n    return this[P_REWARD];\n  }\n\n  /**\n   * Gets the collective fee awarded to the miner.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the version of the protocol.\n   *\n   * @returns {Number}\n   */\n  get ver() {\n    return this[P_VER];\n  }\n\n  /**\n   * Gets the protocol version of the miner.\n   *\n   * @returns {Number}\n   */\n  get verA() {\n    return this[P_VER_A];\n  }\n\n  /**\n   * Gets the UTC timestamp of the block.\n   *\n   * @returns {Number}\n   */\n  get timestamp() {\n    return this[P_TIMESTAMP];\n  }\n\n  /**\n   * Gets the used target.\n   *\n   * @returns {BigNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the calculated nonce.\n   *\n   * @returns {BigNumber}\n   */\n  get nonce() {\n    return this[P_NONCE];\n  }\n\n  /**\n   * Gets the payload of the miner.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the safebox hash.\n   *\n   * @returns {BC}\n   */\n  get sbh() {\n    return this[P_SBH];\n  }\n\n  /**\n   * Gets the operation hash.\n   *\n   * @returns {BC}\n   */\n  get oph() {\n    return this[P_OPH];\n  }\n\n  /**\n   * Gets the POW.\n   *\n   * @returns {BC}\n   */\n  get pow() {\n    return this[P_POW];\n  }\n\n  /**\n   * Gets the hashrate in kh/s.\n   *\n   * @returns {BigNumber}\n   */\n  get hashratekhs() {\n    return this[P_HASHRATEKHS];\n  }\n\n  /**\n   * Gets the age of the block in terms of blocks.\n   *\n   * @returns {Number}\n   */\n  get maturation() {\n    return this[P_MATURATION];\n  }\n\n  /**\n   * Gets the number of operations in the block.\n   *\n   * @returns {Number}\n   */\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  /**\n   * Gets the list of accounts created.\n   *\n   * @returns {AccountNumber[]}\n   */\n  get createdAccounts() {\n    return [\n      new AccountNumber(this[P_BLOCK] * 5),\n      new AccountNumber(this[P_BLOCK] * 5 + 1),\n      new AccountNumber(this[P_BLOCK] * 5 + 2),\n      new AccountNumber(this[P_BLOCK] * 5 + 3),\n      new AccountNumber(this[P_BLOCK] * 5 + 4)\n    ];\n  }\n}\n\nmodule.exports = Block;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst BC = require('@sbx/common').BC;\nconst Curve = require('@sbx/common').Types.Keys.Curve;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\n\nconst P_NAME = Symbol('block');\nconst P_ENC_PUBKEY = Symbol('publicKey');\nconst P_CAN_USE = Symbol('can_user');\nconst P_B58_PUBKEY = Symbol('b58_pubkey');\nconst P_EC_NID = Symbol('ec_nid');\nconst P_X = Symbol('x');\nconst P_Y = Symbol('y');\n\n/**\n * Holds information about a public key in the wallet (fetched via rpc).\n */\nclass WalletPublicKey extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n    this[P_NAME] = data.name;\n    this[P_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.publicKey));\n    this[P_CAN_USE] = !!data.can_use;\n\n    this[P_B58_PUBKEY] = null;\n    this[P_EC_NID] = null;\n    this[P_X] = null;\n    this[P_Y] = null;\n    if (data.b58_pubkey !== undefined) {\n      this[P_B58_PUBKEY] = data.b58_pubkey;\n    }\n    if (data.ec_nid !== undefined) {\n      this[P_EC_NID] = new Curve(parseInt(data.ec_nid, 10));\n    }\n    if (data.x !== undefined) {\n      this[P_X] = BC.fromHex(data.x);\n    }\n    if (data.y !== undefined) {\n      this[P_Y] = BC.fromHex(data.y);\n    }\n  }\n\n  /**\n     * Gets the name of the key.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[P_NAME];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {BC}\n     */\n  get publicKey() {\n    return this[P_ENC_PUBKEY];\n  }\n\n  /**\n     * Gets a flag indicating whether the key can be used.\n     *\n     * @returns {Boolean}\n     */\n  get canUse() {\n    return this[P_CAN_USE];\n  }\n\n  /**\n     * Gets the base58 public key if returned by the node.\n     *\n     * @returns {String|null}\n     */\n  get base58PublicKey() {\n    return this[P_B58_PUBKEY];\n  }\n\n  /**\n     * Gets the used curve if returned by the node.\n     *\n     * @returns {Curve|null}\n     */\n  get ecNid() {\n    return this[P_EC_NID];\n  }\n\n  /**\n     * Gets the X value of the key if returned by the node.\n     *\n     * @returns {BC|null}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the Y value of the key if returned by the node.\n     *\n     * @returns {BC|null}\n     */\n  get y() {\n    return this[P_Y];\n  }\n}\n\nmodule.exports = WalletPublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst BC = require('@sbx/common').BC;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@sbx/common').Types.Currency;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_ENC_PUBKEY = Symbol('enc_pubkey');\nconst P_BALANCE = Symbol('balance');\nconst P_N_OPERATION = Symbol('n_operation');\nconst P_UPDATED_B = Symbol('updated_b');\nconst P_STATE = Symbol('state');\nconst P_NAME = Symbol('name');\nconst P_TYPE = Symbol('type');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\nconst P_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller_account');\nconst P_PRIVATE_SALE = Symbol('private_sale');\nconst P_NEW_ENC_PUBKEY = Symbol('new_enc_pubkey');\n\n/**\n * Represents an account.\n */\nclass Account extends Abstract {\n  /**\n   * The state of an account when it is listed for sale.\n   *\n   * @returns {string}\n   */\n  static get STATE_LISTED() {\n    return 'listed';\n  }\n\n  /**\n   * The state of an account when it is not listed.\n   *\n   * @returns {string}\n   */\n  static get STATE_NORMAL() {\n    return 'normal';\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.enc_pubkey));\n    this[P_BALANCE] = new Currency(data.balance);\n    this[P_N_OPERATION] = parseInt(data.n_operation, 10);\n    this[P_UPDATED_B] = parseInt(data.updated_b, 10);\n\n    if (data.state !== Account.STATE_NORMAL && data.state !== Account.STATE_LISTED) {\n      throw new Error('Invalid account state.');\n    }\n\n    this[P_STATE] = data.state;\n    this[P_NAME] = new AccountName(data.name);\n    this[P_TYPE] = data.type;\n\n    this[P_LOCKED_UNTIL_BLOCK] = null;\n    if (data.locked_until_block !== undefined) {\n      this[P_LOCKED_UNTIL_BLOCK] = parseInt(data.locked_until_block, 10);\n    }\n\n    // when not listed\n    this[P_PRICE] = null;\n    this[P_SELLER_ACCOUNT] = null;\n    this[P_PRIVATE_SALE] = null;\n    this[P_NEW_ENC_PUBKEY] = null;\n\n    if (this[P_STATE] === Account.STATE_LISTED) {\n      this[P_PRICE] = new Currency(data.price);\n      this[P_SELLER_ACCOUNT] = new AccountNumber(data.seller_account);\n      this[P_PRIVATE_SALE] = data.private_sale;\n      if (data.new_enc_pubkey !== '000000000000' && data.new_enc_pubkey !== undefined) {\n        this[P_NEW_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.new_enc_pubkey));\n      }\n    }\n  }\n\n  /**\n   * Gets the account number of the account.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the public key of the account.\n   *\n   * @returns {PublicKey}\n   */\n  get publicKey() {\n    return this[P_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets the balance of the account.\n   *\n   * @returns {Currency}\n   */\n  get balance() {\n    return this[P_BALANCE];\n  }\n\n  /**\n   * Gets the number of operations of this account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the block number when the account was last updated.\n   *\n   * @returns {Number}\n   */\n  get updatedB() {\n    return this[P_UPDATED_B];\n  }\n\n  /**\n   * Gets the state of the account (normal, listed).\n   *\n   * @returns {String}\n   */\n  get state() {\n    return this[P_STATE];\n  }\n\n  /**\n   * Gets the name of the account.\n   *\n   * @returns {AccountName}\n   */\n  get name() {\n    return this[P_NAME];\n  }\n\n  /**\n   * Gets the type of the account.\n   *\n   * @returns {Number}\n   */\n  get type() {\n    return this[P_TYPE];\n  }\n\n  /**\n   * Gets the block number until the account is locked when it's listed for\n   * sale.\n   *\n   * @returns {Number|null}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Gets the price of the account in case its listed.\n   *\n   * @returns {Currency|null}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account of the seller in case the account is listed for sale.\n   *\n   * @returns {AccountNumber|null}\n   */\n  get sellerAccount() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  /**\n   * Gets a flag indicating whether the account is for sale. Attention:\n   * null and false = not for sale.\n   *\n   * @returns {boolean}\n   */\n  get privateSale() {\n    return !!this[P_PRIVATE_SALE];\n  }\n\n  /**\n   * Gets the new public key in case of a escrow.\n   *\n   * @returns {PublicKey|null}\n   */\n  get newPublicKey() {\n    return this[P_NEW_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets a value indicating whether the account is for sale.\n   *\n   * @returns {boolean}\n   */\n  isForSale() {\n    return this[P_STATE] === Account.STATE_LISTED;\n  }\n}\n\nmodule.exports = Account;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst jaysonBrowserClient = require('jayson/lib/client/browser');\nconst fetch = require('node-fetch');\nconst ConnectionError = require('./Errors/ConnectionError');\nconst ResultError = require('./Errors/ResultError');\n\nconst P_CLIENT = Symbol('client');\n\n/**\n * A caller object that can call JSON-RPC methods.\n */\nclass Caller {\n  /**\n     * Creates a new caller instance.\n     *\n     * @param {String} host\n     */\n  constructor(host) {\n    this[P_CLIENT] = jaysonBrowserClient((request, callback) => {\n      const options = {\n        method: 'POST',\n        body: request,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      return fetch(host, options)\n        .then(res => res.text())\n        .then((text) => {\n          callback(null, text);\n        })\n        .catch((err) => {\n          callback(err);\n        });\n    });\n  }\n\n  /**\n     * Calls the given method with the given params and returns a promise.\n     *\n     * @param {String}method\n     * @param {Object} params\n     * @returns {Promise<any>}\n     */\n  call(method, params) {\n    return new Promise((resolve, reject) => {\n      this[P_CLIENT].request(method, params, (err, error, result) => {\n        if (err !== null || error !== undefined || result === undefined) {\n          if (err !== null && err.constructor.name === 'FetchError') {\n            return reject(new ConnectionError(err));\n          }\n          return reject(new ResultError(error.code, error.message));\n        }\n        return resolve(result);\n      });\n    });\n  }\n}\n\nmodule.exports = Caller;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","const P_ORIGINAL = Symbol('original');\nconst P_MESSAGE = Symbol('message');\n\nclass ConnectionError {\n  constructor(originalFetchError) {\n    this[P_ORIGINAL] = originalFetchError;\n    this[P_MESSAGE] = originalFetchError.message;\n  }\n\n  get original() {\n    return this[P_ORIGINAL];\n  }\n  get message() {\n    return this[P_MESSAGE];\n  }\n}\n\nmodule.exports = ConnectionError;\n","const P_CODE = Symbol('code');\nconst P_MESSAGE = Symbol('message');\n\nclass ResultError {\n  constructor(code, message) {\n    this[P_CODE] = code;\n    this[P_MESSAGE] = message;\n  }\n\n  get code() {\n    return this[P_CODE];\n  }\n  get message() {\n    return this[P_MESSAGE];\n  }\n}\n\nmodule.exports = ResultError;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BaseAction = require('./BaseAction');\n\n/**\n * Whenever a remote endpoint has paging possibilities, this action will be\n * returned.\n */\nclass PagedAction extends BaseAction {\n  /**\n     * Constructor.\n     *\n     * @param {String} method\n     * @param {Object} params\n     * @param {Executor} executor\n     */\n  constructor(method, params, executor) {\n    super(method, params, executor);\n    this.changeParam('start', 0);\n    this.changeParam('max', 100);\n  }\n\n  set start(start) {\n    this.changeParam('start', start);\n    return this;\n  }\n\n  set max(max) {\n    this.changeParam('max', max);\n    return this;\n  }\n\n  /**\n   * Executes the current action and returns the raw result.\n   *\n   * @returns {Promise}\n   */\n  async executeAll() {\n    let all = [];\n\n    await this.executeAllReport(data => data.forEach(item => all.push(item)));\n    return all;\n  }\n\n  /**\n   * Executes the current action and returns the raw result.\n   *\n   * @returns {Promise}\n   */\n  async executeAllReport(reporter) {\n    let result = [];\n\n    do {\n      result = await this.execute();\n      reporter(result);\n      this.changeParam('start', this.params.start + this.params.max);\n    } while (result.length > 0 && result.length === this.params.max);\n  }\n\n  /**\n   * Executes the current action and transforms the result to an array\n   *  of the defined type.\n   *\n   *  @param {Object} destinationType\n   * @returns {Promise}\n   */\n  async executeAllTransformArray(destinationType) {\n    let all = [];\n\n    await this.executeAllTransformArrayReport(destinationType,\n      (data) => data.forEach(item => all.push(item))\n    );\n\n    return all;\n  }\n\n  /**\n   * Executes the current action and transforms the result to an array\n   *  of the defined type.\n   *\n   * @param {Object} destinationType\n   * @param {Function} reporter\n   * @returns {Promise}\n   */\n  async executeAllTransformArrayReport(destinationType, reporter) {\n    let result = [];\n\n    do {\n      result = await this.executeTransformArray(destinationType);\n      reporter(result);\n      this.changeParam('start', this.params.start + this.params.max);\n    } while (result.length > 0 && result.length === this.params.max);\n  }\n\n  /**\n     * Gets a flag indicating whether the current action is valid.\n     *\n     * @returns {boolean}\n     */\n  isValid() {\n    return true;\n  }\n}\n\nmodule.exports = PagedAction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst RawOperations = require('../Types/RawOperations');\nconst OperationAction = require('./OperationAction');\n\n/**\n * This object derives from an operation action and extends the functionality\n * by methods shared by cold wallet signing operations.\n */\nclass SignOperationAction extends OperationAction {\n  /**\n     * Constructor.\n     *\n     * @param {String} method\n     * @param {Object} params\n     * @param {Executor} executor\n     */\n  constructor(method, params, executor) {\n    super(method, params, executor);\n    this.params.last_n_operation = null;\n    this.params.rawoperations = null;\n  }\n\n  /**\n     * Sets the last n operation value.\n     *\n     * @param {Number} lastNOperation\n     * @return {SignOperationAction}\n     */\n  withLastNOperation(lastNOperation) {\n    this.params.last_n_operation = lastNOperation;\n    return this;\n  }\n\n  /**\n     * Sets the raw operations instance of a previous result.\n     *\n     * @param {RawOperations|BC|String} rawoperations\n     * @return {SignOperationAction}\n     */\n  withRawOperations(rawoperations) {\n    this.params.rawoperations = new RawOperations(rawoperations);\n  }\n\n  isValid() {\n    return super.isValid() && this.params.last_n_operation !== null;\n  }\n}\n\nmodule.exports = SignOperationAction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('@sbx/common').Types.Currency;\nconst Abstract = require('./Abstract');\nconst BC = require('@sbx/common').BC;\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_AMOUNT = Symbol('amount');\nconst P_FEE = Symbol('fee');\nconst P_RAWOPERATIONS = Symbol('rawoperations');\n\nclass RawOperations extends Abstract {\n  constructor(data) {\n    super(data);\n    this[P_OPERATIONS] = parseInt(data.operations, 10);\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_FEE] = new Currency(data.fee);\n    this[P_RAWOPERATIONS] = BC.fromHex(data.rawoperations);\n  }\n\n  /**\n     * Gets the number of operations in this object.\n     *\n     * @returns {Number}\n     */\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  /**\n     * Gets the accumulated amount of all operations.\n     *\n     * @returns {Currency}\n     */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n     * Gets the accumulated amount of all operations.\n     *\n     * @returns {Currency}\n     */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n     * Gets the raw operations info.\n     *\n     * @returns {BC}\n     */\n  get rawoperations() {\n    return this[P_RAWOPERATIONS];\n  }\n}\n\nmodule.exports = RawOperations;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst P_VER = Symbol('ver');\nconst P_VER_A = Symbol('verA');\n\n/**\n * Holds information about a nodes version.\n */\nclass NetProtocol extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n    this[P_VER] = parseInt(data.ver, 10);\n    this[P_VER_A] = parseInt(data.ver_a, 10);\n  }\n\n  /**\n     * Gets the wallets protocol version.\n     *\n     * @returns {Number}\n     */\n  get ver() {\n    return this[P_VER];\n  }\n\n  /**\n     * Gets the miners protocol version.\n     *\n     * @returns {Number}\n     */\n  get verA() {\n    return this[P_VER_A];\n  }\n}\n\nmodule.exports = NetProtocol;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst P_BRECEIVED = Symbol('breceived');\nconst P_SERVERS_T = Symbol('servers_t');\nconst P_TSERVERS = Symbol('tservers');\nconst P_TOTAL = Symbol('total');\nconst P_BSEND = Symbol('bsend');\nconst P_SERVERS = Symbol('servers');\nconst P_CLIENTS = Symbol('clients');\nconst P_ACTIVE = Symbol('active');\nconst P_TCLIENTS = Symbol('tclients');\n\n/**\n * Class that holds netstats of a node server.\n */\nclass NetStats extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n\n    this[P_BRECEIVED] = parseInt(data.breceived, 10);\n    this[P_SERVERS_T] = parseInt(data.servers_t, 10);\n    this[P_TSERVERS] = parseInt(data.tservers, 10);\n    this[P_TOTAL] = parseInt(data.total, 10);\n    this[P_BSEND] = parseInt(data.bsend, 10);\n    this[P_SERVERS] = parseInt(data.servers, 10);\n    this[P_CLIENTS] = parseInt(data.clients, 10);\n    this[P_ACTIVE] = parseInt(data.active, 10);\n    this[P_TCLIENTS] = parseInt(data.tclients, 10);\n  }\n\n  /**\n     * Gets the received bytes.\n     *\n     * @returns {Number}\n     */\n  get breceived() {\n    return this[P_BRECEIVED];\n  }\n\n  /**\n     * Gets the number of server connections\n     *\n     * @returns {Number}\n     */\n  get serversT() {\n    return this[P_SERVERS_T];\n  }\n\n  /**\n     * Gets the number of server connections.\n     *\n     * @returns {Number}\n     */\n  get tservers() {\n    return this[P_TSERVERS];\n  }\n\n  /**\n     * Gets the number of total connections.\n     *\n     * @returns {Number}\n     */\n  get total() {\n    return this[P_TOTAL];\n  }\n\n  /**\n     * Gets the number of bytes sent.\n     *\n     * @returns {Number}\n     */\n  get bsend() {\n    return this[P_BSEND];\n  }\n\n  /**\n     * Gets the number of servers that responded.\n     *\n     * @returns {Number}\n     */\n  get servers() {\n    return this[P_SERVERS];\n  }\n\n  /**\n     * Gets the number of client connections.\n     *\n     * @returns {Number}\n     */\n  get clients() {\n    return this[P_CLIENTS];\n  }\n\n  /**\n     * Gets the number of active connections.\n     *\n     * @returns {Number}\n     */\n  get active() {\n    return this[P_ACTIVE];\n  }\n\n  /**\n     * Gets the number of total client connections.\n     *\n     * @returns {Number}\n     */\n  get tclients() {\n    return this[P_TCLIENTS];\n  }\n}\n\nmodule.exports = NetStats;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst P_PORT = Symbol('port');\nconst P_LASTCON = Symbol('lastcon');\nconst P_ATTEMPTS = Symbol('attempts');\nconst P_IP = Symbol('ip');\n\n/**\n * Holds information about a single node server connection.\n */\nclass NodeServer extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n\n    this[P_PORT] = parseInt(data.port, 10);\n    this[P_LASTCON] = parseInt(data.lastcon, 10);\n    this[P_ATTEMPTS] = parseInt(data.attempts, 10);\n    this[P_IP] = data.ip;\n  }\n\n  /**\n     * Gets the port of the server.\n     *\n     * @returns {Number}\n     */\n  get port() {\n    return this[P_PORT];\n  }\n\n  /**\n     * Gets the timestamp of the last connection.\n     *\n     * @returns {Number}\n     */\n  get lastcon() {\n    return this[P_LASTCON];\n  }\n\n  /**\n     * Gets the number of connection attempts.\n     *\n     * @returns {Number}\n     */\n  get attempts() {\n    return this[P_ATTEMPTS];\n  }\n\n  /**\n     * Gets the IP of the node.\n     *\n     * @returns {String}\n     */\n  get ip() {\n    return this[P_IP];\n  }\n}\n\nmodule.exports = NodeServer;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst Currency = require('@sbx/common').Types.Currency;\nconst BC = require('@sbx/common').BC;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\nconst P_PAYLOAD = Symbol('payload');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Represents a sender in an operation.\n */\nclass Sender extends Abstract {\n  /**\n   * Creates a new instance of the Sender class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_N_OPERATION] = parseInt(data.n_operation, 10);\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_PAYLOAD] = BC.fromHex(data.payload);\n  }\n\n  /**\n   * Gets the n operation of thwe sender.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the account of the sender.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the amount.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n}\n\nmodule.exports = Sender;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst Currency = require('@sbx/common').Types.Currency;\nconst BC = require('@sbx/common').BC;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\nconst P_PAYLOAD = Symbol('payload');\n\n/**\n * Represents a receiver in an operation.\n */\nclass Receiver extends Abstract {\n  /**\n   * Creates a new instance of the Receiver class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_PAYLOAD] = BC.fromHex(data.payload);\n  }\n\n  /**\n   * Gets the account of the receiver.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the amount.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n}\n\nmodule.exports = Receiver;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst Currency = require('@sbx/common').Types.Currency;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst BC = require('@sbx/common').BC;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_NEW_ENC_PUBKEY = Symbol('newPublicKey');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\nconst P_SELLER_ACCOUNT = Symbol('sellerAccount');\nconst P_ACCOUNT_PRICE = Symbol('account_price');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('lockedUntilBlock');\nconst P_FEE = Symbol('fee');\n\n/**\n * Represents a Changer in an operation.\n */\nclass Changer extends Abstract {\n  /**\n   * Creates a new instance of the Changer class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_N_OPERATION] = null;\n    if (data.n_operation !== undefined) {\n      this[P_N_OPERATION] = parseInt(data.n_operation, 10);\n    }\n\n    this[P_NEW_ENC_PUBKEY] = null;\n    if (data.new_enc_pubkey !== undefined) {\n      this[P_NEW_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.new_enc_pubkey));\n    }\n\n    this[P_NEW_NAME] = null;\n    if (data.new_name !== undefined) {\n      this[P_NEW_NAME] = new AccountName(data.new_name);\n    }\n\n    this[P_NEW_TYPE] = null;\n    if (data.new_type !== undefined) {\n      this[P_NEW_TYPE] = data.new_type;\n    }\n\n    this[P_SELLER_ACCOUNT] = null;\n    if (data.seller_account !== undefined) {\n      this[P_SELLER_ACCOUNT] = new AccountNumber(data.seller_account);\n    }\n\n    this[P_ACCOUNT_PRICE] = null;\n    if (data.account_price !== undefined) {\n      this[P_ACCOUNT_PRICE] = new Currency(data.account_price);\n    }\n\n    this[P_LOCKED_UNTIL_BLOCK] = null;\n    if (data.locked_until_block !== undefined) {\n      this[P_LOCKED_UNTIL_BLOCK] = parseInt(data.locked_until_block, 10);\n    }\n\n    this[P_FEE] = new Currency(0);\n    if (data.fee !== undefined) {\n      this[P_FEE] = new Currency(data.fee);\n    }\n  }\n\n  /**\n   * Gets the changed account.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the n op of the account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the new public key.\n   *\n   * @returns {PublicKey|null}\n   */\n  get newPublicKey() {\n    return this[P_NEW_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets the new name.\n   *\n   * @returns {String|null}\n   */\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  /**\n   * Gets the new type.\n   *\n   * @returns {Number|null}\n   */\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the seller account.\n   *\n   * @returns {AccountNumber|null}\n   */\n  get sellerAccount() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  /**\n   * Gets the sales price of the account.\n   *\n   * @returns {Currency|null}\n   */\n  get accountPrice() {\n    return this[P_ACCOUNT_PRICE];\n  }\n\n  /**\n   * Gets the block number until the account is blocked.\n   *\n   * @returns {Number|null}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Gets the fee for the change operation.\n   *\n   * @returns {Currency|null}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n}\n\nmodule.exports = Changer;\n","module.exports = {\n  Client: require('./src/Client'),\n  Executor: require('./src/Executor'),\n  Caller: require('./src/Caller'),\n  Actions: require('./src/Actions'),\n  Errors: require('./src/Errors'),\n  Types: require('./src/Types')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Executor = require('./Executor');\nconst RPCCaller = require('./Caller');\nconst BaseAction = require('./Actions/BaseAction');\nconst PagedAction = require('./Actions/PagedAction');\nconst OperationAction = require('./Actions/OperationAction');\nconst SignOperationAction = require('./Actions/SignOperationAction');\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\n\nconst P_EXECUTOR = Symbol('executor');\n\n/**\n * A simple rpc client that will prepare an action that can be executed against\n * a node.\n */\nclass Client {\n  /**\n     * Returns a standard instance pointing to the given rpc host node.\n     *\n     * @param {String} rpcHostAddress\n     * @returns {Client}\n     */\n  static factory(rpcHostAddress) {\n    return new Client(\n      new Executor(\n        new RPCCaller(rpcHostAddress),\n      ),\n    );\n  }\n\n  /**\n     * Constructor\n     *\n     * @param {Executor} executor\n     */\n  constructor(executor) {\n    this[P_EXECUTOR] = executor;\n  }\n\n  /**\n     * Adds one or more nodes to connect to.\n     *\n     * @param {String[]} nodes\n     * @returns {BaseAction}\n     */\n  addNode(...nodes) {\n    return new BaseAction('addnode', { nodes: nodes.join(');') }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets an account.\n     *\n     * @param {Account|AccountNumber|Number|String} account\n     * @returns {BaseAction}\n     */\n  getAccount(account) {\n    return new BaseAction('getaccount', {\n      account: new AccountNumber(account)\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets a list of all accounts known by the remote node and\n     * filtered by the given params.\n     *\n     * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} publicKey\n     * @returns {BaseAction}\n     */\n  getWalletAccounts(publicKey = null) {\n    return new PagedAction('getwalletaccounts', {\n      pubkey: publicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the number of all accounts known by the remote node and\n     * filtered by the given params.\n     *\n     * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} publicKey\n     * @returns {BaseAction}\n     */\n  getWalletAccountsCount(publicKey = null) {\n    return new BaseAction('getwalletaccountscount', {\n      pubkey: publicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets a list of all wallet public keys.\n     *\n     * @returns {BaseAction}\n     */\n  getWalletPublicKeys() {\n    return new PagedAction('getwalletpubkeys', { }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the information about a single wallets public key.\n     *\n     * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} publicKey\n     * @returns {BaseAction}\n     */\n  getWalletPublicKey(publicKey) {\n    return new BaseAction('getwalletpubkey', { pubkey: publicKey }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the balance of the wallet with the given keys or all keys.\n     *\n     * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} publicKey\n     * @returns {BaseAction}\n     */\n  getWalletCoins(publicKey = null) {\n    return new BaseAction('getwalletcoins', { pubkey: publicKey }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets a block by the given block number.\n     *\n     * @param {Block|Number} block\n     * @returns {BaseAction}\n     */\n  getBlock(block) {\n    return new BaseAction('getblock', { block }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets a list of blocks.\n     *\n     * @param {Number} last\n     * @param {Number} start\n     * @param {Number} end\n     * @returns {BaseAction}\n     */\n  getBlocks({last = null, start = null, end = null}) {\n    return new BaseAction('getblocks', {\n      last,\n      start,\n      end\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the number of known blocks.\n     *\n     * @returns {BaseAction}\n     */\n  getBlockCount() {\n    return new BaseAction('getblockcount', { }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the operation in the given block at the given position.\n     *\n     * @param {Block||Number} block\n     * @param {Number} opBlock\n     * @returns {BaseAction}\n     */\n  getBlockOperation(block, opBlock) {\n    return new BaseAction('getblockoperation', {\n      block,\n      opblock: opBlock\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets all operations of the given block.\n     *\n     * @param {Block|Number} block\n     * @returns {PagedAction}\n     */\n  getBlockOperations(block) {\n    return new PagedAction('getblockoperations', { block }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the operations of an account.\n     *\n     * @param {Account|AccountNumber|Number|String} account\n     * @param {Number} depth\n     * @returns {PagedAction}\n     */\n  getAccountOperations(account, depth = 100) {\n    return new PagedAction('getaccountoperations', {\n      account: new AccountNumber(account), depth\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the pending operations.\n     *\n     * @returns {PagedAction}\n     */\n  getPendings() {\n    return new PagedAction('getpendings', { }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the number of pending operations.\n     *\n     * @returns {BaseAction}\n     */\n  getPendingsCount() {\n    return new BaseAction('getpendingscount', { }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the operation identified by the given ophash.\n     *\n     * @param {String|BC|OperationHash} opHash\n     * @returns {BaseAction}\n     */\n  findOperation(opHash) {\n    return new BaseAction('findoperation', { ophash: opHash }, this[P_EXECUTOR]);\n  }\n\n  findAccounts({name = null, type = null, onlyAccountsForSale = null, exact = null,\n    minBalance = null, maxBalance = null, publicKey = null}) {\n    return new PagedAction('findaccounts', {\n      name: name !== null ? new AccountName(name) : name,\n      type,\n      listed: onlyAccountsForSale,\n      exact,\n      min_balance: minBalance,\n      max_balance: maxBalance,\n      pubkey: publicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Creates a new transaction.\n     *\n     * @param {Account|AccountNumber|Number|String} sender\n     * @param {Account|AccountNumber|Number|String} target\n     * @param {Currency} amount\n     * @returns {OperationAction}\n     */\n  sendTo(sender, target, amount) {\n    return new OperationAction('sendto', {\n      sender: new AccountNumber(sender),\n      target: new AccountNumber(target),\n      amount\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Changes the key of an account.\n     *\n     * @param {Account|AccountNumber|Number|String} account\n     * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} newPublicKey\n     * @returns {OperationAction}\n     */\n  changeKey(account, newPublicKey) {\n    return new OperationAction('changekey', {\n      account: new AccountNumber(account),\n      new_pubkey: newPublicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Lists an account for sale.\n     *\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @param {Currency} price\n     * @param {Account|AccountNumber|Number|String} sellerAccount\n     * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} newPublicKey\n     * @returns {OperationAction}\n     */\n  listAccountForSale(accountTarget, accountSigner, price, sellerAccount,\n    newPublicKey = null) {\n    return new OperationAction('listaccountforsale', {\n      account_target: new AccountNumber(accountTarget),\n      account_signer: new AccountNumber(accountSigner),\n      price,\n      seller_account: new AccountNumber(sellerAccount),\n      new_pubkey: newPublicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Lists an account for sale.\n     *\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     * @param {Account|AccountNumber|Number|String} accountSigner\n     * @returns {OperationAction}\n     */\n  delistAccountForSale(accountTarget, accountSigner) {\n    return new OperationAction('delistaccountforsale', {\n      account_target: new AccountNumber(accountTarget),\n      account_signer: new AccountNumber(accountSigner)\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Buys an account\n     *\n     * @param {Account|AccountNumber|Number|String} buyerAccount\n     * @param {Account|AccountNumber|Number|String} accountToPurchase\n     * @param {Currency|Number} price\n     * @param {Account|AccountNumber|Number|String} sellerAccount\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} newPublicKey\n     * @param {Currency|Number} amount\n     * @returns {OperationAction}\n     */\n  buyAccount(buyerAccount, accountToPurchase, price = null, sellerAccount = null,\n    newPublicKey = null, amount) {\n    return new OperationAction('buyaccount', {\n      buyer_account: new AccountNumber(buyerAccount),\n      account_to_purchase: new AccountNumber(accountToPurchase),\n      price,\n      seller_account: sellerAccount !== null ? new AccountNumber(sellerAccount) : sellerAccount,\n      new_pubkey: newPublicKey,\n      amount\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n   * Changes the info of an account.\n   *\n     * @param {Account|AccountNumber|Number|String} accountTarget\n     * @param {Account|AccountNumber|Number|String} accountSigner\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} newPublicKey\n     * @param {String} newName\n     * @param {Number} newType\n     * @returns {OperationAction}\n     */\n  changeAccountInfo(accountTarget, accountSigner, newPublicKey = null,\n    newName = null, newType = null) {\n    return new OperationAction('changeaccountinfo', {\n      account_target: new AccountNumber(accountTarget),\n      account_signer: new AccountNumber(accountSigner),\n      new_pubkey: newPublicKey,\n      new_name: newName !== null ? new AccountName(newName) : newName,\n      new_type: newType\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Gets the operation infos of the given raw operations string.\n   *\n     * @param {String|BC} rawOperations\n     * @returns {BaseAction}\n     */\n  operationsInfo(rawOperations) {\n    return new BaseAction('operationsinfo', { rawoperations: rawOperations }, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Executes the given raw operations\n   * @param {String|BC} rawOperations\n     * @returns {BaseAction}\n     */\n  executeOperations(rawOperations) {\n    return new BaseAction('executeoperations', {rawoperations: rawOperations}, this[P_EXECUTOR]);\n  }\n\n  /**\n     * Signs a changeaccount info\n     *\n     * @param {Account|AccountNumber|Number|String} account_target\n     * @param {Account|AccountNumber|Number|String} account_signer\n     * @param {PublicKey|WalletPublicKey|BC|String} new_enc_pubkey\n     * @param {String} new_b58_pubkey\n     * @param {String} new_name\n     * @param {Number} new_type\n     * @param {Currency} fee\n     * @param {BC|String} payload\n     * @param {String} payload_method\n     * @param {String} pwd\n     * @returns {Promise<any>}\n     */\n  signChangeAccountInfo(accountTarget, accountSigner, signerPublicKey, newPublicKey,\n    newName = null, newType = null) {\n    return new SignOperationAction('signchangeaccountinfo', {\n      account_target: new AccountNumber(accountTarget),\n      account_signer: new AccountNumber(accountSigner),\n      new_pubkey: newPublicKey,\n      new_name: newName !== null ? new AccountName(newName) : newName,\n      new_type: newType,\n      signer_pubkey: signerPublicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     *\n     * @param sender\n     * @param target\n     * @param senderPublicKey\n     * @param targetPublicKey\n     * @param amount\n     * @returns {SignOperationAction}\n     */\n  signSendTo(sender, target, senderPublicKey, targetPublicKey, amount) {\n    return new SignOperationAction('signsendto', {\n      sender: new AccountNumber(sender),\n      target: new AccountNumber(target),\n      sender_pubkey: senderPublicKey,\n      target_pubkey: targetPublicKey,\n      amount\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     *\n     * @param account\n     * @param oldPublicKey\n     * @param newPublicKey\n     * @returns {SignOperationAction}\n     */\n  signChangeKey(account, oldPublicKey, newPublicKey) {\n    return new SignOperationAction('signchangekey', {\n      account: new AccountNumber(account),\n      old_pubkey: oldPublicKey,\n      new_pubkey: newPublicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n     *\n     * @param accountTarget\n     * @param accountSigner\n     * @param price\n     * @param sellerAccount\n     * @param newPublicKey\n     * @param lockedUntilBlock\n     * @param signerPublicKey\n     * @returns {SignOperationAction}\n     */\n  signListAccountForSale(accountTarget, accountSigner, price, sellerAccount,\n    newPublicKey, lockedUntilBlock, signerPublicKey) {\n    return new SignOperationAction('signlistaccountforsale', {\n      account_target: new AccountNumber(accountTarget),\n      account_signer: new AccountNumber(accountSigner),\n      price,\n      seller_account: new AccountNumber(sellerAccount),\n      new_pubkey: newPublicKey,\n      locked_until_block: lockedUntilBlock,\n      signer_pubkey: signerPublicKey\n    }, this[P_EXECUTOR]);\n  }\n\n  /**\n   * Gets the status of the remote node.\n   *\n   * @returns {BaseAction}\n   */\n  nodeStatus() {\n    return new BaseAction('nodestatus', { }, this[P_EXECUTOR]);\n  }\n\n  /**\n   * Remotely decodes the given public key.\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} publicKey\n   * @returns {BaseAction}\n   */\n  decodePubKey(publicKey) {\n    return new BaseAction('decodepubkey', {pubkey: publicKey}, this[P_EXECUTOR]);\n  }\n\n  payloadDecrypt(payload, passwords = []) {\n    return new BaseAction('payloaddecrypt', {\n      payload: payload,\n      pwds: passwords\n    }, this[P_EXECUTOR]);\n  }\n\n  /*\n  importpubkey\ndecodeophash\nfindnoperation\nfindnoperations\nchangekeys\nsigndelistaccountforsale\nsignbuyaccount\nsignmessage\nverifysign\noperationsdelete\nmultioperationaddoperation\nmultioperationsignoffline\nmultioperationsignonline\nencodepubkey\npayloadencrypt\ngetconnections\naddnewkey\nlock\nunlock\nsetwalletpassword\nstopnode\nstartnode\ncleanblacklist\nnode_ip_stats\n   */\n}\n\nmodule.exports = Client;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nclass Endian {\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get BIG_ENDIAN() {\n    return 'BE';\n  }\n\n  /**\n   * Gets the identifier for big endian.\n   *\n   * @returns {string}\n   * @constructor\n   */\n  static get LITTLE_ENDIAN() {\n    return 'LE';\n  }\n\n  /**\n   * Detects the systems endianness.\n   *\n   * @returns {string}\n   */\n  static detect() {\n    var b = new ArrayBuffer(4);\n    var a = new Uint32Array(b);\n    var c = new Uint8Array(b);\n\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return Endian.LITTLE_ENDIAN;\n    }\n    if (c[0] === 0xde) {\n      return Endian.BIG_ENDIAN;\n    }\n\n    throw new Error('unknown endianness');\n  }\n\n  /**\n   * Gets a value indicating whether the system uses little endian.\n   *\n   * @returns {boolean}\n   */\n  static isLittleEndian() {\n    return Endian.detect() === Endian.LITTLE_ENDIAN;\n  }\n\n  /**\n   * Gets a value indicating whether the system uses big endian.\n   *\n   * @returns {boolean}\n   */\n  static isBigEndian() {\n    return Endian.detect() === Endian.BIG_ENDIAN;\n  }\n}\n\nmodule.exports = Endian;\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA256 implementation\r\n//        Generates a 32 byte hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA256 class\r\n */\r\nvar SHA256 = /** @class */ (function () {\r\n    /**\r\n     * SHA256 ctor\r\n     */\r\n    function SHA256() {\r\n        this.hashSize = 32;\r\n        this.buffer = new Uint8Array(64);\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n            0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n            0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n            0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n            0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n            0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA256.prototype.transform = function () {\r\n        var h = this.H, h0 = h[0], h1 = h[1], h2 = h[2], h3 = h[3], h4 = h[4], h5 = h[5], h6 = h[6], h7 = h[7];\r\n        // convert byte buffer into w[0..15]\r\n        var i, w = new Uint32Array(16);\r\n        for (i = 0; i < 16; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        for (i = 0; i < 64; i++) {\r\n            var tmp = void 0;\r\n            if (i < 16) {\r\n                tmp = w[i];\r\n            }\r\n            else {\r\n                var a = w[(i + 1) & 15];\r\n                var b = w[(i + 14) & 15];\r\n                tmp = w[i & 15] = ((a >>> 7 ^ a >>> 18 ^ a >>> 3 ^ a << 25 ^ a << 14) + (b >>> 17 ^ b >>> 19 ^ b >>> 10 ^ b << 15 ^ b << 13) + w[i & 15] + w[(i + 9) & 15]) | 0;\r\n            }\r\n            tmp = (tmp + h7 + (h4 >>> 6 ^ h4 >>> 11 ^ h4 >>> 25 ^ h4 << 26 ^ h4 << 21 ^ h4 << 7) + (h6 ^ h4 & (h5 ^ h6)) + this.K[i]) | 0;\r\n            h7 = h6;\r\n            h6 = h5;\r\n            h5 = h4;\r\n            h4 = h3 + tmp;\r\n            h3 = h2;\r\n            h2 = h1;\r\n            h1 = h0;\r\n            h0 = (tmp + ((h1 & h2) ^ (h3 & (h1 ^ h2))) + (h1 >>> 2 ^ h1 >>> 13 ^ h1 >>> 22 ^ h1 << 30 ^ h1 << 19 ^ h1 << 10)) | 0;\r\n        }\r\n        h[0] = (h[0] + h0) | 0;\r\n        h[1] = (h[1] + h1) | 0;\r\n        h[2] = (h[2] + h2) | 0;\r\n        h[3] = (h[3] + h3) | 0;\r\n        h[4] = (h[4] + h4) | 0;\r\n        h[5] = (h[5] + h5) | 0;\r\n        h[6] = (h[6] + h6) | 0;\r\n        h[7] = (h[7] + h7) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Array} msg Additional message data as byte array\r\n     * @return {SHA256} this\r\n     */\r\n    SHA256.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 512 bit (64 byte chunks)\r\n        for (var i = 0, len = msg.length; i < len; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 64) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 56\r\n        while (idx !== 56) {\r\n            if (idx === 64) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[56] = (c[1] >>> 24) & 0xff;\r\n        b[57] = (c[1] >>> 16) & 0xff;\r\n        b[58] = (c[1] >>> 8) & 0xff;\r\n        b[59] = (c[1] >>> 0) & 0xff;\r\n        b[60] = (c[0] >>> 24) & 0xff;\r\n        b[61] = (c[0] >>> 16) & 0xff;\r\n        b[62] = (c[0] >>> 8) & 0xff;\r\n        b[63] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var hash = new Uint8Array(32), i;\r\n        for (i = 0; i < 8; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i] >>> 0) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Message data as byte array\r\n     * @return {Uint8Array} Hash as 32 byte array\r\n     */\r\n    SHA256.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA256.prototype.selftest = function () {\r\n        var cumulative = new SHA256(), sha = new SHA256();\r\n        var toBeHashed = '', hash, i, n;\r\n        for (i = 0; i < 10; i++) {\r\n            for (n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === 'f305c76d5d457ddf04f1927166f5e13429407049a5c5f29021916321fcdcd8b4';\r\n    };\r\n    return SHA256;\r\n}());\r\nexports.SHA256 = SHA256;\r\n","\"use strict\";\r\n///////////////////////////////////////////////////////////////////////////////\r\n// \\author (c) Marco Paland (marco@paland.com)\r\n//             2015-2018, PALANDesign Hannover, Germany\r\n//\r\n// \\license The MIT License (MIT)\r\n//\r\n// This file is part of the mipher crypto library.\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n// \\brief SHA512 implementation\r\n//        Generates a 64 byte (512 bit) hash value\r\n//\r\n///////////////////////////////////////////////////////////////////////////////\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar base_1 = require(\"./base\");\r\n/**\r\n * SHA512 class\r\n */\r\nvar SHA512 = /** @class */ (function () {\r\n    /**\r\n     * SHA512 ctor\r\n     */\r\n    function SHA512() {\r\n        this.hashSize = 64;\r\n        this.buffer = new Uint8Array(128); // 128 byte array\r\n        this.K = new Uint32Array([\r\n            0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\r\n            0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\r\n            0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\r\n            0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\r\n            0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\r\n            0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\r\n            0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\r\n            0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\r\n            0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\r\n            0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\r\n            0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\r\n            0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\r\n            0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\r\n            0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\r\n            0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\r\n            0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\r\n            0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\r\n            0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\r\n            0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\r\n            0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\r\n        ]);\r\n        this.init();\r\n    }\r\n    /**\r\n     * Init the hash\r\n     * @return {Object} this\r\n     */\r\n    SHA512.prototype.init = function () {\r\n        this.H = new Uint32Array([0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\r\n            0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179]);\r\n        this.bufferIndex = 0;\r\n        this.count = new Uint32Array(2);\r\n        base_1.Util.clear(this.buffer);\r\n        return this;\r\n    };\r\n    /**\r\n     * Perform one transformation cycle\r\n     */\r\n    SHA512.prototype.transform = function () {\r\n        var h = this.H, h0h = h[0], h0l = h[1], h1h = h[2], h1l = h[3], h2h = h[4], h2l = h[5], h3h = h[6], h3l = h[7], h4h = h[8], h4l = h[9], h5h = h[10], h5l = h[11], h6h = h[12], h6l = h[13], h7h = h[14], h7l = h[15];\r\n        var ah = h0h, al = h0l, bh = h1h, bl = h1l, ch = h2h, cl = h2l, dh = h3h, dl = h3l, eh = h4h, el = h4l, fh = h5h, fl = h5l, gh = h6h, gl = h6l, hh = h7h, hl = h7l;\r\n        // convert byte buffer into w[0..31]\r\n        var i, w = new Uint32Array(160);\r\n        for (i = 0; i < 32; i++) {\r\n            w[i] = (this.buffer[(i << 2) + 3]) |\r\n                (this.buffer[(i << 2) + 2] << 8) |\r\n                (this.buffer[(i << 2) + 1] << 16) |\r\n                (this.buffer[(i << 2)] << 24);\r\n        }\r\n        // fill w[32..159]\r\n        var gamma0xl, gamma0xh, gamma0l, gamma0h, gamma1xl, gamma1xh, gamma1l, gamma1h, wrl, wrh, wr7l, wr7h, wr16l, wr16h;\r\n        for (i = 16; i < 80; i++) {\r\n            // Gamma0\r\n            gamma0xh = w[(i - 15) * 2];\r\n            gamma0xl = w[(i - 15) * 2 + 1];\r\n            gamma0h = ((gamma0xl << 31) | (gamma0xh >>> 1)) ^\r\n                ((gamma0xl << 24) | (gamma0xh >>> 8)) ^\r\n                ((gamma0xh >>> 7));\r\n            gamma0l = ((gamma0xh << 31) | (gamma0xl >>> 1)) ^\r\n                ((gamma0xh << 24) | (gamma0xl >>> 8)) ^\r\n                ((gamma0xh << 25) | (gamma0xl >>> 7));\r\n            // Gamma1\r\n            gamma1xh = w[(i - 2) * 2];\r\n            gamma1xl = w[(i - 2) * 2 + 1];\r\n            gamma1h = ((gamma1xl << 13) | (gamma1xh >>> 19)) ^\r\n                ((gamma1xh << 3) | (gamma1xl >>> 29)) ^\r\n                ((gamma1xh >>> 6));\r\n            gamma1l = ((gamma1xh << 13) | (gamma1xl >>> 19)) ^\r\n                ((gamma1xl << 3) | (gamma1xh >>> 29)) ^\r\n                ((gamma1xh << 26) | (gamma1xl >>> 6));\r\n            // shortcuts\r\n            wr7h = w[(i - 7) * 2],\r\n                wr7l = w[(i - 7) * 2 + 1],\r\n                wr16h = w[(i - 16) * 2],\r\n                wr16l = w[(i - 16) * 2 + 1];\r\n            // W(round) = gamma0 + W(round - 7) + gamma1 + W(round - 16)\r\n            wrl = gamma0l + wr7l;\r\n            wrh = gamma0h + wr7h + ((wrl >>> 0) < (gamma0l >>> 0) ? 1 : 0);\r\n            wrl += gamma1l;\r\n            wrh += gamma1h + ((wrl >>> 0) < (gamma1l >>> 0) ? 1 : 0);\r\n            wrl += wr16l;\r\n            wrh += wr16h + ((wrl >>> 0) < (wr16l >>> 0) ? 1 : 0);\r\n            // store\r\n            w[i * 2] = wrh;\r\n            w[i * 2 + 1] = wrl;\r\n        }\r\n        // compress\r\n        var chl, chh, majl, majh, sig0l, sig0h, sig1l, sig1h, krl, krh, t1l, t1h, t2l, t2h;\r\n        for (i = 0; i < 80; i++) {\r\n            // Ch\r\n            chh = (eh & fh) ^ (~eh & gh);\r\n            chl = (el & fl) ^ (~el & gl);\r\n            // Maj\r\n            majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\r\n            majl = (al & bl) ^ (al & cl) ^ (bl & cl);\r\n            // Sigma0\r\n            sig0h = ((al << 4) | (ah >>> 28)) ^ ((ah << 30) | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\r\n            sig0l = ((ah << 4) | (al >>> 28)) ^ ((al << 30) | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\r\n            // Sigma1\r\n            sig1h = ((el << 18) | (eh >>> 14)) ^ ((el << 14) | (eh >>> 18)) ^ ((eh << 23) | (el >>> 9));\r\n            sig1l = ((eh << 18) | (el >>> 14)) ^ ((eh << 14) | (el >>> 18)) ^ ((el << 23) | (eh >>> 9));\r\n            // K(round)\r\n            krh = this.K[i * 2];\r\n            krl = this.K[i * 2 + 1];\r\n            // t1 = h + sigma1 + ch + K(round) + W(round)\r\n            t1l = hl + sig1l;\r\n            t1h = hh + sig1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\r\n            t1l += chl;\r\n            t1h += chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\r\n            t1l += krl;\r\n            t1h += krh + ((t1l >>> 0) < (krl >>> 0) ? 1 : 0);\r\n            t1l = t1l + w[i * 2 + 1];\r\n            t1h += w[i * 2] + ((t1l >>> 0) < (w[i * 2 + 1] >>> 0) ? 1 : 0);\r\n            // t2 = sigma0 + maj\r\n            t2l = sig0l + majl;\r\n            t2h = sig0h + majh + ((t2l >>> 0) < (sig0l >>> 0) ? 1 : 0);\r\n            // update working variables\r\n            hh = gh;\r\n            hl = gl;\r\n            gh = fh;\r\n            gl = fl;\r\n            fh = eh;\r\n            fl = el;\r\n            el = (dl + t1l) | 0;\r\n            eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n            dh = ch;\r\n            dl = cl;\r\n            ch = bh;\r\n            cl = bl;\r\n            bh = ah;\r\n            bl = al;\r\n            al = (t1l + t2l) | 0;\r\n            ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\r\n        }\r\n        // intermediate hash\r\n        h0l = h[1] = (h0l + al) | 0;\r\n        h[0] = (h0h + ah + ((h0l >>> 0) < (al >>> 0) ? 1 : 0)) | 0;\r\n        h1l = h[3] = (h1l + bl) | 0;\r\n        h[2] = (h1h + bh + ((h1l >>> 0) < (bl >>> 0) ? 1 : 0)) | 0;\r\n        h2l = h[5] = (h2l + cl) | 0;\r\n        h[4] = (h2h + ch + ((h2l >>> 0) < (cl >>> 0) ? 1 : 0)) | 0;\r\n        h3l = h[7] = (h3l + dl) | 0;\r\n        h[6] = (h3h + dh + ((h3l >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\r\n        h4l = h[9] = (h4l + el) | 0;\r\n        h[8] = (h4h + eh + ((h4l >>> 0) < (el >>> 0) ? 1 : 0)) | 0;\r\n        h5l = h[11] = (h5l + fl) | 0;\r\n        h[10] = (h5h + fh + ((h5l >>> 0) < (fl >>> 0) ? 1 : 0)) | 0;\r\n        h6l = h[13] = (h6l + gl) | 0;\r\n        h[12] = (h6h + gh + ((h6l >>> 0) < (gl >>> 0) ? 1 : 0)) | 0;\r\n        h7l = h[15] = (h7l + hl) | 0;\r\n        h[14] = (h7h + hh + ((h7l >>> 0) < (hl >>> 0) ? 1 : 0)) | 0;\r\n    };\r\n    /**\r\n     * Update the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {SHA512} this\r\n     */\r\n    SHA512.prototype.update = function (msg) {\r\n        msg = msg || new Uint8Array(0);\r\n        // process the msg as many times as possible, the rest is stored in the buffer\r\n        // message is processed in 1024 bit (128 byte chunks)\r\n        for (var i = 0; i < msg.length; i++) {\r\n            this.buffer[this.bufferIndex++] = msg[i];\r\n            if (this.bufferIndex === 128) {\r\n                this.transform();\r\n                this.bufferIndex = 0;\r\n            }\r\n        }\r\n        // counter update (number of message bits)\r\n        var c = this.count;\r\n        if ((c[0] += (msg.length << 3)) < (msg.length << 3)) {\r\n            c[1]++;\r\n        }\r\n        c[1] += (msg.length >>> 29);\r\n        return this;\r\n    };\r\n    /**\r\n     * Finalize the hash with additional message data\r\n     * @param {Uint8Array} msg Additional message data as byte array\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.digest = function (msg) {\r\n        this.update(msg);\r\n        // append '1'\r\n        var b = this.buffer, idx = this.bufferIndex;\r\n        b[idx++] = 0x80;\r\n        // zeropad up to byte pos 112\r\n        while (idx !== 112) {\r\n            if (idx === 128) {\r\n                this.transform();\r\n                idx = 0;\r\n            }\r\n            b[idx++] = 0;\r\n        }\r\n        // append length in bits\r\n        var c = this.count;\r\n        b[112] = b[113] = b[114] = b[115] = b[116] = b[117] = b[118] = b[119] = 0;\r\n        b[120] = (c[1] >>> 24) & 0xff;\r\n        b[121] = (c[1] >>> 16) & 0xff;\r\n        b[122] = (c[1] >>> 8) & 0xff;\r\n        b[123] = (c[1] >>> 0) & 0xff;\r\n        b[124] = (c[0] >>> 24) & 0xff;\r\n        b[125] = (c[0] >>> 16) & 0xff;\r\n        b[126] = (c[0] >>> 8) & 0xff;\r\n        b[127] = (c[0] >>> 0) & 0xff;\r\n        this.transform();\r\n        // return the hash as byte array\r\n        var i, hash = new Uint8Array(64);\r\n        for (i = 0; i < 16; i++) {\r\n            hash[(i << 2) + 0] = (this.H[i] >>> 24) & 0xff;\r\n            hash[(i << 2) + 1] = (this.H[i] >>> 16) & 0xff;\r\n            hash[(i << 2) + 2] = (this.H[i] >>> 8) & 0xff;\r\n            hash[(i << 2) + 3] = (this.H[i]) & 0xff;\r\n        }\r\n        // clear internal states and prepare for new hash\r\n        this.init();\r\n        return hash;\r\n    };\r\n    /**\r\n     * All in one step\r\n     * @param {Uint8Array} msg Additional message data\r\n     * @return {Uint8Array} Hash as 64 byte array\r\n     */\r\n    SHA512.prototype.hash = function (msg) {\r\n        return this.init().digest(msg);\r\n    };\r\n    /**\r\n     * Performs a quick selftest\r\n     * @return {Boolean} True if successful\r\n     */\r\n    SHA512.prototype.selftest = function () {\r\n        var cumulative = new SHA512(), sha = new SHA512();\r\n        var toBeHashed = '', hash;\r\n        for (var i = 0; i < 10; i++) {\r\n            for (var n = 100 * i; n < 100 * (i + 1); n++) {\r\n                hash = base_1.Convert.bin2hex(sha.hash(base_1.Convert.str2bin(toBeHashed)));\r\n                cumulative.update(base_1.Convert.str2bin(hash));\r\n                toBeHashed = (hash.substring(0, 2) + toBeHashed).substring(0, n + 1);\r\n            }\r\n        }\r\n        hash = base_1.Convert.bin2hex(cumulative.digest());\r\n        return hash === '602923787640dd6d77a99b101c379577a4054df2d61f39c74172cafa2d9f5b26a11b40b7ba4cdc87e84a4ab91b85391cb3e1c0200f3e3d5e317486aae7bebbf3';\r\n    };\r\n    return SHA512;\r\n}());\r\nexports.SHA512 = SHA512;\r\n","module.exports = {\n  AccountName: require('./AccountName'),\n  AccountNumber: require('./AccountNumber'),\n  Currency: require('./Currency'),\n  OperationHash: require('./OperationHash'),\n  Keys: require('./Keys')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Util = require('../Util');\n\nconst P_VALUE = Symbol('value');\n\n// the list of characters to escape.\nconst CHARS_TO_ESCAPE = '(){}[]:\"<>'.split('');\nconst REGEX_TO_ESCAPE = `(${CHARS_TO_ESCAPE.map(c => Util.escapeRegex(c)).join('|')})`;\n\nconst ALLOWED_ALL = '0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&*()-+{}[]_:\"|<>,.?/~'.split('');\nconst ALLOWED_START = ALLOWED_ALL.slice(10);\n\n/**\n * AccountName encoding for account names.\n */\nclass AccountName {\n  /**\n   * Constructor\n   * @param {String|AccountName} value\n   */\n  constructor(value) {\n    if (value instanceof AccountName) {\n      this[P_VALUE] = value.toString();\n    } else {\n      this[P_VALUE] = AccountName.validate(value);\n    }\n  }\n\n  /**\n   * Validates a string.\n   *\n   * @param {String} value\n   * @return {String}\n     */\n  static validate(value) {\n    if (value.length === 0) {\n      return value;\n    }\n\n    if (value.length < 3) {\n      throw new Error('Invalid account name, must be at least 3 characters long.');\n    }\n\n    for (let pos = 0; pos < value.length; pos++) {\n      if (pos === 0 && ALLOWED_START.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position 0`);\n      } else if (pos > 0 && ALLOWED_ALL.indexOf(value[pos]) === -1) {\n        throw new Error(`Invalid AccountName encoding - character ${value[pos]} not allowed at position ${pos}`);\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets the string value.\n   *\n   * @returns {String}\n   */\n  toString() {\n    return this[P_VALUE];\n  }\n\n  /**\n   * Gets an escaped string representation for EPasa usage.\n   *\n   * @returns {*}\n   */\n  toStringEscaped() {\n    return this[P_VALUE].replace(new RegExp(REGEX_TO_ESCAPE, 'gm'), '\\\\$1');\n\n  }\n\n  /**\n   * Gets a value indicating whether the current char c1 is an escape modifier\n   * and the second is in the list of chars to escape.\n   *\n   * @param {String} c1\n   * @param {String} c2\n   * @returns {boolean}\n   */\n  static isEscape(c1, c2) {\n    return c1 === '\\\\' && CHARS_TO_ESCAPE.indexOf(c2) > -1;\n  }\n}\n\nmodule.exports = AccountName;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BigNumber = require('bignumber.js');\n\nconst P_VALUE = Symbol('value');\n\n/**\n * A simple wrapper around bignumber for the pascal currency and\n * basic math functions.\n */\nclass Currency {\n  static get MIN_FEE() {\n    return new Currency('0.0001');\n  }\n\n  /**\n     * Creates a new Currency instance.\n     *\n     * @param {Number|String|BigNumber|Currency} value\n     */\n  constructor(value) {\n    let pasc = value;\n\n    if (pasc instanceof Currency) {\n      this[P_VALUE] = pasc.value;\n      return;\n    }\n\n    if (typeof pasc === 'string') {\n      pasc = pasc.split(',').join('');\n    }\n\n    this[P_VALUE] = new BigNumber(pasc.toString());\n  }\n\n  static fromMolina(molina) {\n    return new Currency(\n      new BigNumber(molina.toString()).dividedBy('10000')\n    );\n  }\n\n  /**\n     * Gets the BigNumber instance.\n     *\n     * @returns {BigNumber}\n     */\n  get value() {\n    return this[P_VALUE];\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {string}\n     */\n  toString() {\n    return this[P_VALUE].toFixed(4);\n  }\n\n  /**\n   * Gets a value indicating that the current value has more decimals than\n   * allowed.\n   */\n  isVague() {\n    return this.toStringOpt(5) !== this.toStringOpt(4);\n  }\n\n  /**\n   * Gets an optimized pascal value with less zeros as possible.\n   *\n   * @returns {string}\n   */\n  toStringOpt(decimals = 4) {\n    return this[P_VALUE].toFixed(decimals)\n      .replace(new RegExp('[0]+$'), '')\n      .replace(new RegExp('[\\.]+$'), '');\n  }\n\n  /**\n     * Gets the pascal value as a string.\n     *\n     * @returns {Number}\n     */\n  toMolina() {\n    return parseFloat(this[P_VALUE].toString()) * 10000;\n  }\n\n  /**\n     * Adds the given value to the current value and returns a **new**\n     * value.\n     *\n     * @param {Number|String|BigNumber|Currency} addValue\n     * @returns {Currency}\n     */\n  add(addValue) {\n    return new Currency(\n      this.value.plus(new Currency(addValue).value).toFixed(4),\n    );\n  }\n\n  /**\n     * Subtracts the given value from the current value and returns a\n     * **new** value.\n     *\n     * @param {Currency} subValue\n     * @returns {Currency}\n     */\n  sub(subValue) {\n    return new Currency(\n      this.value.minus(new Currency(subValue).value).toFixed(4),\n    );\n  }\n\n  /**\n     * Gets a positive variant of the value. If the value is already\n     * positive, the current instance will be returned, else a new\n     * instance.\n     *\n     * @returns {Currency}\n     */\n  toPositive() {\n    if (!this[P_VALUE].isPositive()) {\n      return new Currency(\n        this[P_VALUE].multipliedBy(-1).toFixed(4),\n      );\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets a value indicating whether the given value is equal to the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  eq(value) {\n    return this[P_VALUE].isEqualTo(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gt(value) {\n    return this[P_VALUE].isGreaterThan(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower than the current\n   * value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lt(value) {\n    return this[P_VALUE].isLessThan(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is lower or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  lteq(value) {\n    return this[P_VALUE].isLessThanOrEqualTo(new Currency(value).value);\n  }\n\n  /**\n   * Gets a value indicating whether the given value is greater or equal to the\n   * current value.\n   *\n   * @param {Number|String|BigNumber|Currency} value\n   * @returns {boolean}\n   */\n  gteq(value) {\n    return this[P_VALUE].isGreaterThanOrEqualTo(new Currency(value).value);\n  }\n\n  /**\n     * Gets the serialized version of this instance.\n     *\n     * @returns {Object}\n     */\n  serialize() {\n    return {\n      pascal: this.toStringOpt(),\n      molina: this.toMolina()\n    };\n  }\n}\n\nmodule.exports = Currency;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../BC');\nconst AccountNumber = require('./AccountNumber');\n\nconst P_BLOCK = Symbol('block');\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_MD160 = Symbol('md160');\n\n/**\n * Holds information about an operation hash.\n */\nclass OperationHash {\n  /**\n   * Constructor\n   *\n   * @param {Number} block\n   * @param {Number} account\n   * @param {Number} nOperation\n   * @param {BC|Buffer|Uint8Array|String} md160\n   */\n  constructor(block, account, nOperation, md160) {\n    this[P_BLOCK] = block;\n    this[P_ACCOUNT] = new AccountNumber(account);\n    this[P_N_OPERATION] = nOperation;\n    this[P_MD160] = BC.from(md160);\n\n    if (md160.length !== 20) {\n      throw new Error('Invalid operation hash - md160 size !== 20 bytes.');\n    }\n  }\n\n  /**\n   * Decodes the given operation hash.\n   *\n   * @param {BC|Buffer|Uint8Array|String} opHash\n   */\n  static decode(opHash) {\n    opHash = BC.from(opHash);\n    const block = opHash.slice(0, 4).switchEndian().toInt();\n    const account = new AccountNumber(opHash.slice(4, 8).switchEndian().toInt());\n    const nOperation = opHash.slice(8, 12).switchEndian().toInt();\n    const md160 = opHash.slice(12);\n\n    return new OperationHash(block, account, nOperation, md160);\n  }\n\n  /**\n   * Creates the pascal encoding for an operation hash.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    return BC.concat(\n      BC.fromInt(this[P_BLOCK], 4).switchEndian(),\n      BC.fromInt(this[P_ACCOUNT].account, 4).switchEndian(),\n      BC.fromInt(this[P_N_OPERATION], 4).switchEndian(),\n      this[P_MD160],\n    );\n  }\n\n  /**\n   * Gets the operation hash as a pending operation.\n   *\n   * @returns {BC}\n   */\n  encodeAsPending() {\n    return new OperationHash(0, this[P_ACCOUNT], this[P_N_OPERATION], this[P_MD160]).encode();\n  }\n\n  /**\n   * Gets the account that executed the operation.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the block number.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the number of operations for the executing account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the md160 of the op.\n   *\n   * @returns {BC}\n   */\n  get md160() {\n    return this[P_MD160];\n  }\n}\n\nmodule.exports = OperationHash;\n","module.exports = {\n  Curve: require('./Curve'),\n  PrivateKey: require('./PrivateKey'),\n  PublicKey: require('./PublicKey'),\n  KeyPair: require('./KeyPair')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\n\nconst P_KEY = Symbol('key');\nconst P_CURVE = Symbol('curve');\nconst P_LENGTH = Symbol('length');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PrivateKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} key\n     * @param {Curve} curve\n     */\n  constructor(key, curve) {\n    this[P_KEY] = BC.from(key);\n    this[P_CURVE] = curve;\n    this[P_LENGTH] = key.length;\n\n    const privateKeyLength = curve.lPrivateKey();\n\n    if (this[P_LENGTH] > privateKeyLength) {\n      throw new Error(`Invalid length for curve ${curve.name} - ` +\n          `expected <= ${privateKeyLength}, got ${this[P_LENGTH]}`\n      );\n    }\n\n    /*\n    if (this[P_LENGTH] < privateKeyLength) {\n      this[P_LENGTH] = privateKeyLength;\n      this[P_KEY] = key.prepend(BC.fromHex('00'.repeat(privateKeyLength - this[P_LENGTH])));\n    }*/\n  }\n\n  /**\n     * Gets the key value.\n     *\n     * @returns {BC}\n     */\n  get key() {\n    return this[P_KEY];\n  }\n\n  /**\n     * Gets the ec key.\n     *\n     * @returns {BC}\n     */\n  get ec() {\n    return this.key;\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {Number}\n     */\n  get length() {\n    return this[P_LENGTH];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Encodes a private key to a BC defined by PascalCoin.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    const curve = BC.fromInt(this.curve.id).switchEndian();\n    const length = BC.fromInt(this.length, 2).switchEndian();\n\n    return BC.concat(curve, length, this.key);\n  }\n\n  /**\n   * Decodes a PascalCoin private key string.\n   *\n   * @param {BC|Buffer|Uint8Array|String} encoded\n   * @returns {PrivateKey}\n   */\n  static decode(encoded) {\n    encoded = BC.from(encoded);\n    const curve = encoded.slice(0, 2).switchEndian().toInt();\n    const length = encoded.slice(2, 4).switchEndian().toInt();\n    const key = encoded.slice(4, 4 + length);\n\n    return new PrivateKey(key, new Curve(curve));\n  }\n}\n\nmodule.exports = PrivateKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BC = require('../../BC');\nconst Curve = require('./Curve');\nconst Sha = require('../../Sha');\nconst Base58 = require('../../Base58');\n\nconst P_X = Symbol('x');\nconst P_XL = Symbol('xl');\nconst P_Y = Symbol('y');\nconst P_YL = Symbol('yl');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a public key in pascalcoin.\n */\nclass PublicKey {\n  /**\n     * Constructor\n     *\n     * @param {BC|Buffer|Uint8Array|String} x\n     * @param {BC|Buffer|Uint8Array|String} y\n     * @param {Curve} curve\n     */\n  constructor(x, y, curve) {\n    x = BC.from(x);\n    y = BC.from(y);\n\n    this[P_X] = x;\n    this[P_Y] = y;\n    this[P_XL] = x.length;\n    this[P_YL] = y.length;\n    this[P_CURVE] = curve;\n\n    if (this[P_XL] > curve.xylPublicKey('x') || this[P_YL] > curve.xylPublicKey('y')) {\n      throw new Error(`Invalid x and/or y length for curve ${curve.name} - ` +\n          `expected <= X${curve.xylPublicKey('x')}:Y${curve.xylPublicKey('y')}, ` +\n          `got X${this[P_XL]}:Y${this[P_YL]}`\n      );\n    }\n  }\n\n  /**\n     * Gets the X value of the key.\n     *\n     * @returns {BC}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the y value of the key.\n     *\n     * @returns {BC}\n     */\n  get y() {\n    return this[P_Y];\n  }\n\n  /**\n     * Gets the length of X.\n     *\n     * @returns {Number}\n     */\n  get yl() {\n    return this[P_YL];\n  }\n\n  /**\n     * Gets the length of Y.\n     *\n     * @returns {Number}\n     */\n  get xl() {\n    return this[P_XL];\n  }\n\n  /**\n     * Gets the used curve.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ec() {\n    return BC.concat(this.x, this.y);\n  }\n\n  /**\n   * Gets the ec key.\n   *\n   * @returns {BC}\n   */\n  get ecdh() {\n    return BC.concat(BC.fromInt(4), this.x, this.y);\n  }\n\n  /**\n     * Gets an empty public key instance.\n     *\n     * @returns {PublicKey}\n     */\n  static empty() {\n    return new PublicKey(\n      BC.fromString(''),\n      BC.fromString(''),\n      new Curve(0),\n    );\n  }\n\n  /**\n   * Encodes a public key to a BC defined by PascalCoin.\n   *\n   * @returns {BC}\n   */\n  encode() {\n    const curve = BC.fromInt(this.curve.id, 2).switchEndian();\n    const xl = BC.fromInt(this.xl, 2).switchEndian();\n    const yl = BC.fromInt(this.yl, 2).switchEndian();\n\n    return BC.concat(curve, xl, this.x, yl, this.y);\n  }\n\n  /**\n   * Decodes an encoded public key.\n   *\n   * @param {BC|Buffer|Uint8Array|String} encoded\n   * @returns {PublicKey}\n   */\n  static decode(encoded) {\n    encoded = BC.from(encoded);\n    const curve = encoded.slice(0, 2).switchEndian().toInt();\n    const xl = encoded.slice(2, 4).switchEndian().toInt();\n    const x = encoded.slice(4, 4 + xl);\n    const yl = encoded.slice(4 + xl, 6 + xl).switchEndian().toInt();\n    const y = encoded.slice(6 + xl, 6 + xl + yl);\n\n    return new PublicKey(x, y, new Curve(curve));\n  }\n\n  /**\n   * Gets the base58 representation of a public key.\n   *\n   * @returns {String}\n   */\n  toBase58() {\n    const prefix = BC.fromHex('01');\n    const encoded = this.encode();\n    const aux = Sha.sha256(encoded);\n    const suffix = aux.slice(0, 4);\n\n    const raw = BC.concat(prefix, encoded, suffix);\n\n    return Base58.encode(raw);\n  }\n\n  /**\n   * Gets a public key instance from the given base58 string.\n   *\n   * @param {String} base58\n   * @returns {PublicKey}\n   */\n  static fromBase58(base58) {\n    const decoded = Base58.decode(base58);\n\n    return PublicKey.decode(decoded.slice(1, -4));\n  }\n}\n\nmodule.exports = PublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_PRIVATE_KEY = Symbol('private_key');\nconst P_PUBLIC_KEY = Symbol('public_key');\nconst P_CURVE = Symbol('curve');\n\n/**\n * Represents a private and public keypair.\n */\nclass KeyPair {\n  /**\n     * Creates a new private-public keypair instance.\n     *\n     * @param {PrivateKey} privateKey\n     * @param {PublicKey} publicKey\n     */\n  constructor(privateKey, publicKey) {\n    this[P_CURVE] = privateKey.curve;\n    this[P_PRIVATE_KEY] = privateKey;\n    this[P_PUBLIC_KEY] = publicKey;\n\n    if (privateKey.curve.id !== publicKey.curve.id) {\n      throw new Error('Mixed up curves between private an public key');\n    }\n  }\n\n  /**\n     * Gets the private key.\n     *\n     * @returns {PrivateKey}\n     */\n  get privateKey() {\n    return this[P_PRIVATE_KEY];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBLIC_KEY];\n  }\n\n  /**\n     * Gets the curve used for the keypair.\n     *\n     * @returns {Curve}\n     */\n  get curve() {\n    return this[P_CURVE];\n  }\n}\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar extend = require('lodash/extend');\nvar isArray = require('lodash/isArray');\nvar isFunction = require('lodash/isFunction');\nvar isObject = require('lodash/isObject');\nvar isUndefined = require('lodash/isUndefined');\nvar negate = require('lodash/negate');\nvar uuid = require('uuid/v4');\nvar generateRequest = require('../generateRequest');\n\n/**\n *  Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n *  @class ClientBrowser\n *  @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n *  @param {Object} [options]\n *  @param {Function} [options.reviver] Reviver function for JSON\n *  @param {Function} [options.replacer] Replacer function for JSON\n *  @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n *  @param {Function} [options.generator] Function to use for generating request IDs\n *  @return {ClientBrowser}\n */\nvar ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  var defaults = {\n    reviver: null,\n    replacer: null,\n    generator: function() { return uuid(); },\n    version: 2\n  };\n\n  this.options = extend(defaults, options || {});\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  var self = this;\n  var request = null;\n\n  // is this a batch request?\n  var isBatch = isArray(method) && isFunction(params);\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  var isRaw = !isBatch && method && isObject(method) && isFunction(params);\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(isFunction(id)) {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    var hasCallback = isFunction(callback);\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  var message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  var response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      var isError = function(res) { return !isUndefined(res.error); };\n\n      return callback(null, response.filter(isError), response.filter(negate(isError)));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","module.exports = require('./assignIn');\n","var copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    keysIn = require('./keysIn');\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nmodule.exports = assignIn;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","'use strict';\n\nvar isString = require('lodash/isString');\nvar isUndefined = require('lodash/isUndefined');\nvar isObject = require('lodash/isObject');\nvar isArray = require('lodash/isArray');\nvar isFunction = require('lodash/isFunction');\nvar uuid = require('uuid/v4');\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n */\nmodule.exports = function(method, params, id, options) {\n  if(!isString(method)) {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  var request = {\n    method: method\n  };\n\n  // assume that we are doing a 2.0 request unless specified differently\n  if(isUndefined(options.version) || options.version !== 1) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n\n    // params given, but invalid?\n    if(!isObject(params) && !isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n\n    request.params = params;\n\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    var generator = isFunction(options.generator) ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = global.fetch.bind(global);\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","module.exports = {\n  BaseAction: require('./BaseAction'),\n  OperationAction: require('./OperationAction'),\n  PagedAction: require('./PagedAction'),\n  SignOperationAction: require('./SignOperationAction')\n};\n","module.exports = {\n  ConnectionError: require('./ConnectionError'),\n  ResultError: require('./ResultError')\n};\n","module.exports = {\n  Account: require('./Account'),\n  Block: require('./Block'),\n  NodeStatus: require('./NodeStatus'),\n  NetStats: require('./NetStats'),\n  NetProtocol: require('./NetProtocol'),\n  NodeServer: require('./NodeServer'),\n  Operation: require('./Operation'),\n  Changer: require('./Changer'),\n  Receiver: require('./Receiver'),\n  Sender: require('./Sender'),\n  RawOperations: require('./RawOperations'),\n  WalletPublicKey: require('./WalletPublicKey')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst BC = require('@sbx/common').BC;\nconst NetProtocol = require('./NetProtocol');\nconst NetStats = require('./NetStats');\nconst NodeServer = require('./NodeServer');\n\nconst P_READY = Symbol('ready');\nconst P_READY_S = Symbol('ready_s');\nconst P_STATUS_S = Symbol('status_s');\nconst P_PORT = Symbol('port');\nconst P_LOCKED = Symbol('locked');\nconst P_TIMESTAMP = Symbol('timestamp');\nconst P_BLOCKS = Symbol('blocks');\nconst P_NODESERVERS = Symbol('nodeservers');\nconst P_NETSTATS = Symbol('netstats');\nconst P_VERSION = Symbol('version');\nconst P_NETPROTOCOL = Symbol('netprotocol');\nconst P_SBH = Symbol('sbh');\nconst P_POW = Symbol('pow');\nconst P_OPENSSL = Symbol('openssl');\n\nclass NodeStatus extends Abstract {\n  constructor(data) {\n    super(data);\n\n    this[P_READY] = !!data.ready;\n    this[P_READY_S] = data.ready_s;\n    this[P_STATUS_S] = data.status_s;\n    this[P_PORT] = parseInt(data.port, 10);\n    this[P_LOCKED] = !!data.locked;\n    this[P_TIMESTAMP] = parseInt(data.timestamp, 10);\n    this[P_BLOCKS] = parseInt(data.blocks, 10);\n    this[P_VERSION] = data.version;\n    this[P_SBH] = BC.fromHex(data.sbh);\n    this[P_POW] = BC.fromHex(data.pow);\n    this[P_OPENSSL] = BC.fromHex(data.openssl);\n    this[P_NETPROTOCOL] = new NetProtocol(data.netprotocol);\n    this[P_NETSTATS] = new NetStats(data.netstats);\n    this[P_NODESERVERS] = data.nodeservers.map(ns => new NodeServer(ns));\n  }\n\n  /**\n     * Gets a flag indicating whether the node is ready.\n     *\n     * @returns {Boolean}\n     */\n  get ready() {\n    return this[P_READY];\n  }\n\n  /**\n     * Gets a string explaining the ready status.\n     *\n     * @returns {String}\n     */\n  get readyS() {\n    return this[P_READY_S];\n  }\n\n  /**\n     * Gets a string defining the status of the node.\n     *\n     * @returns {String}\n     */\n  get statusS() {\n    return this[P_STATUS_S];\n  }\n\n  /**\n     * Gets the port of the node.\n     *\n     * @returns {Number}\n     */\n  get port() {\n    return this[P_PORT];\n  }\n\n  /**\n     * Gets a value indicating whether the wallet is locked.\n     *\n     * @returns {Boolean}\n     */\n  get locked() {\n    return this[P_LOCKED];\n  }\n\n  /**\n     * Gets the timestamp where the node runs.\n     *\n     * @returns {Number}\n     */\n  get timestamp() {\n    return this[P_TIMESTAMP];\n  }\n\n  /**\n     * Gets the number of known blocks.\n     *\n     * @returns {Number}\n     */\n  get blocks() {\n    return this[P_BLOCKS];\n  }\n\n  /**\n     * Gets the list of nodeservers.\n     *\n     * @returns {NodeServer[]}\n     */\n  get nodeservers() {\n    return this[P_NODESERVERS];\n  }\n\n  /**\n     * Gets the netstats\n     *\n     * @returns {NetStats}\n     */\n  get netstats() {\n    return this[P_NETSTATS];\n  }\n\n  /**\n     * Gets the node version info.\n     *\n     * @returns {Version}\n     */\n  get version() {\n    return this[P_VERSION];\n  }\n\n  /**\n     * Gets the info about the protocol versions.\n     *\n     * @returns {NetProtocol}\n     */\n  get netprotocol() {\n    return this[P_NETPROTOCOL];\n  }\n\n  /**\n     * Gets the last safebox hash.\n     *\n     * @returns {BC}\n     */\n  get sbh() {\n    return this[P_SBH];\n  }\n\n  /**\n     * Gets the last known POW.\n     *\n     * @returns {BC}\n     */\n  get pow() {\n    return this[P_POW];\n  }\n\n  /**\n     * Gets the openssl info.\n     *\n     * @returns {BC}\n     */\n  get openssl() {\n    return this[P_OPENSSL];\n  }\n}\n\nmodule.exports = NodeStatus;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst BC = require('@sbx/common').BC;\nconst Currency = require('@sbx/common').Types.Currency;\nconst OperationHash = require('@sbx/common').Types.OperationHash;\n\nconst Sender = require('./Sender');\nconst Receiver = require('./Receiver');\nconst Changer = require('./Changer');\n\nconst P_VALID = Symbol('valid');\nconst P_ERRORS = Symbol('errors');\nconst P_BLOCK = Symbol('block');\nconst P_TIME = Symbol('time');\nconst P_OPBLOCK = Symbol('opblock');\nconst P_PAYLOAD = Symbol('payload');\nconst P_MATURATION = Symbol('maturation');\nconst P_OPTYPE = Symbol('optype');\nconst P_ACCOUNT = Symbol('account');\nconst P_OPTXT = Symbol('optxt');\nconst P_AMOUNT = Symbol('amount');\nconst P_FEE = Symbol('fee');\nconst P_BALANCE = Symbol('balance');\nconst P_OPHASH = Symbol('ophash');\nconst P_OLD_OPHASH = Symbol('old_ophash');\nconst P_SUBTYPE = Symbol('subtype');\nconst P_SIGNER_ACCOUNT = Symbol('signer_account');\nconst P_CHANGERS = Symbol('changers');\nconst P_SENDERS = Symbol('senders');\nconst P_RECEIVERS = Symbol('receivers');\n\n/**\n * A class thats holds the information about an operation.\n */\nclass Operation extends Abstract {\n  // The available optypes\n  static get BLOCKCHAIN_REWARD() {\n    return 0;\n  }\n\n  static get TRANSACTION() {\n    return 1;\n  }\n\n  static get CHANGE_KEY() {\n    return 2;\n  }\n\n  static get RECOVER_FUNDS() {\n    return 3;\n  }\n\n  static get LIST_FOR_SALE() {\n    return 4;\n  }\n\n  static get DELIST() {\n    return 5;\n  }\n\n  static get BUY() {\n    return 6;\n  }\n\n  static get CHANGE_KEY_ACCOUNT() {\n    return 7;\n  }\n\n  static get CHANGE_ACCOUNT_INFO() {\n    return 8;\n  }\n\n  static get MULTI_OPERATION() {\n    return 9;\n  }\n\n  static get DATA() {\n    return 10;\n  }\n\n  /**\n   * Creates a new Operation instance from an rpc response.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_VALID] = true;\n    if (data.valid !== undefined) {\n      this[P_VALID] = !!data.valid;\n    }\n\n    this[P_ERRORS] = null;\n    if (data.errors !== undefined) {\n      this[P_ERRORS] = data.errors;\n    }\n\n    if (data.payload !== undefined) {\n      this[P_PAYLOAD] = BC.fromHex(data.payload);\n    } else {\n      this[P_PAYLOAD] = BC.fromHex('');\n    }\n\n    this[P_BLOCK] = parseInt(data.block, 10);\n    this[P_TIME] = parseInt(data.time, 10);\n    this[P_OPBLOCK] = parseInt(data.opblock, 10);\n    this[P_MATURATION] = 0;\n    // pending\n    if (data.maturation !== null) {\n      this[P_MATURATION] = parseInt(data.maturation, 10);\n    }\n\n    this[P_OPTYPE] = parseInt(data.optype, 10);\n    // multi-op\n    this[P_ACCOUNT] = null;\n    if (data.account !== undefined) {\n      this[P_ACCOUNT] = new AccountNumber(data.account);\n    }\n    this[P_OPTXT] = data.optxt;\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_FEE] = new Currency(data.fee);\n    this[P_BALANCE] = null;\n    if (data.balance !== undefined) {\n      this[P_BALANCE] = new Currency(data.balance);\n    }\n\n    this[P_OPHASH] = null;\n    if (data.ophash !== undefined) {\n      this[P_OPHASH] = BC.fromHex(data.ophash);\n      if (this[P_OPTYPE] !== Operation.BLOCKCHAIN_REWARD) {\n        this[P_OPHASH] = OperationHash.decode(BC.fromHex(data.ophash));\n      }\n    }\n\n    this[P_OLD_OPHASH] = null;\n    if (data.old_ophash !== undefined) {\n      this[P_OLD_OPHASH] = BC.fromHex(data.old_ophash);\n    }\n\n    this[P_SUBTYPE] = data.subtype;\n    this[P_SIGNER_ACCOUNT] = null;\n    if (data.signer_account !== undefined) {\n      this[P_SIGNER_ACCOUNT] = new AccountNumber(data.signer_account);\n    }\n\n    // eslint-disable-next-line no-multi-assign\n    this[P_SENDERS] = [];\n    this[P_RECEIVERS] = [];\n    this[P_CHANGERS] = [];\n\n    // loop given data and initialize objects\n    data.senders.forEach(s => this[P_SENDERS].push(new Sender(s)));\n    data.receivers.forEach(r => this[P_RECEIVERS].push(new Receiver(r)));\n    data.changers.forEach(c => this[P_CHANGERS].push(new Changer(c)));\n  }\n\n  /**\n   * Gets an indicator whether the operation was valid.\n   *\n   * @returns {Boolean}\n   */\n  get valid() {\n    return this[P_VALID];\n  }\n\n  /**\n   * If the operation is invalid you'll get the error message.\n   *\n   * @returns {String|null}\n   */\n  get errors() {\n    return this[P_ERRORS];\n  }\n\n  /**\n   * Gets the block that is associated with the operation.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the time of the operation.\n   *\n   * @returns {Number}\n   */\n  get time() {\n    return this[P_TIME];\n  }\n\n  /**\n   * Gets the position inside a block.\n   *\n   * @returns {Number}\n   */\n  get opblock() {\n    return this[P_OPBLOCK];\n  }\n\n  /**\n   * Gets the age in blocks of the operation.\n   *\n   * @returns {Number}\n   */\n  get maturation() {\n    return this[P_MATURATION];\n  }\n\n  /**\n   * Gets the type of the operation.\n   *\n   * @returns {Number}\n   */\n  get opType() {\n    return this[P_OPTYPE];\n  }\n\n  /**\n   * Gets the account.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets a textual representation of the operation.\n   *\n   * @returns {String}\n   */\n  get opTxt() {\n    return this[P_OPTXT];\n  }\n\n  /**\n   * Gets the amount.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the fee.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the balance of the account.\n   *\n   * @returns {Number}\n   */\n  get balance() {\n    return this[P_BALANCE];\n  }\n\n  /**\n   * Gets the operation hash.\n   *\n   * @returns {OperationHash}\n   */\n  get opHash() {\n    return this[P_OPHASH];\n  }\n\n  /**\n   * Gets the <= V2 operation Hash.\n   *\n   * @returns {BC|null}\n   */\n  get oldOpHash() {\n    return this[P_OLD_OPHASH];\n  }\n\n  /**\n   * Gets the subtype.\n   *\n   * @returns {String}\n   */\n  get subtype() {\n    return this[P_SUBTYPE];\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber|null}\n   */\n  get signerAccount() {\n    return this[P_SIGNER_ACCOUNT];\n  }\n\n  /**\n   * Gets the payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the list of changers.\n   *\n   * @returns {Changer[]}\n   */\n  get changers() {\n    return this[P_CHANGERS];\n  }\n\n  /**\n   * Gets the list of senders.\n   *\n   * @returns {Sender[]}\n   */\n  get senders() {\n    return this[P_SENDERS];\n  }\n\n  /**\n   * Gets the list of receivers.\n   *\n   * @returns {Receiver[]}\n   */\n  get receivers() {\n    return this[P_RECEIVERS];\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a BLOCKCHAIN_REWARD operation.\n   *\n   * @returns {boolean}\n   */\n  isBlockchainReward() {\n    return this[P_OPTYPE] === Operation.BLOCKCHAIN_REWARD;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a TRANSACTION operation.\n   *\n   * @returns {boolean}\n   */\n  isTransaction() {\n    return this[P_OPTYPE] === Operation.TRANSACTION;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a CHANGE_KEY operation.\n   *\n   * @returns {boolean}\n   */\n  isChangeKey() {\n    return this[P_OPTYPE] === Operation.CHANGE_KEY;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a RECOVER_FUNDS operation.\n   *\n   * @returns {boolean}\n   */\n  isRecoverFunds() {\n    return this[P_OPTYPE] === Operation.RECOVER_FUNDS;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a LIST_FOR_SALE operation.\n   *\n   * @returns {boolean}\n   */\n  isListForSale() {\n    return this[P_OPTYPE] === Operation.LIST_FOR_SALE;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a DELIST operation.\n   *\n   * @returns {boolean}\n   */\n  isDelist() {\n    return this[P_OPTYPE] === Operation.DELIST;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a BUY operation.\n   *\n   * @returns {boolean}\n   */\n  isBuy() {\n    return this[P_OPTYPE] === Operation.BUY;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a CHANGE_KEY_ACCOUNT operation.\n   *\n   * @returns {boolean}\n   */\n  isChangeKeyAccount() {\n    return this[P_OPTYPE] === Operation.CHANGE_KEY_ACCOUNT;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a CHANGE_ACCOUNT_INFO operation.\n   *\n   * @returns {boolean}\n   */\n  isChangeAccountInfo() {\n    return this[P_OPTYPE] === Operation.CHANGE_ACCOUNT_INFO;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a MULTI_OPERATION operation.\n   *\n   * @returns {boolean}\n   */\n  isMultiOperation() {\n    return this[P_OPTYPE] === Operation.MULTI_OPERATION;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a DATA operation.\n   *\n   * @returns {boolean}\n   */\n  isData() {\n    return this[P_OPTYPE] === Operation.DATA;\n  }\n\n  /**\n   * Gets a value indicating whether the op is pending.\n   *\n   * @returns {boolean}\n   */\n  isPending() {\n    return this[P_BLOCK] === 0;\n  }\n\n  /**\n   * Gets a value indicating whether the operation was not executed because of\n   * fees.\n   *\n   * @returns {boolean}\n   */\n  isZeroFeeError() {\n    return this.valid === false &&\n        this[P_ERRORS].indexOf('zero fee operations per block') > -1;\n  }\n}\n\nmodule.exports = Operation;\n"],"sourceRoot":""}