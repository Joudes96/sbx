{"version":3,"sources":["webpack://@sbx/json-rpc/webpack/universalModuleDefinition","webpack://@sbx/json-rpc/webpack/bootstrap","webpack://@sbx/json-rpc/external \"@sbx/common\"","webpack://@sbx/json-rpc/./src/Types/Abstract.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isObject.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isFunction.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseGetTag.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isObjectLike.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isArray.js","webpack://@sbx/json-rpc/./src/Actions/BaseAction.js","webpack://@sbx/json-rpc/./src/Types/Block.js","webpack://@sbx/json-rpc/./src/Types/WalletPublicKey.js","webpack://@sbx/json-rpc/./src/Types/Account.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_root.js","webpack://@sbx/json-rpc/./src/Actions/OperationAction.js","webpack://@sbx/json-rpc/./src/Types/RawOperations.js","webpack://@sbx/json-rpc/./src/Types/Sender.js","webpack://@sbx/json-rpc/./src/Types/Receiver.js","webpack://@sbx/json-rpc/./src/Types/Changer.js","webpack://@sbx/json-rpc/./src/Executor.js","webpack://@sbx/json-rpc/./src/Caller.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseAssignValue.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_defineProperty.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_Symbol.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_freeGlobal.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/eq.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/identity.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isArrayLike.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isLength.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isIndex.js","webpack://@sbx/json-rpc/(webpack)/buildin/module.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isUndefined.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/uuid/v4.js","webpack://@sbx/json-rpc/./src/Errors/ConnectionError.js","webpack://@sbx/json-rpc/./src/Errors/ResultError.js","webpack://@sbx/json-rpc/./src/Actions/PagedAction.js","webpack://@sbx/json-rpc/./src/Actions/SignOperationAction.js","webpack://@sbx/json-rpc/./src/Types/NodeStatus.js","webpack://@sbx/json-rpc/./src/Types/NetProtocol.js","webpack://@sbx/json-rpc/./src/Types/NetStats.js","webpack://@sbx/json-rpc/./src/Types/NodeServer.js","webpack://@sbx/json-rpc/./src/Types/Operation.js","webpack://@sbx/json-rpc/./index.js","webpack://@sbx/json-rpc/./src/Client.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/bignumber.js/bignumber.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/jayson/lib/client/browser.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/extend.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/assignIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_copyObject.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_assignValue.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_getNative.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseIsNative.js","webpack://@sbx/json-rpc/(webpack)/buildin/global.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_getRawTag.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_objectToString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isMasked.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_coreJsData.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_toSource.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_getValue.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_createAssigner.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseRest.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_overRest.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_apply.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_setToString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseSetToString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/constant.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_shortOut.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isIterateeCall.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/keysIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_arrayLikeKeys.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseTimes.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isArguments.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseIsArguments.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isBuffer.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/stubFalse.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isTypedArray.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseIsTypedArray.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseUnary.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_nodeUtil.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_baseKeysIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_isPrototype.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/_nativeKeysIn.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/negate.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/uuid/lib/rng-browser.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/uuid/lib/bytesToUuid.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/jayson/lib/generateRequest.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/lodash/isString.js","webpack://@sbx/json-rpc//home/ben/Code/crypto/pascalcoin/untitled/node_modules/node-fetch/browser.js","webpack://@sbx/json-rpc/./src/Types/SignedMessage.js","webpack://@sbx/json-rpc/./src/Types/Connection.js","webpack://@sbx/json-rpc/./src/Actions/index.js","webpack://@sbx/json-rpc/./src/Errors/index.js","webpack://@sbx/json-rpc/./src/Types/index.js"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","P_INITIALIZATION_DATA","Abstract","constructor","initializationData","TypeError","__initializationData","type","baseGetTag","isObject","asyncTag","funcTag","genTag","proxyTag","tag","getRawTag","objectToString","nullTag","undefinedTag","symToStringTag","undefined","isArray","Array","P_PARAMS","P_METHOD","P_EXECUTOR","P_DESTINATION_TYPE","P_RETURNS_ARRAY","method","params","executor","DestinationType","returnsArray","destinationType","changeParam","[object Object]","execute","isValid","BigNumber","PublicKey","Types","Keys","Currency","AccountNumber","BC","P_BLOCK","P_ENC_PUBKEY","P_REWARD","P_FEE","P_VER","P_VER_A","P_TIMESTAMP","P_TARGET","P_NONCE","P_PAYLOAD","P_SBH","P_OPH","P_POW","P_HASHRATEKHS","P_MATURATION","P_OPERATIONS","data","super","parseInt","block","decode","fromHex","enc_pubkey","reward","fee","ver","ver_a","timestamp","target","toString","nonce","fromString","payload","sbh","oph","pow","hashratekhs","maturation","operations","publicKey","verA","createdAccounts","Curve","P_NAME","P_CAN_USE","P_B58_PUBKEY","P_EC_NID","P_X","P_Y","can_use","b58_pubkey","ec_nid","x","y","canUse","base58PublicKey","ecNid","AccountName","P_ACCOUNT","P_BALANCE","P_N_OPERATION","P_UPDATED_B","P_STATE","P_TYPE","P_LOCKED_UNTIL_BLOCK","P_PRICE","P_SELLER_ACCOUNT","P_PRIVATE_SALE","P_NEW_ENC_PUBKEY","Account","STATE_LISTED","STATE_NORMAL","account","balance","n_operation","updated_b","state","Error","locked_until_block","price","seller_account","private_sale","new_enc_pubkey","nOperation","updatedB","lockedUntilBlock","sellerAccount","privateSale","newPublicKey","isForSale","freeGlobal","freeSelf","Function","BaseAction","payload_method","withPayload","payloadMethod","password","pwd","withFee","P_AMOUNT","P_RAWOPERATIONS","amount","rawoperations","P_NEW_NAME","P_NEW_TYPE","P_ACCOUNT_PRICE","new_name","new_type","account_price","newName","newType","accountPrice","P_CALLER","OperationHash","KeyPair","Block","WalletPublicKey","transformRpcResult","from","caller","action","transformCallback","transform","Promise","resolve","reject","newParams","keys","forEach","field","item","indexOf","newField","replace","toHex","encode","length","isVague","toStringOpt","transformRpcParams","then","response","catch","error","map","v","jaysonBrowserClient","fetch","ConnectionError","ResultError","P_CLIENT","host","request","callback","body","headers","Content-Type","res","text","err","result","code","message","configurable","writable","getNative","func","e","global","other","isFunction","isLength","MAX_SAFE_INTEGER","reIsUint","test","webpackPolyfill","deprecate","paths","children","rng","bytesToUuid","options","buf","offset","rnds","random","ii","P_ORIGINAL","P_MESSAGE","originalFetchError","original","P_CODE","start","max","all","executeAllReport","push","reporter","RawOperations","OperationAction","last_n_operation","withLastNOperation","lastNOperation","withRawOperations","NetProtocol","NetStats","NodeServer","P_READY","P_READY_S","P_STATUS_S","P_PORT","P_LOCKED","P_BLOCKS","P_NODESERVERS","P_NETSTATS","P_VERSION","P_NETPROTOCOL","P_OPENSSL","ready","ready_s","status_s","port","locked","blocks","version","openssl","netprotocol","netstats","nodeservers","readyS","statusS","P_BRECEIVED","P_SERVERS_T","P_TSERVERS","P_TOTAL","P_BSEND","P_SERVERS","P_CLIENTS","P_ACTIVE","P_TCLIENTS","breceived","servers_t","tservers","total","bsend","servers","clients","active","tclients","serversT","P_LASTCON","P_ATTEMPTS","P_IP","lastcon","attempts","ip","Sender","Receiver","Changer","P_VALID","P_ERRORS","P_TIME","P_OPBLOCK","P_OPTYPE","P_OPTXT","P_OPHASH","P_OLD_OPHASH","P_SUBTYPE","P_SIGNER_ACCOUNT","P_CHANGERS","P_SENDERS","P_RECEIVERS","Operation","BLOCKCHAIN_REWARD","TRANSACTION","CHANGE_KEY","RECOVER_FUNDS","LIST_FOR_SALE","DELIST","BUY","CHANGE_KEY_ACCOUNT","CHANGE_ACCOUNT_INFO","MULTI_OPERATION","DATA","valid","errors","time","opblock","optype","optxt","ophash","old_ophash","subtype","signer_account","senders","receivers","changers","opType","opTxt","opHash","oldOpHash","signerAccount","isBlockchainReward","isTransaction","isChangeKey","isRecoverFunds","isListForSale","isDelist","isBuy","isChangeKeyAccount","isChangeAccountInfo","isMultiOperation","isData","isPending","isZeroFeeError","Client","Executor","Caller","Actions","Errors","RPCCaller","PagedAction","SignOperationAction","SignedMessage","NodeStatus","Connection","rpcHostAddress","addNode","nodes","join","Number","getAccount","findAccounts","onlyAccountsForSale","exact","minBalance","maxBalance","pubkey","only_accounts_for_sale","min_balance","max_balance","getWalletAccounts","getWalletAccountsCount","getWalletCoins","getWalletPubKeys","getWalletPubKey","inportPubKey","getBlock","getBlocks","last","end","getBlockCount","getBlockOperation","getBlockOperations","getAccountOperations","depth","startblock","getPendings","getPendingsCount","decodeOpHash","findOperation","findNOperation","findNOperations","nOperationMin","nOperationMax","n_operation_min","n_operation_max","sendTo","sender","signSendTo","senderPubkey","targetPubkey","sender_pubkey","target_pubkey","changeKey","newPubkey","accountSigner","new_pubkey","account_signer","changeKeys","accounts","acc","signChangeKey","oldPubkey","old_pubkey","listAccountForSale","accountTarget","account_target","signListAccountForSale","signerPubkey","signer_pubkey","DelistAccountForSale","signDelistAccountForSale","buyAccount","buyerAccount","accountToPurchase","buyer_account","account_to_purchase","signBuyAccount","changeAccountInfo","signChangeAccountInfo","signMessage","digest","verifySign","signature","operationsDelete","index","operationsInfo","executeOperations","nodeStatus","encodePubKey","decodePubKey","payloadEncrypt","payloadDecrypt","pwds","getConnections","addNewKey","lock","Boolean","unlock","setWalletPassword","stopNode","startNode","cleanBlackList","nodeIPStats","multiOperationAddOperation","autoNOperation","changesinfo","auto_n_operation","sen","rec","chng","multiOperationSignOffline","accountsAndKeys","accounts_and_keys","multiOperationSignOnline","__WEBPACK_AMD_DEFINE_RESULT__","globalObject","isNumeric","hasSymbol","iterator","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","a","z","j","charCodeAt","slice","compare","b","xc","yc","k","intCheck","min","String","isOdd","toExponential","str","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","P","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabet","caseChanged","isNum","_isBigNumber","search","substring","round","DEBUG","toUpperCase","toLowerCase","format","rm","id","c0","ne","maxOrMin","args","normalise","pop","sd","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","lt","minimum","gt","dp","rand","Uint32Array","copy","splice","sum","plus","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","for","extend","isUndefined","negate","uuid","generateRequest","ClientBrowser","callServer","defaults","reviver","replacer","generator","isBatch","isRaw","hasCallback","JSON","stringify","_parseResponse","responseText","parse","isError","filter","copyObject","createAssigner","keysIn","assignIn","source","assignValue","baseAssignValue","props","customizer","isNew","newValue","objValue","baseIsNative","getValue","isMasked","toSource","reIsHostCtor","funcProto","objectProto","funcToString","reIsNative","g","window","nativeObjectToString","isOwn","unmasked","uid","coreJsData","maskSrcKey","exec","IE_PROTO","baseRest","isIterateeCall","assigner","sources","guard","identity","overRest","setToString","apply","nativeMax","array","otherArgs","thisArg","baseSetToString","shortOut","constant","string","HOT_COUNT","HOT_SPAN","nativeNow","Date","now","count","lastCalled","stamp","remaining","isArrayLike","isIndex","arrayLikeKeys","baseKeysIn","baseTimes","isArguments","isBuffer","isTypedArray","inherited","isArr","isArg","isBuff","isType","skipIndexes","iteratee","baseIsArguments","isObjectLike","propertyIsEnumerable","argsTag","stubFalse","freeExports","nodeType","freeModule","Buffer","baseIsTypedArray","baseUnary","nodeUtil","nodeIsTypedArray","typedArrayTags","freeProcess","process","types","binding","isPrototype","nativeKeysIn","isProto","Ctor","FUNC_ERROR_TEXT","predicate","msCrypto","rnds8","Uint8Array","byteToHex","bth","isString","jsonrpc","stringTag","getGlobal","default","Headers","Request","Response","P_DIGEST","P_PUBKEY","P_SIGNATURE","fromBase58","P_RECV","P_TIMEDIFF","P_NETVER_A","P_SECS","P_SERVER","P_NETVER","P_SENT","P_APPVER","recv","timediff","netver_a","secs","server","netver","sent","appver","timeDiff","netVerA","netVer","appVer"],"mappings":"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","file":"@sbx/json-rpc.light.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@sbx/common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"@sbx/json-rpc\", [\"@sbx/common\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@sbx/json-rpc\"] = factory(require(\"@sbx/common\"));\n\telse\n\t\troot[\"@sbx/json-rpc\"] = factory(root[\"@sbx/common\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 40);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_INITIALIZATION_DATA = Symbol('__initialization_data');\n\n/**\n * Abstract class for RPC response objects.\n */\nclass Abstract {\n  /**\n     * Constructor.\n     *\n     * @param {Object} initializationData\n     */\n  constructor(initializationData) {\n    if (new.target === Abstract) {\n      throw new TypeError('Cannot construct Abstract instances directly');\n    }\n\n    this[P_INITIALIZATION_DATA] = initializationData;\n  }\n\n  /**\n     * Gets the initialization data. This should normally not be used at all but\n     * in case there are new fields which are not implemented in the library yet,\n     * the user will still have access to it.\n     *\n     * @returns {Object}\n     */\n  get __initializationData() {\n    return this[P_INITIALIZATION_DATA];\n  }\n}\n\nmodule.exports = Abstract;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_PARAMS = Symbol('params');\nconst P_METHOD = Symbol('method');\nconst P_EXECUTOR = Symbol('executor');\nconst P_DESTINATION_TYPE = Symbol('destination_type');\nconst P_RETURNS_ARRAY = Symbol('returns_array');\n\n/**\n * A basic action that holds the rpc method and its parameters.\n */\nclass BaseAction {\n  /**\n   * Constructor.\n   *\n   * @param {String} method\n   * @param {Object} params\n   * @param {Executor} executor\n   * @param {*} DestinationType\n   * @param {Boolean} returnsArray\n   */\n  constructor(method, params, executor, DestinationType, returnsArray) {\n    this[P_METHOD] = method;\n    this[P_PARAMS] = params;\n    this[P_EXECUTOR] = executor;\n    this[P_DESTINATION_TYPE] = DestinationType;\n    this[P_RETURNS_ARRAY] = returnsArray;\n  }\n\n  /**\n   * Gets the destination type.\n   *\n   * @returns {*}\n   */\n  get destinationType() {\n    return this[P_DESTINATION_TYPE];\n  }\n\n  /**\n   * Gets a value indicating whether the action returns an array.\n   *\n   * @returns {Boolean}\n   */\n  get returnsArray() {\n    return this[P_RETURNS_ARRAY];\n  }\n\n  /**\n     * Gets the params for the rpc call.\n     *\n   * @returns {Object}\n     */\n  get params() {\n    return this[P_PARAMS];\n  }\n\n  /**\n   * Changes a single param of the params object.\n   *\n   * @param {String} name\n   * @param {*} value\n   * @returns {BaseAction}\n   */\n  changeParam(name, value) {\n    this[P_PARAMS][name] = value;\n    return this;\n  }\n\n  /**\n     * Gets the method.\n     *\n     * @returns {*}\n     */\n  get method() {\n    return this[P_METHOD];\n  }\n\n  get destinationType() {\n    return this[P_DESTINATION_TYPE];\n  }\n\n  get returnsArray() {\n    return this[P_RETURNS_ARRAY];\n  }\n\n  /**\n     * Executes the current action and returns the raw result.\n     *\n     * @returns {Promise}\n     */\n  async execute() {\n    return this[P_EXECUTOR].execute(this);\n  }\n\n  /**\n     * Gets a flag indicating whether the current action is valid.\n     *\n     * @returns {boolean}\n     */\n  isValid() {\n    return true;\n  }\n}\n\nmodule.exports = BaseAction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BigNumber = require('bignumber.js');\nconst Abstract = require('./Abstract');\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@sbx/common').Types.Currency;\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst BC = require('@sbx/common').BC;\n\nconst P_BLOCK = Symbol('block');\nconst P_ENC_PUBKEY = Symbol('enc_pubkey');\nconst P_REWARD = Symbol('reward');\nconst P_FEE = Symbol('fee');\nconst P_VER = Symbol('ver');\nconst P_VER_A = Symbol('ver_a');\nconst P_TIMESTAMP = Symbol('timestamp');\nconst P_TARGET = Symbol('target');\nconst P_NONCE = Symbol('nonce');\nconst P_PAYLOAD = Symbol('payload');\nconst P_SBH = Symbol('sbh');\nconst P_OPH = Symbol('oph');\nconst P_POW = Symbol('pow');\nconst P_HASHRATEKHS = Symbol('hashratekhs');\nconst P_MATURATION = Symbol('maturation');\nconst P_OPERATIONS = Symbol('operations');\n\n/**\n * Represents a block.\n */\nclass Block extends Abstract {\n  /**\n   * Creates a new instance of the Block class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_BLOCK] = parseInt(data.block, 10);\n    this[P_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.enc_pubkey));\n    this[P_REWARD] = new Currency(data.reward);\n    this[P_FEE] = new Currency(data.fee);\n    this[P_VER] = parseInt(data.ver, 10);\n    this[P_VER_A] = parseInt(data.ver_a, 10);\n    this[P_TIMESTAMP] = parseInt(data.timestamp, 10);\n    this[P_TARGET] = new BigNumber(data.target.toString());\n    this[P_NONCE] = new BigNumber(data.nonce.toString());\n    this[P_PAYLOAD] = BC.fromString(data.payload);\n    this[P_SBH] = BC.fromHex(data.sbh);\n    this[P_OPH] = BC.fromHex(data.oph);\n    this[P_POW] = BC.fromHex(data.pow);\n    this[P_HASHRATEKHS] = new BigNumber(data.hashratekhs.toString());\n    this[P_MATURATION] = parseInt(data.maturation, 10);\n    this[P_OPERATIONS] = null;\n    if (data.operations !== undefined) {\n      this[P_OPERATIONS] = parseInt(data.operations, 10);\n    }\n  }\n\n  /**\n   * Gets the number of a block.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the public key of the miner of the block.\n   *\n   * @returns {PublicKey}\n   */\n  get publicKey() {\n    return this[P_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets the reward.\n   *\n   * @returns {Currency}\n   */\n  get reward() {\n    return this[P_REWARD];\n  }\n\n  /**\n   * Gets the collective fee awarded to the miner.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the version of the protocol.\n   *\n   * @returns {Number}\n   */\n  get ver() {\n    return this[P_VER];\n  }\n\n  /**\n   * Gets the protocol version of the miner.\n   *\n   * @returns {Number}\n   */\n  get verA() {\n    return this[P_VER_A];\n  }\n\n  /**\n   * Gets the UTC timestamp of the block.\n   *\n   * @returns {Number}\n   */\n  get timestamp() {\n    return this[P_TIMESTAMP];\n  }\n\n  /**\n   * Gets the used target.\n   *\n   * @returns {BigNumber}\n   */\n  get target() {\n    return this[P_TARGET];\n  }\n\n  /**\n   * Gets the calculated nonce.\n   *\n   * @returns {BigNumber}\n   */\n  get nonce() {\n    return this[P_NONCE];\n  }\n\n  /**\n   * Gets the payload of the miner.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the safebox hash.\n   *\n   * @returns {BC}\n   */\n  get sbh() {\n    return this[P_SBH];\n  }\n\n  /**\n   * Gets the operation hash.\n   *\n   * @returns {BC}\n   */\n  get oph() {\n    return this[P_OPH];\n  }\n\n  /**\n   * Gets the POW.\n   *\n   * @returns {BC}\n   */\n  get pow() {\n    return this[P_POW];\n  }\n\n  /**\n   * Gets the hashrate in kh/s.\n   *\n   * @returns {BigNumber}\n   */\n  get hashratekhs() {\n    return this[P_HASHRATEKHS];\n  }\n\n  /**\n   * Gets the age of the block in terms of blocks.\n   *\n   * @returns {Number}\n   */\n  get maturation() {\n    return this[P_MATURATION];\n  }\n\n  /**\n   * Gets the number of operations in the block.\n   *\n   * @returns {Number}\n   */\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  /**\n   * Gets the list of accounts created.\n   *\n   * @returns {AccountNumber[]}\n   */\n  get createdAccounts() {\n    return [\n      new AccountNumber(this[P_BLOCK] * 5),\n      new AccountNumber(this[P_BLOCK] * 5 + 1),\n      new AccountNumber(this[P_BLOCK] * 5 + 2),\n      new AccountNumber(this[P_BLOCK] * 5 + 3),\n      new AccountNumber(this[P_BLOCK] * 5 + 4)\n    ];\n  }\n}\n\nmodule.exports = Block;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst BC = require('@sbx/common').BC;\nconst Curve = require('@sbx/common').Types.Keys.Curve;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\n\nconst P_NAME = Symbol('block');\nconst P_ENC_PUBKEY = Symbol('publicKey');\nconst P_CAN_USE = Symbol('can_user');\nconst P_B58_PUBKEY = Symbol('b58_pubkey');\nconst P_EC_NID = Symbol('ec_nid');\nconst P_X = Symbol('x');\nconst P_Y = Symbol('y');\n\n/**\n * Holds information about a public key in the wallet (fetched via rpc).\n */\nclass WalletPublicKey extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n    this[P_NAME] = data.name;\n    this[P_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.publicKey));\n    this[P_CAN_USE] = !!data.can_use;\n\n    this[P_B58_PUBKEY] = null;\n    this[P_EC_NID] = null;\n    this[P_X] = null;\n    this[P_Y] = null;\n    if (data.b58_pubkey !== undefined) {\n      this[P_B58_PUBKEY] = data.b58_pubkey;\n    }\n    if (data.ec_nid !== undefined) {\n      this[P_EC_NID] = new Curve(parseInt(data.ec_nid, 10));\n    }\n    if (data.x !== undefined) {\n      this[P_X] = BC.fromHex(data.x);\n    }\n    if (data.y !== undefined) {\n      this[P_Y] = BC.fromHex(data.y);\n    }\n  }\n\n  /**\n     * Gets the name of the key.\n     *\n     * @returns {String}\n     */\n  get name() {\n    return this[P_NAME];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {BC}\n     */\n  get publicKey() {\n    return this[P_ENC_PUBKEY];\n  }\n\n  /**\n     * Gets a flag indicating whether the key can be used.\n     *\n     * @returns {Boolean}\n     */\n  get canUse() {\n    return this[P_CAN_USE];\n  }\n\n  /**\n     * Gets the base58 public key if returned by the node.\n     *\n     * @returns {String|null}\n     */\n  get base58PublicKey() {\n    return this[P_B58_PUBKEY];\n  }\n\n  /**\n     * Gets the used curve if returned by the node.\n     *\n     * @returns {Curve|null}\n     */\n  get ecNid() {\n    return this[P_EC_NID];\n  }\n\n  /**\n     * Gets the X value of the key if returned by the node.\n     *\n     * @returns {BC|null}\n     */\n  get x() {\n    return this[P_X];\n  }\n\n  /**\n     * Gets the Y value of the key if returned by the node.\n     *\n     * @returns {BC|null}\n     */\n  get y() {\n    return this[P_Y];\n  }\n}\n\nmodule.exports = WalletPublicKey;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst BC = require('@sbx/common').BC;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst Currency = require('@sbx/common').Types.Currency;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_ENC_PUBKEY = Symbol('enc_pubkey');\nconst P_BALANCE = Symbol('balance');\nconst P_N_OPERATION = Symbol('n_operation');\nconst P_UPDATED_B = Symbol('updated_b');\nconst P_STATE = Symbol('state');\nconst P_NAME = Symbol('name');\nconst P_TYPE = Symbol('type');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('locked_until_block');\nconst P_PRICE = Symbol('price');\nconst P_SELLER_ACCOUNT = Symbol('seller_account');\nconst P_PRIVATE_SALE = Symbol('private_sale');\nconst P_NEW_ENC_PUBKEY = Symbol('new_enc_pubkey');\n\n/**\n * Represents an account.\n */\nclass Account extends Abstract {\n  /**\n   * The state of an account when it is listed for sale.\n   *\n   * @returns {string}\n   */\n  static get STATE_LISTED() {\n    return 'listed';\n  }\n\n  /**\n   * The state of an account when it is not listed.\n   *\n   * @returns {string}\n   */\n  static get STATE_NORMAL() {\n    return 'normal';\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.enc_pubkey));\n    this[P_BALANCE] = new Currency(data.balance);\n    this[P_N_OPERATION] = parseInt(data.n_operation, 10);\n    this[P_UPDATED_B] = parseInt(data.updated_b, 10);\n\n    if (data.state !== Account.STATE_NORMAL && data.state !== Account.STATE_LISTED) {\n      throw new Error('Invalid account state.');\n    }\n\n    this[P_STATE] = data.state;\n    this[P_NAME] = new AccountName(data.name);\n    this[P_TYPE] = data.type;\n\n    this[P_LOCKED_UNTIL_BLOCK] = null;\n    if (data.locked_until_block !== undefined) {\n      this[P_LOCKED_UNTIL_BLOCK] = parseInt(data.locked_until_block, 10);\n    }\n\n    // when not listed\n    this[P_PRICE] = null;\n    this[P_SELLER_ACCOUNT] = null;\n    this[P_PRIVATE_SALE] = null;\n    this[P_NEW_ENC_PUBKEY] = null;\n\n    if (this[P_STATE] === Account.STATE_LISTED) {\n      this[P_PRICE] = new Currency(data.price);\n      this[P_SELLER_ACCOUNT] = new AccountNumber(data.seller_account);\n      this[P_PRIVATE_SALE] = data.private_sale;\n      if (data.new_enc_pubkey !== '000000000000' && data.new_enc_pubkey !== undefined) {\n        this[P_NEW_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.new_enc_pubkey));\n      }\n    }\n  }\n\n  /**\n   * Gets the account number of the account.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the public key of the account.\n   *\n   * @returns {PublicKey}\n   */\n  get publicKey() {\n    return this[P_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets the balance of the account.\n   *\n   * @returns {Currency}\n   */\n  get balance() {\n    return this[P_BALANCE];\n  }\n\n  /**\n   * Gets the number of operations of this account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the block number when the account was last updated.\n   *\n   * @returns {Number}\n   */\n  get updatedB() {\n    return this[P_UPDATED_B];\n  }\n\n  /**\n   * Gets the state of the account (normal, listed).\n   *\n   * @returns {String}\n   */\n  get state() {\n    return this[P_STATE];\n  }\n\n  /**\n   * Gets the name of the account.\n   *\n   * @returns {AccountName}\n   */\n  get name() {\n    return this[P_NAME];\n  }\n\n  /**\n   * Gets the type of the account.\n   *\n   * @returns {Number}\n   */\n  get type() {\n    return this[P_TYPE];\n  }\n\n  /**\n   * Gets the block number until the account is locked when it's listed for\n   * sale.\n   *\n   * @returns {Number|null}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Gets the price of the account in case its listed.\n   *\n   * @returns {Currency|null}\n   */\n  get price() {\n    return this[P_PRICE];\n  }\n\n  /**\n   * Gets the account of the seller in case the account is listed for sale.\n   *\n   * @returns {AccountNumber|null}\n   */\n  get sellerAccount() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  /**\n   * Gets a flag indicating whether the account is for sale. Attention:\n   * null and false = not for sale.\n   *\n   * @returns {boolean}\n   */\n  get privateSale() {\n    return !!this[P_PRIVATE_SALE];\n  }\n\n  /**\n   * Gets the new public key in case of a escrow.\n   *\n   * @returns {PublicKey|null}\n   */\n  get newPublicKey() {\n    return this[P_NEW_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets a value indicating whether the account is for sale.\n   *\n   * @returns {boolean}\n   */\n  isForSale() {\n    return this[P_STATE] === Account.STATE_LISTED;\n  }\n}\n\nmodule.exports = Account;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BaseAction = require('./BaseAction');\nconst Currency = require('@sbx/common').Types.Currency;\n\n/**\n * An object that holds infos about an operation action. It extends the\n * BaseAction functionality by methods which are useful for operations.\n */\nclass OperationAction extends BaseAction {\n  /**\n   * Constructor\n   *\n   * @param {String} method\n   * @param {Object} params\n   * @param {Executor} executor\n   * @param {*} DestinationType\n   * @param {Boolean} returnsArray\n   */\n  constructor(method, params, executor, DestinationType, returnsArray) {\n    super(method, params, executor, DestinationType, returnsArray);\n    this.params.fee = new Currency(0);\n    this.params.payload = '';\n    this.params.payload_method = 'none';\n  }\n\n  /**\n     * Sets the payload of the action.\n     *\n     * @param {String|BC} payload\n     * @param {String} payloadMethod\n     * @param {String} password\n     * @returns {OperationAction}\n     */\n  withPayload(payload, payloadMethod = 'none', password = null) {\n    this.params.payload = payload;\n    this.params.payload_method = payloadMethod;\n    if (password !== null) {\n      this.params.pwd = password;\n    }\n\n    return this;\n  }\n\n  /**\n     * Sets the fee.\n     *\n     * @param {Number|Currency} fee\n     * @returns {OperationAction}\n     */\n  withFee(fee) {\n    this.fee = new Currency(fee);\n    return this;\n  }\n\n  /**\n     * Gets a flag indicating whether the current action is valid.\n     *\n     * @returns {boolean}\n     */\n  isValid() {\n    return super.isValid();\n  }\n}\n\nmodule.exports = OperationAction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Currency = require('@sbx/common').Types.Currency;\nconst Abstract = require('./Abstract');\nconst BC = require('@sbx/common').BC;\n\nconst P_OPERATIONS = Symbol('operations');\nconst P_AMOUNT = Symbol('amount');\nconst P_FEE = Symbol('fee');\nconst P_RAWOPERATIONS = Symbol('rawoperations');\n\nclass RawOperations extends Abstract {\n  constructor(data) {\n    super(data);\n    this[P_OPERATIONS] = parseInt(data.operations, 10);\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_FEE] = new Currency(data.fee);\n    this[P_RAWOPERATIONS] = BC.fromHex(data.rawoperations);\n  }\n\n  /**\n     * Gets the number of operations in this object.\n     *\n     * @returns {Number}\n     */\n  get operations() {\n    return this[P_OPERATIONS];\n  }\n\n  /**\n     * Gets the accumulated amount of all operations.\n     *\n     * @returns {Currency}\n     */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n     * Gets the accumulated amount of all operations.\n     *\n     * @returns {Currency}\n     */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n     * Gets the raw operations info.\n     *\n     * @returns {BC}\n     */\n  get rawoperations() {\n    return this[P_RAWOPERATIONS];\n  }\n}\n\nmodule.exports = RawOperations;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst Currency = require('@sbx/common').Types.Currency;\nconst BC = require('@sbx/common').BC;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\nconst P_PAYLOAD = Symbol('payload');\nconst P_N_OPERATION = Symbol('nOperation');\n\n/**\n * Represents a sender in an operation.\n */\nclass Sender extends Abstract {\n  /**\n   * Creates a new instance of the Sender class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_N_OPERATION] = parseInt(data.n_operation, 10);\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_PAYLOAD] = BC.fromHex(data.payload);\n  }\n\n  /**\n   * Gets the n operation of thwe sender.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the account of the sender.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the amount.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n}\n\nmodule.exports = Sender;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst Currency = require('@sbx/common').Types.Currency;\nconst BC = require('@sbx/common').BC;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_AMOUNT = Symbol('amount');\nconst P_PAYLOAD = Symbol('payload');\n\n/**\n * Represents a receiver in an operation.\n */\nclass Receiver extends Abstract {\n  /**\n   * Creates a new instance of the Receiver class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_PAYLOAD] = BC.fromHex(data.payload);\n  }\n\n  /**\n   * Gets the account of the receiver.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the amount.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n}\n\nmodule.exports = Receiver;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst Currency = require('@sbx/common').Types.Currency;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst BC = require('@sbx/common').BC;\n\nconst P_ACCOUNT = Symbol('account');\nconst P_N_OPERATION = Symbol('nOperation');\nconst P_NEW_ENC_PUBKEY = Symbol('newPublicKey');\nconst P_NEW_NAME = Symbol('new_name');\nconst P_NEW_TYPE = Symbol('new_type');\nconst P_SELLER_ACCOUNT = Symbol('sellerAccount');\nconst P_ACCOUNT_PRICE = Symbol('account_price');\nconst P_LOCKED_UNTIL_BLOCK = Symbol('lockedUntilBlock');\nconst P_FEE = Symbol('fee');\n\n/**\n * Represents a Changer in an operation.\n */\nclass Changer extends Abstract {\n  /**\n   * Creates a new instance of the Changer class.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_ACCOUNT] = new AccountNumber(data.account);\n    this[P_N_OPERATION] = null;\n    if (data.n_operation !== undefined) {\n      this[P_N_OPERATION] = parseInt(data.n_operation, 10);\n    }\n\n    this[P_NEW_ENC_PUBKEY] = null;\n    if (data.new_enc_pubkey !== undefined) {\n      this[P_NEW_ENC_PUBKEY] = PublicKey.decode(BC.fromHex(data.new_enc_pubkey));\n    }\n\n    this[P_NEW_NAME] = null;\n    if (data.new_name !== undefined) {\n      this[P_NEW_NAME] = new AccountName(data.new_name);\n    }\n\n    this[P_NEW_TYPE] = null;\n    if (data.new_type !== undefined) {\n      this[P_NEW_TYPE] = data.new_type;\n    }\n\n    this[P_SELLER_ACCOUNT] = null;\n    if (data.seller_account !== undefined) {\n      this[P_SELLER_ACCOUNT] = new AccountNumber(data.seller_account);\n    }\n\n    this[P_ACCOUNT_PRICE] = null;\n    if (data.account_price !== undefined) {\n      this[P_ACCOUNT_PRICE] = new Currency(data.account_price);\n    }\n\n    this[P_LOCKED_UNTIL_BLOCK] = null;\n    if (data.locked_until_block !== undefined) {\n      this[P_LOCKED_UNTIL_BLOCK] = parseInt(data.locked_until_block, 10);\n    }\n\n    this[P_FEE] = new Currency(0);\n    if (data.fee !== undefined) {\n      this[P_FEE] = new Currency(data.fee);\n    }\n  }\n\n  /**\n   * Gets the changed account.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets the n op of the account.\n   *\n   * @returns {Number}\n   */\n  get nOperation() {\n    return this[P_N_OPERATION];\n  }\n\n  /**\n   * Gets the new public key.\n   *\n   * @returns {PublicKey|null}\n   */\n  get newPublicKey() {\n    return this[P_NEW_ENC_PUBKEY];\n  }\n\n  /**\n   * Gets the new name.\n   *\n   * @returns {String|null}\n   */\n  get newName() {\n    return this[P_NEW_NAME];\n  }\n\n  /**\n   * Gets the new type.\n   *\n   * @returns {Number|null}\n   */\n  get newType() {\n    return this[P_NEW_TYPE];\n  }\n\n  /**\n   * Gets the seller account.\n   *\n   * @returns {AccountNumber|null}\n   */\n  get sellerAccount() {\n    return this[P_SELLER_ACCOUNT];\n  }\n\n  /**\n   * Gets the sales price of the account.\n   *\n   * @returns {Currency|null}\n   */\n  get accountPrice() {\n    return this[P_ACCOUNT_PRICE];\n  }\n\n  /**\n   * Gets the block number until the account is blocked.\n   *\n   * @returns {Number|null}\n   */\n  get lockedUntilBlock() {\n    return this[P_LOCKED_UNTIL_BLOCK];\n  }\n\n  /**\n   * Gets the fee for the change operation.\n   *\n   * @returns {Currency|null}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n}\n\nmodule.exports = Changer;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst P_CALLER = Symbol('caller');\n\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst OperationHash = require('@sbx/common').Types.OperationHash;\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst KeyPair = require('@sbx/common').Types.Keys.KeyPair;\nconst Currency = require('@sbx/common').Types.Currency;\nconst BC = require('@sbx/common').BC;\n\nconst Block = require('./Types/Block');\nconst WalletPublicKey = require('./Types/WalletPublicKey');\nconst Account = require('./Types/Account');\n\n/**\n * Simple function that transforms the values of an object to make them usable\n * in rpc calls.\n *\n * @param {Object} params\n * @returns {Object}\n */\nfunction transformRpcParams(params) {\n  const newParams = {};\n\n  Object.keys(params).forEach((field) => {\n    const item = params[field];\n\n    // we weill delete fields that are null\n    if (item === null) {\n\n    } else if (field.indexOf('pubkey') !== -1) {\n      // correct the field name..\n      let newField = field.replace('pubkey', 'enc_pubkey');\n\n      // and set the value\n      if (item instanceof BC) {\n        newParams[newField] = item.toHex();\n      } else if (item instanceof PublicKey) {\n        newParams[newField] = item.encode().toHex();\n      } else if (item instanceof WalletPublicKey) {\n        newParams[newField] = item.publicKey.encode().toHex();\n      } else if (item instanceof KeyPair) {\n        newParams[newField] = item.publicKey.encode().toHex();\n      } else {\n        newField = newField.replace('enc_pubkey', 'b58_pubkey');\n        newParams[newField] = item.toString();\n      }\n    } else if (field === 'payload' && !(item instanceof BC)) {\n      newParams[field] = BC.fromString(item).toHex();\n    } else if (field === 'max' || field === 'start' || field === 'end' || field === 'depth') {\n      newParams[field] = parseInt(item, 10);\n    } else if ((field === 'fee' || field === 'amount' || field === 'price') &&\n        !(params[field] instanceof Currency)\n    ) {\n      newParams[field] = new Currency(item);\n      if (newParams[field].isVague()) {\n        throw new Error('Currency value has more that 4 decimals, you need ' +\n            'to round the value by yourself. We will not round automagically.');\n      } else {\n        newParams[field] = newParams[field].toStringOpt();\n      }\n    } else if (typeof item === 'boolean') {\n      newParams[field] = item;\n    } else if (item.constructor.name === 'Array') {\n      if (item.length > 0) {\n        newParams[field] = item;\n      }\n    } else if (item instanceof BC) {\n      newParams[field] = item.toHex();\n    } else if (item instanceof OperationHash) {\n      newParams[field] = item.encode().toHex();\n    } else if (item instanceof Account) {\n      newParams[field] = item.account.account; // NICE!!!!! :-D\n    } else if (item instanceof AccountNumber) {\n      newParams[field] = item.account;\n    } else if (item instanceof AccountName) {\n      newParams[field] = item.toString();\n    } else if (item instanceof Block) {\n      newParams[field] = item.block;\n    } else if (item instanceof Currency) {\n      if (item.isVague()) {\n        throw new Error('Currency value has more that 4 decimals, you need ' +\n            'to round the value by yourself. We will not round automagically.');\n      }\n      newParams[field] = item.toStringOpt();\n    } else if (typeof item === 'number') {\n      newParams[field] = item;\n    } else {\n      newParams[field] = item.toString();\n    }\n  });\n\n  return newParams;\n}\n\nfunction transformRpcResult(value, DestinationType) {\n  switch (DestinationType.name) {\n    case 'Boolean':\n      return !!value;\n    case 'String':\n      return value.toString();\n    case 'Object':\n      return value;\n    case 'BC':\n      return BC.from(value);\n    default:\n      return new DestinationType(value);\n  }\n};\n\n/**\n * This class will execute an rpc call and returns a promise.\n */\nclass Executor {\n  /**\n     * Constructor\n     *\n     * @param {Caller} caller\n     */\n  constructor(caller) {\n    this[P_CALLER] = caller;\n  }\n\n  /**\n   * Calls the given method with the given params and returns a promise that\n   * itself will transform the returned value and resolve the promise.\n   *\n   * @param {BaseAction} action\n   * @param {Function|null} transformCallback\n   * @returns {Promise<any>}\n   */\n  async execute(action, transformCallback = null) {\n    transformCallback = transformCallback || this.transform(action.destinationType, action.returnsArray);\n    return new Promise((resolve, reject) => {\n      this[P_CALLER].call(action.method, transformRpcParams(action.params))\n        .then((response) => {\n          resolve([response, transformCallback]);\n        })\n        .catch((error) => {\n          reject(error);\n        });\n    });\n  }\n\n  /**\n   * Transforms a raw response value to a special type.\n   *\n   * @param {*} DestinationType\n   * @param {Boolean} returnsArray\n   * @returns {*}\n   */\n  transform(DestinationType, returnsArray) {\n    if (returnsArray) {\n      return function (value) {\n        return value.map(v => transformRpcResult(v, DestinationType));\n      };\n    }\n\n    return function (value) {\n      return transformRpcResult(value, DestinationType);\n    };\n  }\n}\n\nmodule.exports = Executor;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst jaysonBrowserClient = require('jayson/lib/client/browser');\nconst fetch = require('node-fetch');\nconst ConnectionError = require('./Errors/ConnectionError');\nconst ResultError = require('./Errors/ResultError');\n\nconst P_CLIENT = Symbol('client');\n\n/**\n * A caller object that can call JSON-RPC methods.\n */\nclass Caller {\n  /**\n     * Creates a new caller instance.\n     *\n     * @param {String} host\n     */\n  constructor(host) {\n    this[P_CLIENT] = jaysonBrowserClient((request, callback) => {\n      const options = {\n        method: 'POST',\n        body: request,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n\n      return fetch(host, options)\n        .then(res => res.text())\n        .then((text) => {\n          callback(null, text);\n        })\n        .catch((err) => {\n          callback(err);\n        });\n    });\n  }\n\n  /**\n     * Calls the given method with the given params and returns a promise.\n     *\n     * @param {String}method\n     * @param {Object} params\n     * @returns {Promise<any>}\n     */\n  call(method, params) {\n    return new Promise((resolve, reject) => {\n      this[P_CLIENT].request(method, params, (err, error, result) => {\n        if (err !== null || error !== undefined || result === undefined) {\n          if (err !== null && err.constructor.name === 'FetchError') {\n            return reject(new ConnectionError(err));\n          }\n          return reject(new ResultError(error.code, error.message));\n        }\n        return resolve(result);\n      });\n    });\n  }\n}\n\nmodule.exports = Caller;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","const P_ORIGINAL = Symbol('original');\nconst P_MESSAGE = Symbol('message');\n\nclass ConnectionError {\n  constructor(originalFetchError) {\n    this[P_ORIGINAL] = originalFetchError;\n    this[P_MESSAGE] = originalFetchError.message;\n  }\n\n  get original() {\n    return this[P_ORIGINAL];\n  }\n  get message() {\n    return this[P_MESSAGE];\n  }\n}\n\nmodule.exports = ConnectionError;\n","const P_CODE = Symbol('code');\nconst P_MESSAGE = Symbol('message');\n\nclass ResultError {\n  constructor(code, message) {\n    this[P_CODE] = code;\n    this[P_MESSAGE] = message;\n  }\n\n  get code() {\n    return this[P_CODE];\n  }\n  get message() {\n    return this[P_MESSAGE];\n  }\n}\n\nmodule.exports = ResultError;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst BaseAction = require('./BaseAction');\n\n/**\n * Whenever a remote endpoint has paging possibilities, this action will be\n * returned.\n */\nclass PagedAction extends BaseAction {\n  /**\n   * Constructor.\n   *\n   * @param {String} method\n   * @param {Object} params\n   * @param {Executor} executor\n   * @param {*} DestinationType\n   * @param {Boolean} returnsArray\n   */\n  constructor(method, params, executor, DestinationType, returnsArray) {\n    super(method, params, executor, DestinationType, returnsArray);\n    this.changeParam('start', 0);\n    this.changeParam('max', 100);\n  }\n\n  set start(start) {\n    this.changeParam('start', start);\n    return this;\n  }\n\n  set max(max) {\n    this.changeParam('max', max);\n    return this;\n  }\n\n  /**\n   * Executes the current action and returns all results.\n   *\n   * @returns {Promise}\n   */\n  async executeAll() {\n    let all = [];\n    let transformCallback = null;\n\n    await this.executeAllReport(([data, transform]) => {\n      if (transformCallback === null) {\n        transformCallback = transform;\n      }\n      data.forEach(item => all.push(item));\n    });\n    return [all, transformCallback];\n  }\n\n  /**\n   * Executes the current action and reports the results of each step to the\n   * given reporter.\n   *\n   * @returns {Promise}\n   */\n  async executeAllReport(reporter) {\n    let result = [];\n\n    do {\n      result = await this.execute();\n      let c = reporter(result);\n\n      // being able to stop execution\n      if (c === false) {\n        return;\n      }\n      this.changeParam('start', this.params.start + this.params.max);\n    } while (result[0].length > 0 && result[0].length === this.params.max);\n  }\n\n  /**\n     * Gets a flag indicating whether the current action is valid.\n     *\n     * @returns {boolean}\n     */\n  isValid() {\n    return true;\n  }\n}\n\nmodule.exports = PagedAction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst RawOperations = require('../Types/RawOperations');\nconst OperationAction = require('./OperationAction');\n\n/**\n * This object derives from an operation action and extends the functionality\n * by methods shared by cold wallet signing operations.\n */\nclass SignOperationAction extends OperationAction {\n  /**\n   * Constructor.\n   *\n   * @param {String} method\n   * @param {Object} params\n   * @param {Executor} executor\n   * @param {*} DestinationType\n   * @param {Boolean} returnsArray\n   */\n  constructor(method, params, executor, DestinationType, returnsArray) {\n    super(method, params, executor, DestinationType, returnsArray);\n    this.params.last_n_operation = null;\n    this.params.rawoperations = null;\n  }\n\n  /**\n     * Sets the last n operation value.\n     *\n     * @param {Number} lastNOperation\n     * @return {SignOperationAction}\n     */\n  withLastNOperation(lastNOperation) {\n    this.params.last_n_operation = lastNOperation;\n    return this;\n  }\n\n  /**\n     * Sets the raw operations instance of a previous result.\n     *\n     * @param {RawOperations|BC|String} rawoperations\n     * @return {SignOperationAction}\n     */\n  withRawOperations(rawoperations) {\n    this.params.rawoperations = new RawOperations(rawoperations);\n  }\n\n  isValid() {\n    return super.isValid() && this.params.last_n_operation !== null;\n  }\n}\n\nmodule.exports = SignOperationAction;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst BC = require('@sbx/common').BC;\nconst NetProtocol = require('./NetProtocol');\nconst NetStats = require('./NetStats');\nconst NodeServer = require('./NodeServer');\n\nconst P_READY = Symbol('ready');\nconst P_READY_S = Symbol('ready_s');\nconst P_STATUS_S = Symbol('status_s');\nconst P_PORT = Symbol('port');\nconst P_LOCKED = Symbol('locked');\nconst P_TIMESTAMP = Symbol('timestamp');\nconst P_BLOCKS = Symbol('blocks');\nconst P_NODESERVERS = Symbol('nodeservers');\nconst P_NETSTATS = Symbol('netstats');\nconst P_VERSION = Symbol('version');\nconst P_NETPROTOCOL = Symbol('netprotocol');\nconst P_SBH = Symbol('sbh');\nconst P_POW = Symbol('pow');\nconst P_OPENSSL = Symbol('openssl');\n\nclass NodeStatus extends Abstract {\n  constructor(data) {\n    super(data);\n\n    this[P_READY] = !!data.ready;\n    this[P_READY_S] = data.ready_s;\n    this[P_STATUS_S] = data.status_s;\n    this[P_PORT] = parseInt(data.port, 10);\n    this[P_LOCKED] = !!data.locked;\n    this[P_TIMESTAMP] = parseInt(data.timestamp, 10);\n    this[P_BLOCKS] = parseInt(data.blocks, 10);\n    this[P_VERSION] = data.version;\n    this[P_SBH] = BC.fromHex(data.sbh);\n    this[P_POW] = BC.fromHex(data.pow);\n    this[P_OPENSSL] = BC.fromHex(data.openssl);\n    this[P_NETPROTOCOL] = new NetProtocol(data.netprotocol);\n    this[P_NETSTATS] = new NetStats(data.netstats);\n    this[P_NODESERVERS] = data.nodeservers.map(ns => new NodeServer(ns));\n  }\n\n  /**\n     * Gets a flag indicating whether the node is ready.\n     *\n     * @returns {Boolean}\n     */\n  get ready() {\n    return this[P_READY];\n  }\n\n  /**\n     * Gets a string explaining the ready status.\n     *\n     * @returns {String}\n     */\n  get readyS() {\n    return this[P_READY_S];\n  }\n\n  /**\n     * Gets a string defining the status of the node.\n     *\n     * @returns {String}\n     */\n  get statusS() {\n    return this[P_STATUS_S];\n  }\n\n  /**\n     * Gets the port of the node.\n     *\n     * @returns {Number}\n     */\n  get port() {\n    return this[P_PORT];\n  }\n\n  /**\n     * Gets a value indicating whether the wallet is locked.\n     *\n     * @returns {Boolean}\n     */\n  get locked() {\n    return this[P_LOCKED];\n  }\n\n  /**\n     * Gets the timestamp where the node runs.\n     *\n     * @returns {Number}\n     */\n  get timestamp() {\n    return this[P_TIMESTAMP];\n  }\n\n  /**\n     * Gets the number of known blocks.\n     *\n     * @returns {Number}\n     */\n  get blocks() {\n    return this[P_BLOCKS];\n  }\n\n  /**\n     * Gets the list of nodeservers.\n     *\n     * @returns {NodeServer[]}\n     */\n  get nodeservers() {\n    return this[P_NODESERVERS];\n  }\n\n  /**\n     * Gets the netstats\n     *\n     * @returns {NetStats}\n     */\n  get netstats() {\n    return this[P_NETSTATS];\n  }\n\n  /**\n     * Gets the node version info.\n     *\n     * @returns {Version}\n     */\n  get version() {\n    return this[P_VERSION];\n  }\n\n  /**\n     * Gets the info about the protocol versions.\n     *\n     * @returns {NetProtocol}\n     */\n  get netprotocol() {\n    return this[P_NETPROTOCOL];\n  }\n\n  /**\n     * Gets the last safebox hash.\n     *\n     * @returns {BC}\n     */\n  get sbh() {\n    return this[P_SBH];\n  }\n\n  /**\n     * Gets the last known POW.\n     *\n     * @returns {BC}\n     */\n  get pow() {\n    return this[P_POW];\n  }\n\n  /**\n     * Gets the openssl info.\n     *\n     * @returns {BC}\n     */\n  get openssl() {\n    return this[P_OPENSSL];\n  }\n}\n\nmodule.exports = NodeStatus;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst P_VER = Symbol('ver');\nconst P_VER_A = Symbol('verA');\n\n/**\n * Holds information about a nodes version.\n */\nclass NetProtocol extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n    this[P_VER] = parseInt(data.ver, 10);\n    this[P_VER_A] = parseInt(data.ver_a, 10);\n  }\n\n  /**\n     * Gets the wallets protocol version.\n     *\n     * @returns {Number}\n     */\n  get ver() {\n    return this[P_VER];\n  }\n\n  /**\n     * Gets the miners protocol version.\n     *\n     * @returns {Number}\n     */\n  get verA() {\n    return this[P_VER_A];\n  }\n}\n\nmodule.exports = NetProtocol;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst P_BRECEIVED = Symbol('breceived');\nconst P_SERVERS_T = Symbol('servers_t');\nconst P_TSERVERS = Symbol('tservers');\nconst P_TOTAL = Symbol('total');\nconst P_BSEND = Symbol('bsend');\nconst P_SERVERS = Symbol('servers');\nconst P_CLIENTS = Symbol('clients');\nconst P_ACTIVE = Symbol('active');\nconst P_TCLIENTS = Symbol('tclients');\n\n/**\n * Class that holds netstats of a node server.\n */\nclass NetStats extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n\n    this[P_BRECEIVED] = parseInt(data.breceived, 10);\n    this[P_SERVERS_T] = parseInt(data.servers_t, 10);\n    this[P_TSERVERS] = parseInt(data.tservers, 10);\n    this[P_TOTAL] = parseInt(data.total, 10);\n    this[P_BSEND] = parseInt(data.bsend, 10);\n    this[P_SERVERS] = parseInt(data.servers, 10);\n    this[P_CLIENTS] = parseInt(data.clients, 10);\n    this[P_ACTIVE] = parseInt(data.active, 10);\n    this[P_TCLIENTS] = parseInt(data.tclients, 10);\n  }\n\n  /**\n     * Gets the received bytes.\n     *\n     * @returns {Number}\n     */\n  get breceived() {\n    return this[P_BRECEIVED];\n  }\n\n  /**\n     * Gets the number of server connections\n     *\n     * @returns {Number}\n     */\n  get serversT() {\n    return this[P_SERVERS_T];\n  }\n\n  /**\n     * Gets the number of server connections.\n     *\n     * @returns {Number}\n     */\n  get tservers() {\n    return this[P_TSERVERS];\n  }\n\n  /**\n     * Gets the number of total connections.\n     *\n     * @returns {Number}\n     */\n  get total() {\n    return this[P_TOTAL];\n  }\n\n  /**\n     * Gets the number of bytes sent.\n     *\n     * @returns {Number}\n     */\n  get bsend() {\n    return this[P_BSEND];\n  }\n\n  /**\n     * Gets the number of servers that responded.\n     *\n     * @returns {Number}\n     */\n  get servers() {\n    return this[P_SERVERS];\n  }\n\n  /**\n     * Gets the number of client connections.\n     *\n     * @returns {Number}\n     */\n  get clients() {\n    return this[P_CLIENTS];\n  }\n\n  /**\n     * Gets the number of active connections.\n     *\n     * @returns {Number}\n     */\n  get active() {\n    return this[P_ACTIVE];\n  }\n\n  /**\n     * Gets the number of total client connections.\n     *\n     * @returns {Number}\n     */\n  get tclients() {\n    return this[P_TCLIENTS];\n  }\n}\n\nmodule.exports = NetStats;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst P_PORT = Symbol('port');\nconst P_LASTCON = Symbol('lastcon');\nconst P_ATTEMPTS = Symbol('attempts');\nconst P_IP = Symbol('ip');\n\n/**\n * Holds information about a single node server connection.\n */\nclass NodeServer extends Abstract {\n  /**\n     * Constructor\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n\n    this[P_PORT] = parseInt(data.port, 10);\n    this[P_LASTCON] = parseInt(data.lastcon, 10);\n    this[P_ATTEMPTS] = parseInt(data.attempts, 10);\n    this[P_IP] = data.ip;\n  }\n\n  /**\n     * Gets the port of the server.\n     *\n     * @returns {Number}\n     */\n  get port() {\n    return this[P_PORT];\n  }\n\n  /**\n     * Gets the timestamp of the last connection.\n     *\n     * @returns {Number}\n     */\n  get lastcon() {\n    return this[P_LASTCON];\n  }\n\n  /**\n     * Gets the number of connection attempts.\n     *\n     * @returns {Number}\n     */\n  get attempts() {\n    return this[P_ATTEMPTS];\n  }\n\n  /**\n     * Gets the IP of the node.\n     *\n     * @returns {String}\n     */\n  get ip() {\n    return this[P_IP];\n  }\n}\n\nmodule.exports = NodeServer;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst BC = require('@sbx/common').BC;\nconst Currency = require('@sbx/common').Types.Currency;\nconst OperationHash = require('@sbx/common').Types.OperationHash;\n\nconst Sender = require('./Sender');\nconst Receiver = require('./Receiver');\nconst Changer = require('./Changer');\n\nconst P_VALID = Symbol('valid');\nconst P_ERRORS = Symbol('errors');\nconst P_BLOCK = Symbol('block');\nconst P_TIME = Symbol('time');\nconst P_OPBLOCK = Symbol('opblock');\nconst P_PAYLOAD = Symbol('payload');\nconst P_MATURATION = Symbol('maturation');\nconst P_OPTYPE = Symbol('optype');\nconst P_ACCOUNT = Symbol('account');\nconst P_OPTXT = Symbol('optxt');\nconst P_AMOUNT = Symbol('amount');\nconst P_FEE = Symbol('fee');\nconst P_BALANCE = Symbol('balance');\nconst P_OPHASH = Symbol('ophash');\nconst P_OLD_OPHASH = Symbol('old_ophash');\nconst P_SUBTYPE = Symbol('subtype');\nconst P_SIGNER_ACCOUNT = Symbol('signer_account');\nconst P_CHANGERS = Symbol('changers');\nconst P_SENDERS = Symbol('senders');\nconst P_RECEIVERS = Symbol('receivers');\n\n/**\n * A class thats holds the information about an operation.\n */\nclass Operation extends Abstract {\n  // The available optypes\n  static get BLOCKCHAIN_REWARD() {\n    return 0;\n  }\n\n  static get TRANSACTION() {\n    return 1;\n  }\n\n  static get CHANGE_KEY() {\n    return 2;\n  }\n\n  static get RECOVER_FUNDS() {\n    return 3;\n  }\n\n  static get LIST_FOR_SALE() {\n    return 4;\n  }\n\n  static get DELIST() {\n    return 5;\n  }\n\n  static get BUY() {\n    return 6;\n  }\n\n  static get CHANGE_KEY_ACCOUNT() {\n    return 7;\n  }\n\n  static get CHANGE_ACCOUNT_INFO() {\n    return 8;\n  }\n\n  static get MULTI_OPERATION() {\n    return 9;\n  }\n\n  static get DATA() {\n    return 10;\n  }\n\n  /**\n   * Creates a new Operation instance from an rpc response.\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n\n    this[P_VALID] = true;\n    if (data.valid !== undefined) {\n      this[P_VALID] = !!data.valid;\n    }\n\n    this[P_ERRORS] = null;\n    if (data.errors !== undefined) {\n      this[P_ERRORS] = data.errors;\n    }\n\n    if (data.payload !== undefined) {\n      this[P_PAYLOAD] = BC.fromHex(data.payload);\n    } else {\n      this[P_PAYLOAD] = BC.fromHex('');\n    }\n\n    this[P_BLOCK] = parseInt(data.block, 10);\n    this[P_TIME] = parseInt(data.time, 10);\n    this[P_OPBLOCK] = parseInt(data.opblock, 10);\n    this[P_MATURATION] = 0;\n    // pending\n    if (data.maturation !== null) {\n      this[P_MATURATION] = parseInt(data.maturation, 10);\n    }\n\n    this[P_OPTYPE] = parseInt(data.optype, 10);\n    // multi-op\n    this[P_ACCOUNT] = null;\n    if (data.account !== undefined) {\n      this[P_ACCOUNT] = new AccountNumber(data.account);\n    }\n    this[P_OPTXT] = data.optxt;\n    this[P_AMOUNT] = new Currency(data.amount);\n    this[P_FEE] = new Currency(data.fee);\n    this[P_BALANCE] = null;\n    if (data.balance !== undefined) {\n      this[P_BALANCE] = new Currency(data.balance);\n    }\n\n    this[P_OPHASH] = null;\n    if (data.ophash !== undefined) {\n      this[P_OPHASH] = BC.fromHex(data.ophash);\n      if (this[P_OPTYPE] !== Operation.BLOCKCHAIN_REWARD) {\n        this[P_OPHASH] = OperationHash.decode(BC.fromHex(data.ophash));\n      }\n    }\n\n    this[P_OLD_OPHASH] = null;\n    if (data.old_ophash !== undefined) {\n      this[P_OLD_OPHASH] = BC.fromHex(data.old_ophash);\n    }\n\n    this[P_SUBTYPE] = data.subtype;\n    this[P_SIGNER_ACCOUNT] = null;\n    if (data.signer_account !== undefined) {\n      this[P_SIGNER_ACCOUNT] = new AccountNumber(data.signer_account);\n    }\n\n    // eslint-disable-next-line no-multi-assign\n    this[P_SENDERS] = [];\n    this[P_RECEIVERS] = [];\n    this[P_CHANGERS] = [];\n\n    // loop given data and initialize objects\n    data.senders.forEach(s => this[P_SENDERS].push(new Sender(s)));\n    data.receivers.forEach(r => this[P_RECEIVERS].push(new Receiver(r)));\n    data.changers.forEach(c => this[P_CHANGERS].push(new Changer(c)));\n  }\n\n  /**\n   * Gets an indicator whether the operation was valid.\n   *\n   * @returns {Boolean}\n   */\n  get valid() {\n    return this[P_VALID];\n  }\n\n  /**\n   * If the operation is invalid you'll get the error message.\n   *\n   * @returns {String|null}\n   */\n  get errors() {\n    return this[P_ERRORS];\n  }\n\n  /**\n   * Gets the block that is associated with the operation.\n   *\n   * @returns {Number}\n   */\n  get block() {\n    return this[P_BLOCK];\n  }\n\n  /**\n   * Gets the time of the operation.\n   *\n   * @returns {Number}\n   */\n  get time() {\n    return this[P_TIME];\n  }\n\n  /**\n   * Gets the position inside a block.\n   *\n   * @returns {Number}\n   */\n  get opblock() {\n    return this[P_OPBLOCK];\n  }\n\n  /**\n   * Gets the age in blocks of the operation.\n   *\n   * @returns {Number}\n   */\n  get maturation() {\n    return this[P_MATURATION];\n  }\n\n  /**\n   * Gets the type of the operation.\n   *\n   * @returns {Number}\n   */\n  get opType() {\n    return this[P_OPTYPE];\n  }\n\n  /**\n   * Gets the account.\n   *\n   * @returns {AccountNumber}\n   */\n  get account() {\n    return this[P_ACCOUNT];\n  }\n\n  /**\n   * Gets a textual representation of the operation.\n   *\n   * @returns {String}\n   */\n  get opTxt() {\n    return this[P_OPTXT];\n  }\n\n  /**\n   * Gets the amount.\n   *\n   * @returns {Currency}\n   */\n  get amount() {\n    return this[P_AMOUNT];\n  }\n\n  /**\n   * Gets the fee.\n   *\n   * @returns {Currency}\n   */\n  get fee() {\n    return this[P_FEE];\n  }\n\n  /**\n   * Gets the balance of the account.\n   *\n   * @returns {Number}\n   */\n  get balance() {\n    return this[P_BALANCE];\n  }\n\n  /**\n   * Gets the operation hash.\n   *\n   * @returns {OperationHash}\n   */\n  get opHash() {\n    return this[P_OPHASH];\n  }\n\n  /**\n   * Gets the <= V2 operation Hash.\n   *\n   * @returns {BC|null}\n   */\n  get oldOpHash() {\n    return this[P_OLD_OPHASH];\n  }\n\n  /**\n   * Gets the subtype.\n   *\n   * @returns {String}\n   */\n  get subtype() {\n    return this[P_SUBTYPE];\n  }\n\n  /**\n   * Gets the signer account number.\n   *\n   * @returns {AccountNumber|null}\n   */\n  get signerAccount() {\n    return this[P_SIGNER_ACCOUNT];\n  }\n\n  /**\n   * Gets the payload.\n   *\n   * @returns {BC}\n   */\n  get payload() {\n    return this[P_PAYLOAD];\n  }\n\n  /**\n   * Gets the list of changers.\n   *\n   * @returns {Changer[]}\n   */\n  get changers() {\n    return this[P_CHANGERS];\n  }\n\n  /**\n   * Gets the list of senders.\n   *\n   * @returns {Sender[]}\n   */\n  get senders() {\n    return this[P_SENDERS];\n  }\n\n  /**\n   * Gets the list of receivers.\n   *\n   * @returns {Receiver[]}\n   */\n  get receivers() {\n    return this[P_RECEIVERS];\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a BLOCKCHAIN_REWARD operation.\n   *\n   * @returns {boolean}\n   */\n  isBlockchainReward() {\n    return this[P_OPTYPE] === Operation.BLOCKCHAIN_REWARD;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a TRANSACTION operation.\n   *\n   * @returns {boolean}\n   */\n  isTransaction() {\n    return this[P_OPTYPE] === Operation.TRANSACTION;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a CHANGE_KEY operation.\n   *\n   * @returns {boolean}\n   */\n  isChangeKey() {\n    return this[P_OPTYPE] === Operation.CHANGE_KEY;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a RECOVER_FUNDS operation.\n   *\n   * @returns {boolean}\n   */\n  isRecoverFunds() {\n    return this[P_OPTYPE] === Operation.RECOVER_FUNDS;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a LIST_FOR_SALE operation.\n   *\n   * @returns {boolean}\n   */\n  isListForSale() {\n    return this[P_OPTYPE] === Operation.LIST_FOR_SALE;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a DELIST operation.\n   *\n   * @returns {boolean}\n   */\n  isDelist() {\n    return this[P_OPTYPE] === Operation.DELIST;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a BUY operation.\n   *\n   * @returns {boolean}\n   */\n  isBuy() {\n    return this[P_OPTYPE] === Operation.BUY;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a CHANGE_KEY_ACCOUNT operation.\n   *\n   * @returns {boolean}\n   */\n  isChangeKeyAccount() {\n    return this[P_OPTYPE] === Operation.CHANGE_KEY_ACCOUNT;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a CHANGE_ACCOUNT_INFO operation.\n   *\n   * @returns {boolean}\n   */\n  isChangeAccountInfo() {\n    return this[P_OPTYPE] === Operation.CHANGE_ACCOUNT_INFO;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a MULTI_OPERATION operation.\n   *\n   * @returns {boolean}\n   */\n  isMultiOperation() {\n    return this[P_OPTYPE] === Operation.MULTI_OPERATION;\n  }\n\n  /**\n   * Gets a value indicating whether the operation is a DATA operation.\n   *\n   * @returns {boolean}\n   */\n  isData() {\n    return this[P_OPTYPE] === Operation.DATA;\n  }\n\n  /**\n   * Gets a value indicating whether the op is pending.\n   *\n   * @returns {boolean}\n   */\n  isPending() {\n    return this[P_BLOCK] === 0;\n  }\n\n  /**\n   * Gets a value indicating whether the operation was not executed because of\n   * fees.\n   *\n   * @returns {boolean}\n   */\n  isZeroFeeError() {\n    return this.valid === false &&\n        this[P_ERRORS].indexOf('zero fee operations per block') > -1;\n  }\n}\n\nmodule.exports = Operation;\n","module.exports = {\n  Client: require('./src/Client'),\n  Executor: require('./src/Executor'),\n  Caller: require('./src/Caller'),\n  Actions: require('./src/Actions'),\n  Errors: require('./src/Errors'),\n  Types: require('./src/Types')\n};\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Executor = require('./Executor');\nconst RPCCaller = require('./Caller');\nconst BaseAction = require('./Actions/BaseAction');\nconst PagedAction = require('./Actions/PagedAction');\nconst OperationAction = require('./Actions/OperationAction');\nconst SignOperationAction = require('./Actions/SignOperationAction');\nconst Account = require('./Types/Account');\nconst Block = require('./Types/Block');\nconst SignedMessage = require('./Types/SignedMessage');\nconst RawOperations = require('./Types/RawOperations');\nconst NodeStatus = require('./Types/NodeStatus');\nconst Operation = require('./Types/Operation');\nconst Sender = require('./Types/Sender');\nconst Receiver = require('./Types/Receiver');\nconst Changer = require('./Types/Changer');\nconst Connection = require('./Types/Connection');\nconst WalletPublicKey = require('./Types/WalletPublicKey');\nconst AccountName = require('@sbx/common').Types.AccountName;\nconst AccountNumber = require('@sbx/common').Types.AccountNumber;\nconst OperationHash = require('@sbx/common').Types.OperationHash;\nconst Currency = require('@sbx/common').Types.Currency;\nconst BC = require('@sbx/common').BC;\n\nconst P_EXECUTOR = Symbol('executor');\n\n/**\n * A simple rpc client that will prepare an action that can be executed against\n * a node.\n */\nclass Client {\n\n  /**\n   * Returns a standard instance pointing to the given rpc host node.\n   *\n   * @param {String} rpcHostAddress\n   * @returns {Client}\n   */\n  static factory(rpcHostAddress) {\n    return new Client(\n      new Executor(\n        new RPCCaller(rpcHostAddress),\n      ),\n    );\n  }\n\n  /**\n   * Constructor\n   *\n   * @param {Executor} executor\n   */\n  constructor(executor) {\n    this[P_EXECUTOR] = executor;\n  }\n\n  /**\n   * Adds nodes the remote node should connect to.\n   *\n   * @param {String[]} nodes - The list of nodes (will be transformed to a semicolon separated list)\n   *\n   * @returns {BaseAction}\n   */\n  addNode({\n    nodes\n  }) {\n    return new BaseAction('addnode', {\n      nodes: nodes.join(';')\n    }, this[P_EXECUTOR], Number, false);\n  }\n\n  /**\n   * Gets an account with the given account number.\n   *\n   * @param {AccountNumber|Number|String} account\n   *\n   * @returns {BaseAction}\n   */\n  getAccount({\n    account\n  }) {\n    return new BaseAction('getaccount', {\n      account: new AccountNumber(account)\n    }, this[P_EXECUTOR], Account, false);\n  }\n\n  /**\n   * Searches for accounts.\n   *\n   * @param {AccountName|String|null} name\n   * @param {Number|null} type\n   * @param {Boolean|null} onlyAccountsForSale\n   * @param {Boolean|null} exact\n   * @param {Currency|null} minBalance\n   * @param {Currency|null} maxBalance\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} pubkey\n   *\n   * @returns {PagedAction}\n   */\n  findAccounts({\n    name = null,\n    type = null,\n    onlyAccountsForSale = null,\n    exact = null,\n    minBalance = null,\n    maxBalance = null,\n    pubkey = null\n  }) {\n    return new PagedAction('findaccounts', {\n      name: name !== null ? new AccountName(name) : name,\n      type: type !== null ? parseInt(type, 10) : type,\n      only_accounts_for_sale: onlyAccountsForSale,\n      exact,\n      min_balance: minBalance !== null ? new Currency(minBalance) : minBalance,\n      max_balance: maxBalance !== null ? new Currency(maxBalance) : maxBalance,\n      pubkey\n    }, this[P_EXECUTOR], Account, true);\n  }\n\n  /**\n   * Returns all accounts of a wallet with the given public key\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} pubkey\n   *\n   * @returns {PagedAction}\n   */\n  getWalletAccounts({\n    pubkey = null\n  }) {\n    return new PagedAction('getwalletaccounts', {\n      pubkey\n    }, this[P_EXECUTOR], Account, true);\n  }\n\n  /**\n   * Returns the number of accounts in a wallet\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} pubkey\n   *\n   * @returns {BaseAction}\n   */\n  getWalletAccountsCount({\n    pubkey = null\n  }) {\n    return new BaseAction('getwalletaccountscount', {\n      pubkey\n    }, this[P_EXECUTOR], Number, false);\n  }\n\n  /**\n   * Gets the accumulated balance of accounts in a wallet\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} pubkey\n   *\n   * @returns {BaseAction}\n   */\n  getWalletCoins({\n    pubkey = null\n  }) {\n    return new BaseAction('getwalletcoins', {\n      pubkey\n    }, this[P_EXECUTOR], Number, false);\n  }\n\n  /**\n   * Gets the list of public keys managed in a wallet\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} pubkey\n   *\n   * @returns {PagedAction}\n   */\n  getWalletPubKeys({\n    pubkey = null\n  }) {\n    return new PagedAction('getwalletpubkeys', {\n      pubkey\n    }, this[P_EXECUTOR], WalletPublicKey, true);\n  }\n\n  /**\n   * Gets the info of a public key in the wallet.\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} pubkey\n   *\n   * @returns {BaseAction}\n   */\n  getWalletPubKey({\n    pubkey\n  }) {\n    return new BaseAction('getwalletpubkey', {\n      pubkey\n    }, this[P_EXECUTOR], WalletPublicKey, true);\n  }\n\n  /**\n   * Imports a public key in the wallet.\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} pubkey\n   * @param {String|null} name\n   *\n   * @returns {BaseAction}\n   */\n  inportPubKey({\n    pubkey,\n    name = null\n  }) {\n    return new BaseAction('importpubkey', {\n      pubkey,\n      name\n    }, this[P_EXECUTOR], WalletPublicKey, false);\n  }\n\n  /**\n   * Gets the information of a block\n   *\n   * @param {Number} block\n   *\n   * @returns {BaseAction}\n   */\n  getBlock({\n    block\n  }) {\n    return new BaseAction('getblock', {\n      block: block !== null ? parseInt(block, 10) : block\n    }, this[P_EXECUTOR], Block, false);\n  }\n\n  /**\n   * Gets a list of blocks\n   *\n   * @param {Number|null} last\n   * @param {Number|null} start\n   * @param {Number|null} end\n   *\n   * @returns {BaseAction}\n   */\n  getBlocks({\n    last = null,\n    start = null,\n    end = null\n  }) {\n    return new BaseAction('getblocks', {\n      last: last !== null ? parseInt(last, 10) : last,\n      start: start !== null ? parseInt(start, 10) : start,\n      end: end !== null ? parseInt(end, 10) : end\n    }, this[P_EXECUTOR], Block, true);\n  }\n\n  /**\n   * Gets the list of all blocks.\n   *\n   * @returns {BaseAction}\n   */\n  getBlockCount() {\n    return new BaseAction('getblockcount', {}, this[P_EXECUTOR], Number, false);\n  }\n\n  /**\n   * Gets an operation in a block\n   *\n   * @param {Number} block\n   * @param {Number} opblock\n   *\n   * @returns {BaseAction}\n   */\n  getBlockOperation({\n    block,\n    opblock\n  }) {\n    return new BaseAction('getblockoperation', {\n      block: block !== null ? parseInt(block, 10) : block,\n      opblock: opblock !== null ? parseInt(opblock, 10) : opblock\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Get all operations in a block\n   *\n   * @param {Number} block\n   *\n   * @returns {PagedAction}\n   */\n  getBlockOperations({\n    block\n  }) {\n    return new PagedAction('getblockoperations', {\n      block: block !== null ? parseInt(block, 10) : block\n    }, this[P_EXECUTOR], Operation, true);\n  }\n\n  /**\n   * Get all operations of an account\n   *\n   * @param {AccountNumber|Number|String} account\n   * @param {Number|null} depth\n   * @param {Number|null} startblock\n   *\n   * @returns {PagedAction}\n   */\n  getAccountOperations({\n    account,\n    depth = null,\n    startblock = null\n  }) {\n    return new PagedAction('getaccountoperations', {\n      account: new AccountNumber(account),\n      depth: depth !== null ? parseInt(depth, 10) : depth,\n      startblock: startblock !== null ? parseInt(startblock, 10) : startblock\n    }, this[P_EXECUTOR], Operation, true);\n  }\n\n  /**\n   * Gets all pending operations\n   *\n   * @returns {PagedAction}\n   */\n  getPendings() {\n    return new PagedAction('getpendings', {}, this[P_EXECUTOR], Operation, true);\n  }\n\n  /**\n   * Gets the number of pending operations\n   *\n   * @returns {BaseAction}\n   */\n  getPendingsCount() {\n    return new BaseAction('getpendingscount', {}, this[P_EXECUTOR], Number, false);\n  }\n\n  /**\n   * Decodes the given operation hash\n   *\n   * @param {OperationHash} ophash\n   *\n   * @returns {BaseAction}\n   */\n  decodeOpHash({\n    ophash\n  }) {\n    return new BaseAction('decodeophash', {\n      ophash\n    }, this[P_EXECUTOR], OperationHash, false);\n  }\n\n  /**\n   * Searches for an operation\n   *\n   * @param {OperationHash|null} ophash\n   *\n   * @returns {BaseAction}\n   */\n  findOperation({\n    ophash = null\n  }) {\n    return new BaseAction('findoperation', {\n      ophash\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Search for an operation signed by account and with n_operation, start searching block (0=all)\n   *\n   * @param {AccountNumber|Number|String} account\n   * @param {Number} nOperation\n   * @param {Number|null} block\n   *\n   * @returns {BaseAction}\n   */\n  findNOperation({\n    account,\n    nOperation,\n    block = null\n  }) {\n    return new BaseAction('findnoperation', {\n      account: new AccountNumber(account),\n      n_operation: nOperation !== null ? parseInt(nOperation, 10) : nOperation,\n      block: block !== null ? parseInt(block, 10) : block\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Search for operations signed by account within an n_operation range, start searching block (0=all)\n   *\n   * @param {AccountNumber|Number|String} account\n   * @param {Number} nOperationMin\n   * @param {Number} nOperationMax\n   *\n   * @returns {PagedAction}\n   */\n  findNOperations({\n    account,\n    nOperationMin,\n    nOperationMax\n  }) {\n    return new PagedAction('findnoperations', {\n      account: new AccountNumber(account),\n      n_operation_min: nOperationMin !== null ? parseInt(nOperationMin, 10) : nOperationMin,\n      n_operation_max: nOperationMax !== null ? parseInt(nOperationMax, 10) : nOperationMax\n    }, this[P_EXECUTOR], Operation, true);\n  }\n\n  /**\n   * Executes a transaction operation\n   *\n   * @param {AccountNumber|Number|String} sender\n   * @param {AccountNumber|Number|String} target\n   * @param {Currency} amount\n   *\n   * @returns {OperationAction}\n   */\n  sendTo({\n    sender,\n    target,\n    amount\n  }) {\n    return new OperationAction('sendto', {\n      sender: new AccountNumber(sender),\n      target: new AccountNumber(target),\n      amount: new Currency(amount)\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Executes a transaction operation\n   *\n   * @param {AccountNumber|Number|String} sender\n   * @param {AccountNumber|Number|String} target\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} senderPubkey\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} targetPubkey\n   * @param {Currency} amount\n   *\n   * @returns {SignOperationAction}\n   */\n  signSendTo({\n    sender,\n    target,\n    senderPubkey,\n    targetPubkey,\n    amount\n  }) {\n    return new SignOperationAction('signsendto', {\n      sender: new AccountNumber(sender),\n      target: new AccountNumber(target),\n      sender_pubkey: senderPubkey,\n      target_pubkey: targetPubkey,\n      amount: new Currency(amount)\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Changes the key of an account\n   *\n   * @param {AccountNumber|Number|String} account\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} newPubkey\n   * @param {AccountNumber|Number|String|null} accountSigner\n   *\n   * @returns {OperationAction}\n   */\n  changeKey({\n    account,\n    newPubkey,\n    accountSigner = null\n  }) {\n    return new OperationAction('changekey', {\n      account: new AccountNumber(account),\n      new_pubkey: newPubkey,\n      account_signer: accountSigner !== null ? new AccountNumber(accountSigner) : accountSigner\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Changes the key of multiple accounts\n   *\n   * @param {AccountNumber[]|Number[]|String[]} accounts\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} newPubkey\n   *\n   * @returns {OperationAction}\n   */\n  changeKeys({\n    accounts,\n    newPubkey\n  }) {\n    return new OperationAction('changekeys', {\n      accounts: accounts.map((acc) => new AccountNumber(acc)),\n      new_pubkey: newPubkey\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Signs a change key operation\n   *\n   * @param {AccountNumber|Number|String} account\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} oldPubkey\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} newPubkey\n   * @param {AccountNumber|Number|String|null} accountSigner\n   *\n   * @returns {SignOperationAction}\n   */\n  signChangeKey({\n    account,\n    oldPubkey,\n    newPubkey,\n    accountSigner = null\n  }) {\n    return new SignOperationAction('signchangekey', {\n      account: new AccountNumber(account),\n      old_pubkey: oldPubkey,\n      new_pubkey: newPubkey,\n      account_signer: accountSigner !== null ? new AccountNumber(accountSigner) : accountSigner\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Lists an account for sale\n   *\n   * @param {AccountNumber|Number|String} accountSigner\n   * @param {AccountNumber|Number|String} accountTarget\n   * @param {AccountNumber|Number|String} sellerAccount\n   * @param {Number} lockedUntilBlock\n   * @param {Currency} price\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} newPubkey\n   *\n   * @returns {OperationAction}\n   */\n  listAccountForSale({\n    accountSigner,\n    accountTarget,\n    sellerAccount,\n    lockedUntilBlock,\n    price,\n    newPubkey = null\n  }) {\n    return new OperationAction('listaccountforsale', {\n      account_signer: new AccountNumber(accountSigner),\n      account_target: new AccountNumber(accountTarget),\n      seller_account: new AccountNumber(sellerAccount),\n      locked_until_block: lockedUntilBlock !== null ? parseInt(lockedUntilBlock, 10) : lockedUntilBlock,\n      price: new Currency(price),\n      new_pubkey: newPubkey\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Signs a list operation\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} signerPubkey\n   * @param {AccountNumber|Number|String} accountSigner\n   * @param {AccountNumber|Number|String} accountTarget\n   * @param {AccountNumber|Number|String} sellerAccount\n   * @param {Number} lockedUntilBlock\n   * @param {Currency} price\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} newPubkey\n   *\n   * @returns {SignOperationAction}\n   */\n  signListAccountForSale({\n    signerPubkey,\n    accountSigner,\n    accountTarget,\n    sellerAccount,\n    lockedUntilBlock,\n    price,\n    newPubkey = null\n  }) {\n    return new SignOperationAction('signlistaccountforsale', {\n      signer_pubkey: signerPubkey,\n      account_signer: new AccountNumber(accountSigner),\n      account_target: new AccountNumber(accountTarget),\n      seller_account: new AccountNumber(sellerAccount),\n      locked_until_block: lockedUntilBlock !== null ? parseInt(lockedUntilBlock, 10) : lockedUntilBlock,\n      price: new Currency(price),\n      new_pubkey: newPubkey\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Delists an account\n   *\n   * @param {AccountNumber|Number|String} accountSigner\n   * @param {AccountNumber|Number|String} accountTarget\n   *\n   * @returns {OperationAction}\n   */\n  DelistAccountForSale({\n    accountSigner,\n    accountTarget\n  }) {\n    return new OperationAction('delistaccountforsale', {\n      account_signer: new AccountNumber(accountSigner),\n      account_target: new AccountNumber(accountTarget)\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Signs a delist operation\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} signerPubkey\n   * @param {AccountNumber|Number|String} accountSigner\n   * @param {AccountNumber|Number|String} accountTarget\n   *\n   * @returns {SignOperationAction}\n   */\n  signDelistAccountForSale({\n    signerPubkey,\n    accountSigner,\n    accountTarget\n  }) {\n    return new SignOperationAction('signdelistaccountforsale', {\n      signer_pubkey: signerPubkey,\n      account_signer: new AccountNumber(accountSigner),\n      account_target: new AccountNumber(accountTarget)\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Buys an account\n   *\n   * @param {AccountNumber|Number|String} buyerAccount\n   * @param {AccountNumber|Number|String} accountToPurchase\n   * @param {Currency|null} price\n   * @param {AccountNumber|Number|String|null} sellerAccount\n   *\n   * @returns {OperationAction}\n   */\n  buyAccount({\n    buyerAccount,\n    accountToPurchase,\n    price = null,\n    sellerAccount = null\n  }) {\n    return new OperationAction('buyaccount', {\n      buyer_account: new AccountNumber(buyerAccount),\n      account_to_purchase: new AccountNumber(accountToPurchase),\n      price: price !== null ? new Currency(price) : price,\n      seller_account: sellerAccount !== null ? new AccountNumber(sellerAccount) : sellerAccount\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Signs a buy account operation\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} signerPubkey\n   * @param {AccountNumber|Number|String} buyerAccount\n   * @param {AccountNumber|Number|String} accountToPurchase\n   * @param {Currency} price\n   * @param {AccountNumber|Number|String} sellerAccount\n   *\n   * @returns {SignOperationAction}\n   */\n  signBuyAccount({\n    signerPubkey,\n    buyerAccount,\n    accountToPurchase,\n    price,\n    sellerAccount\n  }) {\n    return new SignOperationAction('signbuyaccount', {\n      signer_pubkey: signerPubkey,\n      buyer_account: new AccountNumber(buyerAccount),\n      account_to_purchase: new AccountNumber(accountToPurchase),\n      price: new Currency(price),\n      seller_account: new AccountNumber(sellerAccount)\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Changes account infos\n   *\n   * @param {AccountNumber|Number|String} accountSigner\n   * @param {AccountNumber|Number|String} accountTarget\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} newPubkey\n   * @param {AccountName|String|null} newName\n   * @param {Number|null} newType\n   *\n   * @returns {OperationAction}\n   */\n  changeAccountInfo({\n    accountSigner,\n    accountTarget,\n    newPubkey = null,\n    newName = null,\n    newType = null\n  }) {\n    return new OperationAction('changeaccountinfo', {\n      account_signer: new AccountNumber(accountSigner),\n      account_target: new AccountNumber(accountTarget),\n      new_pubkey: newPubkey,\n      new_name: newName !== null ? new AccountName(newName) : newName,\n      new_type: newType !== null ? parseInt(newType, 10) : newType\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Signs a change account info operation\n   *\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} signerPubkey\n   * @param {AccountNumber|Number|String} accountSigner\n   * @param {AccountNumber|Number|String} accountTarget\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair|null} newPubkey\n   * @param {AccountName|String|null} newName\n   * @param {Number|null} newType\n   *\n   * @returns {SignOperationAction}\n   */\n  signChangeAccountInfo({\n    signerPubkey,\n    accountSigner,\n    accountTarget,\n    newPubkey = null,\n    newName = null,\n    newType = null\n  }) {\n    return new SignOperationAction('signchangeaccountinfo', {\n      signer_pubkey: signerPubkey,\n      account_signer: new AccountNumber(accountSigner),\n      account_target: new AccountNumber(accountTarget),\n      new_pubkey: newPubkey,\n      new_name: newName !== null ? new AccountName(newName) : newName,\n      new_type: newType !== null ? parseInt(newType, 10) : newType\n    }, this[P_EXECUTOR], Operation, false);\n  }\n\n  /**\n   * Signs a message using the given public key\n   *\n   * @param {BC} digest\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} pubkey\n   *\n   * @returns {BaseAction}\n   */\n  signMessage({\n    digest,\n    pubkey\n  }) {\n    return new BaseAction('signmessage', {\n      digest,\n      pubkey\n    }, this[P_EXECUTOR], SignedMessage, false);\n  }\n\n  /**\n   * Verifies a signature\n   *\n   * @param {BC} signature\n   * @param {BC} digest\n   * @param {String|BC|PublicKey|WalletPublicKey|PrivateKey|KeyPair} pubkey\n   *\n   * @returns {BaseAction}\n   */\n  verifySign({\n    signature,\n    digest,\n    pubkey\n  }) {\n    return new BaseAction('verifysign', {\n      signature,\n      digest,\n      pubkey\n    }, this[P_EXECUTOR], SignedMessage, false);\n  }\n\n  /**\n   * Removes an operation from the given rawoperations.\n   *\n   * @param {RawOperations} rawoperations\n   * @param {Number} index\n   *\n   * @returns {BaseAction}\n   */\n  operationsDelete({\n    rawoperations,\n    index\n  }) {\n    return new BaseAction('operationsdelete', {\n      rawoperations,\n      index: index !== null ? parseInt(index, 10) : index\n    }, this[P_EXECUTOR], RawOperations, false);\n  }\n\n  /**\n   * Gets the information about the given operation\n   *\n   * @param {RawOperations} rawoperations\n   *\n   * @returns {BaseAction}\n   */\n  operationsInfo({\n    rawoperations\n  }) {\n    return new BaseAction('operationsinfo', {\n      rawoperations\n    }, this[P_EXECUTOR], Operation, true);\n  }\n\n  /**\n   * Executes the given operations\n   *\n   * @param {RawOperations} rawoperations\n   *\n   * @returns {BaseAction}\n   */\n  executeOperations({\n    rawoperations\n  }) {\n    return new BaseAction('executeoperations', {\n      rawoperations\n    }, this[P_EXECUTOR], Operation, true);\n  }\n\n  /**\n   * Returns the current node status\n   *\n   * @returns {BaseAction}\n   */\n  nodeStatus() {\n    return new BaseAction('nodestatus', {}, this[P_EXECUTOR], NodeStatus, false);\n  }\n\n  /**\n   * Encodes a public key to a pascalcoin public key\n   *\n   * @param {BC} x\n   * @param {BC} y\n   * @param {Number} ecNid\n   *\n   * @returns {BaseAction}\n   */\n  encodePubKey({\n    x,\n    y,\n    ecNid\n  }) {\n    return new BaseAction('encodepubkey', {\n      x,\n      y,\n      ec_nid: ecNid !== null ? parseInt(ecNid, 10) : ecNid\n    }, this[P_EXECUTOR], BC, false);\n  }\n\n  /**\n   * Decodes an encoded public key.\n   *\n   * @param {BC} pubkey\n   *\n   * @returns {BaseAction}\n   */\n  decodePubKey({\n    pubkey\n  }) {\n    return new BaseAction('decodepubkey', {\n      pubkey\n    }, this[P_EXECUTOR], Object, false);\n  }\n\n  /**\n   * Encrypts a payload\n   *\n   * @param {BC} payload\n   * @param {String} payloadMethod\n   * @param {String|null} pwd\n   *\n   * @returns {BaseAction}\n   */\n  payloadEncrypt({\n    payload,\n    payloadMethod,\n    pwd = null\n  }) {\n    return new BaseAction('payloadencrypt', {\n      payload,\n      payload_method: payloadMethod,\n      pwd\n    }, this[P_EXECUTOR], BC, false);\n  }\n\n  /**\n   * Decrypts a payload\n   *\n   * @param {BC} payload\n   * @param {String[]} pwds\n   *\n   * @returns {BaseAction}\n   */\n  payloadDecrypt({\n    payload,\n    pwds\n  }) {\n    return new BaseAction('payloaddecrypt', {\n      payload,\n      pwds\n    }, this[P_EXECUTOR], BC, false);\n  }\n\n  /**\n   * Gets the connections of a node.\n   *\n   * @returns {BaseAction}\n   */\n  getConnections() {\n    return new BaseAction('getconnections', {}, this[P_EXECUTOR], Connection, true);\n  }\n\n  /**\n   * Generates a new key and adds it to the nodes wallet.\n   *\n   * @param {Number} ecNid\n   * @param {String} name\n   *\n   * @returns {BaseAction}\n   */\n  addNewKey({\n    ecNid,\n    name\n  }) {\n    return new BaseAction('addnewkey', {\n      ec_nid: ecNid !== null ? parseInt(ecNid, 10) : ecNid,\n      name\n    }, this[P_EXECUTOR], WalletPublicKey, false);\n  }\n\n  /**\n   * Locks the wallet.\n   *\n   * @returns {BaseAction}\n   */\n  lock() {\n    return new BaseAction('lock', {}, this[P_EXECUTOR], Boolean, false);\n  }\n\n  /**\n   * Unlocks the wallet.\n   *\n   * @param {String} pwd\n   *\n   * @returns {BaseAction}\n   */\n  unlock({\n    pwd\n  }) {\n    return new BaseAction('unlock', {\n      pwd\n    }, this[P_EXECUTOR], Boolean, false);\n  }\n\n  /**\n   * Sets the wallet password.\n   *\n   * @param {String} pwd\n   *\n   * @returns {BaseAction}\n   */\n  setWalletPassword({\n    pwd\n  }) {\n    return new BaseAction('setwalletpassword', {\n      pwd\n    }, this[P_EXECUTOR], Boolean, false);\n  }\n\n  /**\n   * Stops the node.\n   *\n   * @returns {BaseAction}\n   */\n  stopNode() {\n    return new BaseAction('stopnode', {}, this[P_EXECUTOR], Boolean, false);\n  }\n\n  /**\n   * Starts the node.\n   *\n   * @returns {BaseAction}\n   */\n  startNode() {\n    return new BaseAction('startnode', {}, this[P_EXECUTOR], Boolean, false);\n  }\n\n  /**\n   * Cleans the BlackList.\n   *\n   * @returns {BaseAction}\n   */\n  cleanBlackList() {\n    return new BaseAction('cleanblacklist', {}, this[P_EXECUTOR], Number, false);\n  }\n\n  /**\n   * Gets IP stats\n   *\n   * @returns {BaseAction}\n   */\n  nodeIPStats() {\n    return new BaseAction('node_ip_stats', {}, this[P_EXECUTOR], Object, true);\n  }\n\n  /**\n   * Adds an operation to a multioperation\n   *\n   * @param {RawOperations} rawoperations\n   * @param {Boolean} autoNOperation\n   * @param {Object[]|Sender[]} senders\n   * @param {Object[]|Receiver[]} receivers\n   * @param {Object[]|Changer[]} changesinfo\n   *\n   * @returns {BaseAction}\n   */\n  multiOperationAddOperation({\n    rawoperations,\n    autoNOperation,\n    senders,\n    receivers,\n    changesinfo\n  }) {\n    return new BaseAction('multioperationaddoperation', {\n      rawoperations,\n      auto_n_operation: autoNOperation,\n      senders: senders.map((sen) => new Sender(sen)),\n      receivers: receivers.map((rec) => new Receiver(rec)),\n      changesinfo: changesinfo.map((chng) => new Changer(chng))\n    }, this[P_EXECUTOR], RawOperations, true);\n  }\n\n  /**\n   * Signs the given rawoperations\n   *\n   * @param {RawOperations} rawoperations\n   * @param {Object} accountsAndKeys\n   *\n   * @returns {BaseAction}\n   */\n  multiOperationSignOffline({\n    rawoperations,\n    accountsAndKeys\n  }) {\n    return new BaseAction('multioperationsignoffline', {\n      rawoperations,\n      accounts_and_keys: accountsAndKeys\n    }, this[P_EXECUTOR], Operation, true);\n  }\n\n  /**\n   * Signs the given rawoperations online\n   *\n   * @param {RawOperations} rawoperations\n   *\n   * @returns {BaseAction}\n   */\n  multiOperationSignOnline({\n    rawoperations\n  }) {\n    return new BaseAction('multioperationsignonline', {\n      rawoperations\n    }, this[P_EXECUTOR], Operation, true);\n  }\n\n}\n\nmodule.exports = Client;\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","'use strict';\n\nvar extend = require('lodash/extend');\nvar isArray = require('lodash/isArray');\nvar isFunction = require('lodash/isFunction');\nvar isObject = require('lodash/isObject');\nvar isUndefined = require('lodash/isUndefined');\nvar negate = require('lodash/negate');\nvar uuid = require('uuid/v4');\nvar generateRequest = require('../generateRequest');\n\n/**\n *  Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n *  @class ClientBrowser\n *  @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n *  @param {Object} [options]\n *  @param {Function} [options.reviver] Reviver function for JSON\n *  @param {Function} [options.replacer] Replacer function for JSON\n *  @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n *  @param {Function} [options.generator] Function to use for generating request IDs\n *  @return {ClientBrowser}\n */\nvar ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  var defaults = {\n    reviver: null,\n    replacer: null,\n    generator: function() { return uuid(); },\n    version: 2\n  };\n\n  this.options = extend(defaults, options || {});\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  var self = this;\n  var request = null;\n\n  // is this a batch request?\n  var isBatch = isArray(method) && isFunction(params);\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  var isRaw = !isBatch && method && isObject(method) && isFunction(params);\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(isFunction(id)) {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    var hasCallback = isFunction(callback);\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  var message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  var response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      var isError = function(res) { return !isUndefined(res.error); };\n\n      return callback(null, response.filter(isError), response.filter(negate(isError)));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","module.exports = require('./assignIn');\n","var copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    keysIn = require('./keysIn');\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nmodule.exports = assignIn;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n","var identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","var eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","'use strict';\n\nvar isString = require('lodash/isString');\nvar isUndefined = require('lodash/isUndefined');\nvar isObject = require('lodash/isObject');\nvar isArray = require('lodash/isArray');\nvar isFunction = require('lodash/isFunction');\nvar uuid = require('uuid/v4');\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n */\nmodule.exports = function(method, params, id, options) {\n  if(!isString(method)) {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  var request = {\n    method: method\n  };\n\n  // assume that we are doing a 2.0 request unless specified differently\n  if(isUndefined(options.version) || options.version !== 1) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n\n    // params given, but invalid?\n    if(!isObject(params) && !isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n\n    request.params = params;\n\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    var generator = isFunction(options.generator) ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nexports.default = global.fetch.bind(global);\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\nconst PublicKey = require('@sbx/common').Types.Keys.PublicKey;\nconst BC = require('@sbx/common').BC;\n\nconst P_DIGEST = Symbol('digest');\nconst P_PUBKEY = Symbol('public_key');\nconst P_SIGNATURE = Symbol('signature');\n\n/**\n * Represents a sender in an operation.\n */\nclass SignedMessage extends Abstract {\n  /**\n     * Creates a new instance of the Sender class.\n     *\n     * @param {Object} data\n     */\n  constructor(data) {\n    super(data);\n\n    this[P_DIGEST] = BC.fromHex(data.digest);\n    if (data.enc_pubkey !== undefined) {\n      this[P_PUBKEY] = PublicKey.decode(BC.fromHex(data.enc_pubkey));\n    } else {\n      this[P_PUBKEY] = PublicKey.fromBase58(data.b58_pubkey);\n    }\n    this[P_SIGNATURE] = BC.fromHex(data.signature);\n  }\n\n  /**\n     * Gets the digest.\n     *\n     * @returns {BC}\n     */\n  get digest() {\n    return this[P_DIGEST];\n  }\n\n  /**\n     * Gets the public key.\n     *\n     * @returns {PublicKey}\n     */\n  get publicKey() {\n    return this[P_PUBKEY];\n  }\n\n  /**\n     * Gets the signature.\n     *\n     * @returns {BC}\n     */\n  get amount() {\n    return this[P_SIGNATURE];\n  }\n}\n\nmodule.exports = SignedMessage;\n","/**\n * Copyright (c) Benjamin Ansbach - all rights reserved.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nconst Abstract = require('./Abstract');\n\nconst P_RECV = Symbol('recv');\nconst P_TIMEDIFF = Symbol('timediff');\nconst P_NETVER_A = Symbol('nerver_a');\nconst P_SECS = Symbol('secs');\nconst P_SERVER = Symbol('server');\nconst P_IP = Symbol('ip');\nconst P_NETVER = Symbol('netver');\nconst P_SENT = Symbol('sent');\nconst P_APPVER = Symbol('appver');\nconst P_PORT = Symbol('port');\n\n/**\n * Holds information about a node connection.\n */\nclass Connection extends Abstract {\n  /**\n   * Constructor\n   *\n   * @param {Object} data\n   */\n  constructor(data) {\n    super(data);\n    this[P_RECV] = parseInt(data.recv, 10);\n    this[P_TIMEDIFF] = parseInt(data.timediff, 10);\n    this[P_NETVER_A] = parseInt(data.netver_a, 10);\n    this[P_SECS] = parseInt(data.secs, 10);\n    this[P_SERVER] = !!data.server;\n    this[P_IP] = data.ip;\n    this[P_NETVER] = parseInt(data.netver, 10);\n    this[P_SENT] = parseInt(data.sent, 10);\n    this[P_APPVER] = data.appver;\n    this[P_PORT] = parseInt(data.port, 10);\n  }\n\n  /**\n   * Gets the number of received bytes from the connection.\n   *\n   * @returns {Number}\n   */\n  get recv() {\n    return this[P_RECV];\n  }\n\n  /**\n   * Gets the time difference of the current and the remote node in seconds.\n   *\n   * @returns {Number}\n   */\n  get timeDiff() {\n    return this[P_TIMEDIFF];\n  }\n\n  /**\n   * Net protocol available of other node\n   *\n   * @returns {Number}\n   */\n  get netVerA() {\n    return this[P_NETVER_A];\n  }\n\n  /**\n   * The duration of the connection.\n   *\n   * @returns {Number}\n   */\n  get secs() {\n    return this[P_SECS];\n  }\n\n  /**\n   * A flag indicating whether the other node is a server node (daemon).\n   * @returns {*}\n   */\n  get server() {\n    return this[P_SERVER];\n  }\n\n  /**\n   * The IP of the remote node.\n   *\n   * @returns {*}\n   */\n  get ip() {\n    return this[P_IP];\n  }\n\n  /**\n   * The netprotocol version of the other node.\n   *\n   * @returns {*}\n   */\n  get netVer() {\n    return this[P_NETVER];\n  }\n\n  /**\n   * The bytes sent to the other node.\n   *\n   * @returns {*}\n   */\n  get sent() {\n    return this[P_SENT];\n  }\n\n  /**\n   * The node version.\n   *\n   * @returns {*}\n   */\n  get appVer() {\n    return this[P_APPVER];\n  }\n\n  /**\n   * The port of the other node.\n   *\n   * @returns {*}\n   */\n  get port() {\n    return this[P_PORT];\n  }\n}\n\nmodule.exports = Connection;\n","module.exports = {\n  BaseAction: require('./BaseAction'),\n  OperationAction: require('./OperationAction'),\n  PagedAction: require('./PagedAction'),\n  SignOperationAction: require('./SignOperationAction')\n};\n","module.exports = {\n  ConnectionError: require('./ConnectionError'),\n  ResultError: require('./ResultError')\n};\n","module.exports = {\n  Account: require('./Account'),\n  Block: require('./Block'),\n  NodeStatus: require('./NodeStatus'),\n  NetStats: require('./NetStats'),\n  NetProtocol: require('./NetProtocol'),\n  NodeServer: require('./NodeServer'),\n  Operation: require('./Operation'),\n  Changer: require('./Changer'),\n  Receiver: require('./Receiver'),\n  Sender: require('./Sender'),\n  RawOperations: require('./RawOperations'),\n  WalletPublicKey: require('./WalletPublicKey')\n};\n"],"sourceRoot":""}