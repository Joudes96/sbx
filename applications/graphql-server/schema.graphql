scalar AccountNumber
scalar AccountName
scalar HexaString
scalar Currency
scalar OperationHash
scalar PublicKey

type Query {
  fetchAccount(account: AccountNumber!): Account
  fetchOperation(opHash: OperationHash!): Operation
  fetchBlock(block: Int!): Block
}

enum OpType {
  ALL
  BLOCKCHAIN_REWARD
  TRANSACTION
  CHANGE_KEY
  RECOVER_FUNDS
  LIST_FOR_SALE
  DELIST
  BUY
  CHANGE_KEY_ACCOUNT
  CHANGE_ACCOUNT_INFO
  MULTI_OPERATION
  DATA
}

enum SubType {
  ALL
  MINER
  DEVELOPER
  TX_SENDER
  TX_RECEIVER
  TX_BUY_BUYER
  TX_BUY_TARGET
  TX_BUY_SELLER
  CHANGE_KEY
  RECOVER
  LIST_PUBLIC
  LIST_PRIVATE
  DELIST
  BUY_BUYER
  BUY_TARGET
  BUY_SELLER
  CHANGE_KEY_SIGNED
  CHANGE_ACCOUNT_INFO
  MULTI_GLOBAL
  MULTI_ACCOUNT_INFO
  DATA_GLOBAL
  DATA_SENDER
  DATA_SIGNER
  DATA_RECEIVER
}

enum AccountState {
  normal
  listed
}

type Account {
  account: AccountNumber
  name: AccountName
  type: Int
  balance: Currency
  nOperation: Int
  updatedB: Int
  state: AccountState
  lockedUntilBlock: Int
  fetchLockedUntilBlock: Block
  price: Currency
  sellerAccount: Account
  privateSale: Boolean
  publicKey: PublicKey
  fetchOperations(page: Int = 1, amount: Int = 100, opType: OpType = ALL, subType: SubType = ALL) : [Operation]
}

type Block {
  block: Int
  publicKey: PublicKey
  reward: Currency
  fee: Currency
  ver: Int
  verA: Int
  timestamp: Int
  target: Int
  nonce: Int
  payload: String
  sbh: HexaString
  oph: HexaString
  pow: HexaString
  hashratekhs: Int
  maturation: Int
  operations: Int
  fetchOperations(page: Int = 1, amount: Int = 100, opType: OpType = IGNORE, subType: SubType = ALL) : [Operation]
}

type Operation {
  valid: Boolean
  errors: String
  payload: HexaString
  payloadAsString: String
  block: Int
  fetchBlock: Block
  time: Int
  opBlock: Int
  maturation: Int
  opType: Int
  account: AccountNumber
  fetchAccount: Account
  opTxt: String
  amount: Currency
  fee: Currency
  balance: Currency
  opHash: OperationHash
  subType: Int
  signerAccount: AccountNumber
  fetchSignerAccount: Account
  changers: [Changer],
  receivers: [Receiver],
  senders: [Sender]
}

type Changer {
  account: AccountNumber
  fetchAccount: Account
  nOperation: Int
  newPublicKey: PublicKey
  newName: AccountName
  newType: Int
  sellerAccount: AccountNumber
  fetchSellerAccount: Account
  accountPrice: Currency
  lockedUntilBlock: Int
  fetchLockedUntilBlock: Block
  fee: Currency
}

type Receiver {
  account: AccountNumber
  fetchAccount: Account
  amount: Currency
  payload: HexaString
  payloadAsString: String
}

type Sender {
  account: AccountNumber
  fetchAccount: Account
  nOperation: Int
  amount: Currency
  payload: HexaString
  payloadAsString: String
}

type Mutation {
  addPending(opHash: OperationHash): OperationHash
}

type Subscription {
  pendingAdded: OperationHash
}
